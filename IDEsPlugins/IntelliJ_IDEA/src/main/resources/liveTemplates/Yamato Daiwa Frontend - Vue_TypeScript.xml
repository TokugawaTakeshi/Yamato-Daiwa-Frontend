<templateSet group="Yamato Daiwa Frontend - Vue/TypeScript">
  <template name="ossll" value="//- Minimal example&#10;OverflowSafeSingleLineLabel {{ value }}&#10;&#10;//- Full example&#10;OverflowSafeSingleLineLabel(&#10;  rootElementTag=&quot;h1&quot;&#10;})&#10;//- --- END OF AUTOMATICALLY GENERATED CODE ----------------------------------------------------------------------------" description="`OverflowSafeSingleLineLabel` component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="badge-ydf-vue" value="Badge(&#10;  :keyLabel=&quot;$KEY$&quot; // TODO Remove if the badge is value-only&#10;  :value=&quot;$VALUE$&quot;&#10;  :theme=&quot;Badge.Themes.dark&quot; // TODO Remove if theme is only one, default or external&#10;  :externalThemes=&quot;true&quot;, // TODO Remove if false&#10;  :geometry=&quot;Badge.GeometricVariations.regular&quot; // TODO Remove if the geometric variation is only one or default&#10;  :geometricModifiers=&quot;[ Badge.GeometricModifiers.pillShape ]&quot; // TODO Remove if no geometric modifiers required&#10;  :decoration=&quot;Badge.DecorativeVariations.$DECORATIVE_VARIATION$&quot;&#10;  :decorativeModifiers=&quot;[ Badge__YDF.DecorativeModifiers.bordersDisguising ]&quot; // TODO Remove if no decorative modifiers required&#10;): PencilIcon__Boxed__Filled.Badge--YDF-Icon&#10;//- â†‘ TODO Remove if no icon required&#10;&#10;//- TODO [ Optimization ] initialize &quot;Badge&quot; variable in &quot;created&quot; lifecycle hook to make it non-reactive:&#10;&#10;public created(): void {&#10;&#10;  this.initializeNonReactiveClassFields();&#10;&#10;  Badge.registerImplementationLocally(this);&#10;&#10;}&#10;&#10;&#10;/* === Non-reactive class fields ==================================================================================== */&#10;protected Badge!: typeof Badge;&#10;&#10;private initializeNonReactiveClassFields(): void {&#10;  this.Badge = Badge;&#10;}&#10;  &#10;//- ==== END OF AUTOMATICALLY GENERATED CODE ===========================================================================" description="`Badge`, the YDF component (Vue)" toReformat="false" toShortenFQNames="true">
    <variable name="KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DECORATIVE_VARIATION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="badge-lp-ydf-vue" value="BadgeLoadingPlaceholder(&#10;  :theme=&quot;Badge.Themes.dark&quot; // TODO Remove if theme is only one, default or external&#10;  :externalThemes=&quot;true&quot;, // TODO Remove if false&#10;  :geometry=&quot;Badge.GeometricVariations.regular&quot; // TODO Remove if the geometric variation is only one or default&#10;  :geometricModifiers=&quot;[ Badge.GeometricModifiers.pillShape ]&quot; // TODO Remove if no geometric modifiers required&#10;)&#10;&#10;//- TODO [ Optimization ] initialize &quot;Badge&quot; variable in &quot;created&quot; lifecycle hook to make it non-reactive:&#10;&#10;public created(): void {&#10;&#10;  this.initializeNonReactiveClassFields();&#10;&#10;  Badge.registerImplementationLocally(this);&#10;&#10;}&#10;&#10;&#10;/* === Non-reactive class fields ==================================================================================== */&#10;protected Badge!: typeof Badge;&#10;&#10;private initializeNonReactiveClassFields(): void {&#10;  this.Badge = Badge;&#10;}&#10;  &#10;//- ==== END OF AUTOMATICALLY GENERATED CODE ===========================================================================" description="`Badge` (loading placeholder), the YDF component (Vue)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
</templateSet>