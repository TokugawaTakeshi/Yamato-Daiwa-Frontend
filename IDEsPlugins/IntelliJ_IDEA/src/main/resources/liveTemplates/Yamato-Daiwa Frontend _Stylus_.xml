<templateSet group="Yamato-Daiwa Frontend (Stylus)">
  <template name="nswu" value="NARROWEST_SCREEN_WIDTH_UNIT" description="`NARROWEST_SCREEN_WIDTH_UNIT` constant (320px)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_DECLARATION_BLOCK" value="false" />
      <option name="CSS_RULESET_LIST" value="false" />
    </context>
  </template>
  <template name="cbsr" value="CrossBrowserStylesReset()&#10;$END$" description="`CrossBrowserStylesReset` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="igcr" value="InitialGlobalCSS_Rules()&#10;$END$" description="`InitialGlobalCSS_Rules` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="ossll" value="OverflowSafeSingleLineLabel({&#10;  fontSize: $END$,&#10;  displayEllipsis: true&#10;})" description="`OverflowSafeSingleLineLabel` mixin/component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="prs" value="$END$// Minimal example&#10;PositionalRelationship({&#10;  definitions: (&quot;.Article-Paragraph&quot; { retireFromIt: { y: 8px }, pushItFromSelf: { y: 16px } })&#10;})&#10;&#10;&#10;// Scoped definition&#10;PositionalRelationship({&#10;  definitions: (&quot;h2&quot; { retireFromIt: { y: 8px }, pushItFromSelf: { y: 16px } }),&#10;  contextSelector: &quot;.Article&quot;,&#10;  referenceElementSelector: &quot;p&quot;&#10;})&#10;&#10;&#10;// All functionality used&#10;PositionalRelationship({&#10;  definitions:\&#10;      (&quot;.ContextSelector-ElementB&quot; { &#10;        retireFromIt: { x: 2px, y: 4px }, &#10;        pushItFromSelf: { x: 6px, y: 8px }, &#10;        usePaddingsInsteadOfMargins: true &#10;      })\&#10;      (&quot;.ContextSelector-ElementC&quot; { retireFromIt: { x: 10px, y: 12px }, pushItFromSelf: { x: 14px, y: 16px } }),&#10;  contextSelector: &quot;.ContextSelector&quot;,&#10;  referenceElementSelector: &quot;.ContextSelector-ElementA&quot;&#10;})&#10;&#10;// TODO Make sure that no whitespaces after backslashes, the line breakers&#10;// TODO Make sure that there are no training commas&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`PositionalRelationship` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="rf" value="// Minimal example&#10;retireFrom({ targetElementSelector: &quot;$TARGET_ELEMENT_SELECTOR$&quot;, y: 8px })&#10;&#10;&#10;// Scoped definition&#10;retireFrom({&#10;  targetElementSelector: &quot;$TARGET_ELEMENT_SELECTOR$&quot;,&#10;  y: 14px,&#10;  referenceElementSelector: &quot;p&quot;,&#10;  contextSelector: &quot;.Article&quot;&#10;})&#10;&#10;&#10;// Multiple definitions&#10;retireFrom({&#10;  definitions:\&#10;      (&quot;h1&quot; { x: 2px, y: 4px })\&#10;      (&quot;h2&quot; { x: 6px, y: 8px, usePaddingsInsteadOfMargins: true }),&#10;  referenceElementSelector: &quot;p&quot;,&#10;  contextSelector: &quot;.Article&quot;&#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`retireFrom` mixin" toReformat="false" toShortenFQNames="true">
    <variable name="TARGET_ELEMENT_SELECTOR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="ptfs" value="$END$// Minimal example&#10;pushTargetFromSelf({ targetElementSelector: &quot;.BlockName-ElementName&quot;, y: 4px })&#10;&#10;&#10;// Scoped definition&#10;pushTargetFromSelf({&#10;  targetElementSelector: &quot;h2&quot;,&#10;  y: 24px,&#10;  referenceElementSelector: &quot;p&quot;,&#10;  contextSelector: &quot;.Article&quot;&#10;})&#10;&#10;&#10;// Multiple definitions&#10;pushTargetFromSelf({&#10;  definitions:\&#10;    (&quot;.Example3-ElementA&quot; { x: 2px, y: 4px })\&#10;    (&quot;.Example3-ElementB&quot; { x: 6px, y: 8px, usePaddingsInsteadOfMargins: true })&#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`pushTargetFromSelf` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="rfewss" value="// Minimal example&#10;retireFromElementWithSameSelector({ y: $END$px })&#10;&#10;&#10;// Scoped definition&#10;retireFromElementWithSameSelector({ y: 8px, contextSelector: &quot;.Block ul&quot;, referenceElementSelector: &quot;li&quot; })&#10;&#10;&#10;// All functionality used&#10;retireFromElementWithSameSelector({&#10;  x: 4px,&#10;  y: 8px,&#10;  usePaddingsInsteadOfMargins: true,&#10;  contextSelector: &quot;.Block ol&quot;,&#10;  referenceElementSelector: &quot;li&quot;&#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`retireFromElementWithSameSelector` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="wigf" value="// Specify &quot;margin-top&quot; only&#10;whenItGoingFirst({ verticalSpaceAbove: $END$px })&#10;&#10;&#10;// Specify also other properties (parameters object is optional)&#10;+whenItGoingFirst({ verticalSpaceAbove: 4px })&#10;&#10;  border-top 1px solid gray&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`whenItGoingFirst` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="wigl" value="// Specify &quot;margin-bottom&quot; only&#10;whenItGoingLast({ verticalSpaceBelow: $END$px })&#10;&#10;&#10;// Specify also other properties (parameters object is optional)&#10;+whenItGoingLast({ verticalSpaceBelow: 36px })&#10;&#10;  border-bottom 2px solid gray&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`whenItGoingLast` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="wija" value="// Minimal example&#10;+whenItJustAfter({ targetElementSelector: &quot;.Block-ChildA1&quot; })&#10;&#10;  background gold&#10;&#10;&#10;// Scoped definition&#10;+whenItJustAfter({ &#10;  targetElementSelector: &quot;h2&quot;, &#10;  contextSelector: &quot;.Block2&quot;, &#10;  referenceElementSelector: &quot;p&quot; &#10;})&#10;&#10;  background silver&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`whenItJustAfter` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="wtgjai" value="$END$// Minimal example&#10;+whenTargetGoingJustAfterIt({ targetElementSelector: &quot;.Block-ChildA&quot; })&#10;&#10;  background gold&#10;&#10;&#10;// Scoped definition&#10;+whenTargetGoingJustAfterIt({ &#10;  targetElementSelector: &quot;h2&quot;, &#10;  contextSelector: &quot;.Block2&quot;, &#10;  referenceElementSelector: &quot;p&quot; &#10;})&#10;&#10;  background silver&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`whenTargetGoingJustAfterIt` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_PROPERTY_VALUE" value="false" />
    </context>
  </template>
  <template name="wtwssgjat" value="$END$// Minimal example&#10;+whenTargetWithSameSelectorGoingJustAfterIt()&#10;&#10;  border-top 1px solid black&#10;  &#10;  &#10;// Scoped definition&#10;+whenTargetWithSameSelectorGoingJustAfterIt({ referenceElementSelector: &quot;p&quot;, contextSelector: &quot;.Block&quot; })&#10;&#10;  border-top 1px solid black&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`whenTargetWithSameSelectorGoingJustAfterIt` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_PROPERTY_VALUE" value="false" />
    </context>
  </template>
  <template name="pd" value="// Frequent one-line use cases&#10;Paddings({ all: 3px })$END$&#10;Paddings({ horizontalSymmetric: 4px })&#10;Paddings({ verticalSymmetric: 5px })&#10;&#10;&#10;// Advanced examples&#10;Paddings({&#10;  all: 3px,&#10;  verticalUpwardShifting: 1px&#10;})&#10;&#10;Paddings({&#10;  horizontalSymmetric: 4px,&#10;  verticalSymmetric: 4px,&#10;  verticalUpwardShifting: 1px&#10;})&#10;&#10;Paddings({&#10;  left: 1px,&#10;  right: 2px,&#10;  top: 3px,&#10;  bottom: 4px,&#10;  verticalUpwardShifting: 1px&#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`Paddings` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="ainn" value="// One pair&#10;applyIfNotNull({ $KEY$: $VALUE$ })&#10;&#10;// Multile pairs&#10;applyIfNotNull({ &#10;  border-color: BORDER_COLOR,&#10;  background-color: BACKGROUND_COLOR &#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`applyIfNotNull` mixin" toReformat="false" toShortenFQNames="true">
    <variable name="KEY" expression="" defaultValue="&quot;validCSS_Key&quot;" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_PROPERTY_VALUE" value="false" />
      <option name="CSS_RULESET_LIST" value="false" />
    </context>
  </template>
  <template name="bce" value="buildCalcExpression(&quot;$END${a} - ${b}&quot;, { a: 100%, b: 30px })" description="`buildCalcExpression` function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_DECLARATION_BLOCK" value="false" />
      <option name="CSS_PROPERTY_VALUE" value="false" />
      <option name="CSS_RULESET_LIST" value="false" />
    </context>
  </template>
  <template name="fbv" value="fillBodyVertically({ verticalScrolling: $END$true })" description="`fillBodyVertically` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="ftdl" value="$END$// Minimal example&#10;FixedTranslucentDimLayer()&#10;&#10;// Full example&#10;FixedTranslucentDimLayer({&#10;  ZIndex: ZIndexes.blockingOverlay + 1,&#10;  backgroundColor: rgba(black, 0.5)&#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`FixedTranslucentDimLayer` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_PROPERTY_VALUE" value="false" />
      <option name="CSS_RULESET_LIST" value="false" />
    </context>
  </template>
  <template name="cnt" value="// Minimal example&#10;Centerer()&#10;&#10;// Full example&#10;Centerer({ minimalWidth: 400px, maximalWidth: 600px })&#10;// Defaults: { minimalWidth: GRID_MINIMAL_WIDTH, maximalWidth: GRID_MAXIMAL_WIDTH }&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`Centerer` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="pcsaov" value="SHADOW_THICKNESS = 4px&#10;&#10;box-shadow 0 0 SHADOW_THICKNESS rgba(black, 0.25)&#10;&#10;// Basic example&#10;provideClippedShadowsAndOutlinesVisibility({&#10;  requiredHorizontalSymmetricSpace: SHADOW_THICKNESS,&#10;  requiredSpaceAtBottom: SHADOW_THICKNESS&#10;})&#10;&#10;// All options&#10;provideClippedShadowsAndOutlinesVisibility({&#10;  &#10;  requiredHorizontalSymmetricSpace: 2px,&#10;  // OR&#10;  requiredSpaceAtLeft: 2px,&#10;  requiredSpaceAtRight: 2px,&#10;  &#10;  requiredVerticalSymmetricSpace: 2px,&#10;  // OR&#10;  requiredSpaceAtTop: 2px,&#10;  requiredSpaceAtBottom: 2px,&#10;  &#10;  noCompensatingNegativeTopMargins: true,&#10;  noCompensatingNegativeBottomMargins: true,&#10;  noCompensatingNegativeLeftMargins: true,&#10;  noCompensatingNegativeRightMargins: true,&#10;  &#10;  useBeforePseudoElementWithCompensatingNegativeTopMargins: true,&#10;  useAfterPseudoElementWithCompensatingNegativeBottomMargins: true&#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`provideClippedShadowsAndOutlinesVisibility` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_PROPERTY_VALUE" value="false" />
      <option name="CSS_RULESET_LIST" value="false" />
    </context>
  </template>
  <template name="blep" value="ButtonLikeElementsPrimer()&#10;&#10;$END$" description="`ButtonLikeElementsPrimer` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="bbc" value="buildBEM_Class({&#10;  block: &quot;$BOCK$&quot;,&#10;  element: &quot;$ELEMENT$&quot;,&#10;  modifier: &quot;$MODIFIER$&quot;,&#10;  elementSeparator: &quot;$ELEMENT_SEPARATOR$&quot;,  // Default: -&#10;  modifierSeparator: &quot;$MODIFIER_SEPARATOR$&quot; // Default: __&#10;})" description="`buildBEM_Class` function" toReformat="false" toShortenFQNames="true">
    <variable name="BOCK" expression="" defaultValue="&quot;Button&quot;" alwaysStopAt="true" />
    <variable name="ELEMENT" expression="" defaultValue="&quot;Icon&quot;" alwaysStopAt="true" />
    <variable name="MODIFIER" expression="" defaultValue="&quot;__Appended&quot;" alwaysStopAt="true" />
    <variable name="ELEMENT_SEPARATOR" expression="" defaultValue="__" alwaysStopAt="true" />
    <variable name="MODIFIER_SEPARATOR" expression="" defaultValue="_" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="true" />
      <option name="CSS_DECLARATION_BLOCK" value="false" />
      <option name="CSS_PROPERTY_VALUE" value="false" />
      <option name="CSS_RULESET_LIST" value="false" />
    </context>
  </template>
  <template name="chww" value="$END$// Minimal example&#10;centerHorizontallyWithoutWrapper({ targetElementType: HorizontalCenteringWithoutWrapper.TargetElementTypes.block }) &#10;// or: HorizontalCenteringWithoutWrapper.TargetElementTypes.inlineBlock&#10;&#10;// Full example&#10;centerHorizontallyWithoutWrapper({ &#10;  targetElementType: HorizontalCenteringWithoutWrapper.TargetElementTypes.block, // or: .inlineBlock&#10;  maximalWidth: 600px,&#10;  horizontalSpaceBetweenSelfAndParent: 20px &#10;})&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="`centerHorizontallyWithoutWrapper` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="ccwchp" value="CenteredContentWithComputedHorizontalPaddings({ contentWidth: $WIDTH$px })&#10;" description="`CenteredContentWithComputedHorizontalPaddings` mixin" toReformat="false" toShortenFQNames="true">
    <variable name="WIDTH" expression="" defaultValue="&quot;3*NARROWEST_SCREEN_WIDTH_UNIT&quot;" alwaysStopAt="true" />
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="med3c" value="MAXIMAL_CONTENT_WIDTH = $MAXIMAL_CONTENT_WIDTH$px&#10;MINIMAL_SIDE_SYMMETRIC_PADDINGS__WIDE_SCREENS = 20px&#10;&#10;wideScreensConfigurationMinimalWidth = MAXIMAL_CONTENT_WIDTH + 2*MINIMAL_SIDE_SYMMETRIC_PADDINGS__WIDE_SCREENS&#10;MEDIUM_SCREENS_CONFIGURATION_MINIMAL_WIDTH = 420px&#10;&#10;&#10;WideScreensConfiguration()&#10;  @media screen and (min-width: wideScreensConfigurationMinimalWidth)&#10;    {block}&#10;&#10;MediumScreensConfiguration()&#10;  @media screen and (min-width: MEDIUM_SCREENS_CONFIGURATION_MINIMAL_WIDTH) and (max-width: wideScreensConfigurationMinimalWidth - 1)&#10;    {block}&#10;&#10;NarrowScreensConfiguration()&#10;  @media screen and (max-width: MEDIUM_SCREENS_CONFIGURATION_MINIMAL_WIDTH - 1)&#10;    {block}&#10;&#10;WideAndMediumScreensConfiguration()&#10;  @media screen and (min-width: MEDIUM_SCREENS_CONFIGURATION_MINIMAL_WIDTH)&#10;    {block}&#10;&#10;MediumAndNarrowScreensConfiguration()&#10;  @media screen and (max-width: wideScreensConfigurationMinimalWidth - 1)&#10;    {block}&#10;&#10;&#10;+WideScreensConfiguration()&#10;&#10;  CenteredContentWithComputedHorizontalPaddings({ contentWidth: MAXIMAL_CONTENT_WIDTH })&#10;&#10;&#10;+MediumScreensConfiguration()&#10;&#10;  Paddings({ horizontalSymmetric: 20px })&#10;&#10;&#10;+NarrowScreensConfiguration()&#10;&#10;  Paddings({ horizontalSymmetric: 12px })&#10;// --- END OF AUTOMATICALLY GENERATED CODE ---------------------------------------------------------------------------" description="Code tempalte with media query definitions for 3-pattern layout" toReformat="false" toShortenFQNames="true">
    <variable name="MAXIMAL_CONTENT_WIDTH" expression="" defaultValue="&quot;920&quot;" alwaysStopAt="true" />
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="wsc" value="+WideScreensConfiguration()&#10;&#10;  $END$" description="`WideScreensConfiguration` media query" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="msc" value="+MediumScreensConfiguration()&#10;&#10;  $END$" description="`MediumScreensConfiguration` media query" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="wmsc" value="+WideAndMediumScreensConfiguration()&#10;&#10;  $END$" description="`WideAndMediumScreensConfiguration` media query" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="nsc" value="+NarrowScreensConfiguration()&#10;&#10;  $END$" description="`NarrowScreensConfiguration` media query" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="mnsc" value="+MediumAndNarrowScreensConfiguration()&#10;&#10;  $END$&#10;  " description="`MediumAndNarrowScreensConfiguration` media query" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
  <template name="ptr" value="placeToRight()&#10;$END$" description="`placeToRight` mixin" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS_DECLARATION_BLOCK" value="true" />
    </context>
  </template>
</templateSet>