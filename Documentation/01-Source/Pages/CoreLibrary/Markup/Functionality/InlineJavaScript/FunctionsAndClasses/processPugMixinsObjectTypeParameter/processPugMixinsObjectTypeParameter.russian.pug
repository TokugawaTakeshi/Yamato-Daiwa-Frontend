extends ../../../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../../../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "ru";
    HTML_PAGE_TITLE = buildHTML_PageTitle("processPugMixinsObjectTypeParameter");
    HTML_PageMetaData = {
      description: MetaDescriptionTemplates.pugFunction({
        functionName: "processPugMixinsObjectTypeParameter",
        whatFunctionDoes:
            "обрабатывает параметр Pug-примеси типа «объект» включая валидацию свойств и подстановку значений по умолчанию."
      }),
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [ "@Shared/CommonStyles", "@Layouts/TwoColumns/TwoColumnsLayout", "@Shared/ExternalComponents" ];
    scriptsURIs.endOfBody = [ "@Common" ];

    RoutingEmulator.setCurrentRoute("coreLibrary.markup.functionality.inlineJavaScript.functionsAndClasses.processPugMixinsObjectTypeParameter");

    LanguageDropDownList__YDF_DK.setLinks({
      english: "./processPugMixinsObjectTypeParameter.english.html",
      japanese: "./processPugMixinsObjectTypeParameter.japanese.html"
    });


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    +CallableExpressionScheme--YDF_DK({
      technicalName: "processPugMixinsObjectTypeParameter",
      localizedDescriptiveHeading: "Обработать параметр Pug-примеси типа «объект»",
      genericParameters: [
        {
          name: "PropertiesSpecification",
          extends: "ObjectSubtypes.fixedKeyAndValuePairsObject"
        }
      ],
      parametersSpecification: [
        {
          genericTechnicalName: "compoundParameter",
          localizedName: "Составной параметр",
          type: "CompoundParameter",
          required: true
        }
      ],
      returnedValue: "ProcessedMixinParameter",
      headingTag: "h1"
    })
      +ObjectTypeAbstract--YDF_DK({
        typeName: "CompoundParameter",
        localizedDescriptiveHeading: "Составной параметр",
        propertiesSpecification: {
          rawParameter: {
            localizedInterpretation: "Необработанный параметр (примеси)",
            type: "string",
            required: true
          },
          parameterPropertiesSpecification: {
            localizedInterpretation: "Спецификация свойств параметра (примеси)",
            type: "RawObjectDataProcessor.PropertiesSpecification",
            required: true
          },
          parameterNumber: {
            localizedInterpretation: "Номер параметра (примеси)",
            type: "number",
            required: true
          },
          parameterName: {
            localizedInterpretation: "Имя параметра (примеси)",
            type: "string",
            required: true
          },
          mixinName: {
            localizedInterpretation: "Имя примеси",
            type: "string",
            required: true
          }
        }
      })

    p.Article-Paragraph.
      Валидирует и обрабатывает #[+Term--YDID параметр] #[+Term__Contrast--YDID Pug-примеси] типа #[+Term--YDID «объект»].

    p.Article-Paragraph.
      Эта функциональность востребована в случаях, когда с помощью #[+Term--YDID Pug-примесей] реализуются
        #[+Term--YDID GUI-компоненты] или другие фрагменты #[+Term--YDID разметки] с большим количеством
        #[+Keyword--YDID настраиваемых] #[+Term--YDID свойств], некоторые из которых (а иногда и все) для корректной генерации
        #[+Term--YDID HTML-кода] должно соответствовать определённым ограничениям.


    h2.Article-Heading2 Проблематика

    p.Article-Paragraph
      | #[+Term--YDID HTML-препроцессор] #[+ImportantEntity--YDID Pug], как и
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.pug.homePage.inlineJavaScript
      }).Article-Link встроенный в него JavaScript
      |   #[+Keyword--YDID не]&nbsp;являются #[+Term--YDID статически типизированными языками].
      | В случае с использованием
      |
      +Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.mixins }).Article-Link Pug-примесей
      |   с #[+Term--YDID параметрами] это означает, что если #[+Term--YDID параметры] указаны неверно (количество
      |   #[+Term--YDID параметров], или же их тип и т. д.), то об этом #[+Keyword--YDID заранее]
      |   #[+Keyword__Contrast--YDID никаким] образом #[+Keyword--YDID не] будет сообщено разработчику.
      | Но даже если в ходе преобразования #[+ImportantEntity--YDID Pug] в #[+ImportantEntity--YDID HTML] и возникнет
      |   ошибка, то часто оказывается неясно, что именно и где было нарушено, а иногда и вовсе будет просто сгенерирован
      |   отличный от желаемого #[+Term--YDID HTML-код] без ошибок, что может быть замечено лишь через длительное время.
      | Особенно это критично, когда #[+Term--YDID примеси] поставляются сторонней библиотекой, а не&nbsp;написаны
      |   самостоятельно, в том числе и в случае с реализацией #[+Term--YDID GUI-компонентов] с помощью
      |   #[+Term--YDID Pug-примесей].

    p.Article-Paragraph.
      #[+Keyword--YDID Примитивное] решение этой проблемы — проверка #[+Term--YDID параметров] на #[+Term__Contrast--YDID тип]
        и другие свойства (такие как количество символов или #[+Term--YDID множество чисел]) с помощью
        #[+Keyword--YDID нативного] #[+ImportantEntity--YDID JavaScript]-а:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        :html_special_characters_to_html_entities
          mixin Example(foo, bar, baz)

            -

              if (typeof foo !== "string") {
                throw new Error(
                  `Тип 1-ого параметра примеси "Example" должен быть строкой в то время как он имеет тип "${ typeof foo }".`
                );
              }

              if (foo.length < 2) {
                throw new Error("1-ый параметр примеси \"Example\" должен иметь как минимум 2 символа.");
              }

              if (typeof bar !== "number") {
                throw new Error(
                  `Тип 2-ого параметра примеси "Example" должен быть числом в то время как он имеет тип "${ typeof bar }".`
                );
              }

              if (!Number.isInteger(bar)) {
                throw new Error("2-ой параметр примеси \"Example\" должен быть целым числом.");
              }

              if (bar < 10) {
                throw new Error(
                  `2-ой параметр примеси "Example" имеет значение ${ bar } в то время как минимальное значение — 10.`
                );
              }


              if (typeof baz !== "boolean") {
                throw new Error(
                  `Тип 3-его параметра примеси "Example" должен быть булевским в то время как он имеет тип "${ typeof baz }".`
                );
              }

    p.Article-Paragraph.
      Как видно, валидация даже трёх #[+Term--YDID параметров] заняла достаточно объёмную часть кода
        #[+Term--YDID Pug-примеси], при этом сообщения об ошибках шаблонные.
      А что, если #[+Term--YDID параметров] не 3, а 10 и больше?
      А что, если таких #[+Term--YDID присей] — несколько десятков?
      Такая ситуация #[+Keyphrase--YDID вполне реальная], потому что для #[+Keyword--YDID среднего] веб-приложения
        #[+ImportantEntity--YDID 20-30] #[+Term--YDID GUI-компонентов] с возможностью гибкой настройки через множество
        свойств — это норма, а потому подобная «ручная» проверка #[+Term--YDID параметров] будет занимать очень много
        времени, сил и строк кода.

    p.Article-Paragraph.
      Здесь возникает вопрос о #[+Keyword--YDID едином] механизме #[+Term--YDID валидации] #[+Term__Contrast--YDID параметров],
        который должен проверить их и их свойства и если что-то не так, то подробно логировать
        #[+Keyword--YDID все] нарушения (а #[+Keyword--YDID не]&nbsp;#[+Keyword__Contrast--YDID только] первое из них).
      При этом вывод информации в терминал должен быть достаточно понятен для того, чтобы пользователь
        #[+Term--YDID Pug-примеси] мог #[+Keyword--YDID самостоятельно] и #[+Keyword--YDID быстро] исправить нарушения
        #[+Keyphrase--YDID без траты времени на поиск нужной справки в документации].


    h3.Article-Heading3 Решение YDF

    p.Article-Paragraph
      | С использованием
      |
      +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.
            markup.$children.
            functionality.$children.
            inlineJavaScript.$children.
            YDEE_Integration.$URI
      }).Article-Link интеграции YDEE
      |   , в частности
      +Link--YDF({
        internalURI: sharedExternalLinks.YamatoDaiwaES_Extensions.RawObjectDataProcessor
      }).Article-Link класса RawObjectDataProcessor
      |   была разработана #[+Term--YDID функция] #[+ImportantEntity--YDID processPugMixinsObjectTypeParameter], которая,
      |   как это понятно из перевода, обрабатывает #[+Keyword--YDID один] #[+Term--YDID параметр] типа
      |   #[+Term--YDID «объект»] #[+Keyword__Contrast--YDID Pug-примеси].

    p.Article-Paragraph.
      Инструмента для валидации произвольного количества #[+Term--YDID параметров] любого типа
        (как в примере с #[+Term--YDID Example(foo, bar, baz)]) разработано #[+Keyword--YDID не]&nbsp;было, потому что
        #[+Term--YDID примеси] (как и #[+Term--YDID функции]) с большим количеством параметров создают трудности
        как в их обслуживании, так и в использовании.
      Например, в #[+SecondaryEntity__Code--YDID +Example("top", 2, false)] непонятно, какой смысл имеют значения
        #[+SecondaryEntity__Code--YDID 2] и #[+SecondaryEntity__Code--YDID false], и даже если в
        #[+Term--YDID интегрированной среде разработки] отображаются подсказки, то, например, #[+SecondaryEntity--YDID GitHub]
        или аналогичном сервисе при рецензии кода их не будет (да и то, это надо ещё поискать такой редактор кода или плагин,
        который отображает имена параметров #[+Term--YDID Pug-примесей]).
      К счастью, эту проблему легко решить, объединив несколько параметров в один типа «объект»:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        :html_special_characters_to_html_entities
          mixin Example(compoundParameter)

            const { foo, bar, baz } = compoundParameter;


    p.Article-Paragraph.
      В примере выше с помощью #[+Term--YDID деструктурирующего присваивания] все свойства объекта были вынесены в
        константы и теперь ими можно пользоваться как если бы это были отдельные параметры.
      Используя #[+ImportantEntity--YDID processPugMixinsObjectTypeParameter], деструктурировать нужно
        #[+Keyword--YDID не]&nbsp;сам #[+Term--YDID параметр] (#[+ImportantEntity__Code--YDID compoundParameter] в
        примере выше), а возвращаемое этой #[+Term--YDID функцией] значение:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        :html_special_characters_to_html_entities
          mixin Example(compoundParameter)

            const {
              foo,
              bar,
              baz
            } = processPugMixinsObjectTypeParameter({
              rawParameter: compoundParameter,
              parameterNumber: 1,
              parameterName: "compoundParameter",
              parameterPropertiesSpecification: {
                foo: {
                  type: String,
                  required: true,
                  minimalCharactersCount: 2
                },
                bar: {
                  type: Number,
                  numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeIngeter,
                  required: true,
                  minimalValue: 10
                },
                baz: {
                  type: Boolean,
                  required: true
                }
              },
              mixinName: "Example"
            });


    p.Article-Paragraph.
      Как видно, эта #[+Term--YDID функция] также принимает #[+Keyword--YDID единственный] #[+Term--YDID параметр]
        типа «объект» — по тем же причинам, что описаны выше для #[+Term--YDID Pug-примесей].
      Среди свойств #[+Term--YDID параметра] есть и #[+ImportantEntity__Code--YDID rawParameter] — в него передаётся
        #[+Keyword--YDID конкретный] #[+Term--YDID параметр] #[+Keyword--YDID Pug-примеси] (в примере выше от только один).
      Другое важное свойство — #[+ImportantEntity__Code--YDID parameterPropertiesSpecification]; именно в нём мы
        указываем правила валидации, и, если нужно, то обработки (таких как подстановка значений по умолчанию).

    +AttentionBox--YDF({ decoration: AttentionBox__YDF.DecorativeVariations.warning, hasPrependedSVG_Icon: true }).
      На данный момент #[+ImportantEntity--YDID RawObjectDataProcessor], корой использует
        #[+ImportantEntity--YDID processPugMixinsObjectTypeParameter], создаёт #[+Keyword--YDID новый]
        #[+Term--YDID объект] на основе старого, при этом в новый помещает
        #[+Keyphrase--YDID #[+Keyword--YDID только] те свойства, которые были объявлены в правилах валидации].
      Связано это с тем, что #[+ImportantEntity--YDID в общем случае] #[+Keyword--YDID не]&nbsp;каждое свойство
        и #[+Keyword--YDID не]&nbsp;каждого #[+Term--YDID объекта] можно менять, даже когда такие изменения запрошены.
      В будущем планируется добавить поддержку модификации исходного объекта (насколько это возможно),
        однако это займёт определённое время, так как ожидается значительное увеличение объёма исходного кода,
        а также необходимо как минимум удвоить количество тестов.

    p.Article-Paragraph
      | Свойство #[+ImportantEntity__Code--YDID parameterPropertiesSpecification] имеет тип
      |
      +Link--YDF({
        endorsedExternalURI: sharedExternalLinks.YamatoDaiwaES_Extensions.RawObjectDataProcessor.PropertiesSpecification
      }).Article-Link ObjectSubtypes.fixedKeyAndValuePairsObject
      |   — по сути это #[+Term--YDID объект] типа #[+Term--YDID «ассоциативный массив»], ключи которого должны
      |    совпадать с ключами целевого #[+Term--YDID параметра] #[+Term__Contrast--YDID Pug-примеси].

    p.Article-Paragraph.
      Остальные три свойства — #[+ImportantEntity__Code--YDID parameterNumber], #[+ImportantEntity__Code--YDID parameterName]
        и #[+ImportantEntity__Code--YDID mixinName] предназначены #[+Keyword--YDID исключительно] для логирования,
        однако они также важны, так как без их заполнения может быть неясно, где именно произошла ошибка.


    h2.Article-Heading2 Свойства единственного параметра

    h3.Article-Heading3 #[code rawParameter] — параметр примеси в момент начала её выполнения

    +PropertyMetadata--YDF_DK({
      localizedInterpretation: "Необработанный параметр (примеси)",
      type: "string",
      required: true
    })

    p.Article-Paragraph.
      #[+Term--YDID Параметр] #[+Term__Contrast--YDID Pug-примеси] #[+Keyphrase--YDID в исходном состоянии].

    ul.Article-UnorderedList

      li.
        Слово «raw» («сырой») здесь означает, что над этим #[+Term--YDID параметром]
         ещё&nbsp;#[+Keyword--YDID не]&nbsp;было проведено #[+Keyword--YDID никаких] манипуляций,
         таких как подстановка значений по умолчанию.

      li.
        Должен иметь тип #[+Term--YDID «объект»], в противном случае валидация сразу же завершится с ошибкой.
        #[+Keyword--YDID Единственное] #[+Keyword__Contrast--YDID исключение] — когда #[+Keyword--YDID все] свойства
          объявлены в #[+ImportantEntity__Code--YDID parameterPropertiesSpecification] как необязательные, в этом
          случае #[+ImportantEntity__Code--YDID rawParameter] может быть иметь тип
          #[+ImportantEntity__Code--YDID undefined] — #[+ImportantEntity--YDID processPugMixinsObjectTypeParameter]
          заменит его на пустой #[+Term--YDID объект].


    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          mixin Example(compoundParameter)

          const {
            foo,
            bar
          } = processPugMixinsObjectTypeParameter({
            rawParameter: compoundParameter,
            parameterNumber: 1,
            parameterName: "compoundParameter",
            parameterPropertiesSpecification: {
              foo: {
                type: String,
                required: false,
                minimalCharactersCount: 2
              },
              bar: {
                type: Number,
                numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeIngeter,
                defaultValue: 10
              }
            },
            mixinName: "Example"
          });
        +CodeViewer-Explanation--YDF
          p.Article-Paragraph.
            Согласно определению свойств в #[+ImportantEntity__Code--YDID parameterPropertiesSpecification] выше,
              свойство #[+SecondaryEntity__Code--YDID foo] является необязательным, а у
              #[+SecondaryEntity__Code--YDID bar] есть значение по умолчанию.
            Это значит, что #[+SecondaryEntity__Code--YDID = {}] в
              #[+SecondaryEntity__Code--YDID mixin Example(compoundParameter = {})] можно опустить,
              так как #[+ImportantEntity__Code--YDID processPugMixinsObjectTypeParameter] сама создаст
              #[+Keyword--YDID пустой] #[+Term--YDID объект].


    h3.Article-Heading3 #[code parameterPropertiesSpecification] — спецификация свойств параметра примеси

    p.Article-Paragraph
      | Правила валидации и обработки параметра #[+ImportantEntity__Code--YDID rawParameter] #[+Term--YDID Pug-примеси]
      |   в формате
      |
      +Link--YDF({
        endorsedExternalURI: sharedExternalLinks.YamatoDaiwaES_Extensions.RawObjectDataProcessor.PropertiesSpecification
      }).Article-Link ObjectSubtypes.fixedKeyAndValuePairsObject
      | .
      | По сути, это #[+Term--YDID объект] типа #[+Term__Contrast--YDID «ассоциативный массив»], #[+Term--YDID ключи]
      |   которого #[+Keyword--YDID должны] совпадать с ключами целевого #[+Term--YDID параметра]
      |  #[+Term__Contrast--YDID Pug-примеси].

    p.Article-Paragraph.
      В значениях ассоциативного массива #[+ImportantEntity__Code--YDID ObjectSubtypes.fixedKeyAndValuePairsObject]
        есть много разных опций, но для #[+Keyword--YDID каждого] свойства #[+Term--YDID примеси] необходимо указать
        нужно как #[+Keyword--YDID минимум] #[+Term--YDID тип] (#[+ImportantEntity__Code--YDID type]) и
        #[+Term--YDID обязательность] #[+ImportantEntity__Code--YDID required], при этом когда планируется обеспечить
        значение по умолчанию, вместо #[+ImportantEntity__Code--YDID required] нужно указать
        #[+ImportantEntity__Code--YDID defaultValue].

    p.Article-Paragraph.
      К сожалению ввиду того, что внутри #[+ImportantEntity--YDID Pug] используется #[+ImportantEntity--YDID JavaScript],
        а&nbsp;#[+Keyword--YDID не]&nbsp; #[+ImportantEntity--YDID TypeScript], при указании правил валидации легко
        ошибиться, что может привести к некорректному выполнению функции, а обнаружить это сразу возможно
        #[+Keyword--YDID не]&nbsp;всегда.
      Это #[+Keyword--YDID не]&nbsp;обесценивает использование #[+ImportantEntity__Code--YDID parameterPropertiesSpecification],
        поэтому что наличие валидации лучше его отсутствия, а с #[+ImportantEntity__Code--YDID parameterPropertiesSpecification]
        рутинного кода будет значительно меньше
      Чтобы снизить вероятность ошибки при определении правил валидации, можно в #[+ImportantEntity--YDID TypeScript]-файле
        объявить переменную типа　#[+ImportantEntity__Code--YDID ObjectSubtypes.fixedKeyAndValuePairsObject] и определить
        в ней все свойства, а затем вставить значение в #[+ImportantEntity--YDID Pug]-код.


    h3.Article-Heading Свойства логирования — #[code parameterNumber], #[code parameterName], #[+ImportantEntity__Code--YDID mixinName]

    p.Article-Paragraph.
      Используются исключительно для логирования ошибок валидации, если таковые будут допущены.
      Номер параметра #[+Keyword--YDID примеси] — #[+ImportantEntity__Code--YDID parameterNumber] — должен быть
      #[+Term--YDID натуральным числом]; остальные два свойства должны иметь строчные значения.

    +ConsoleOutput--YDF: :html_special_characters_to_html_entities
      Error  Task 'Markup processing', error occurred
      D:\IntelliJ IDEA\InHouseDevelopment\YamatoDaiwaFrontend\Documentation\01-Source\Pages\CoreLibrary\Markup\Functionality\InlineJavaScript\FunctionsAndClasses\processPugMixinsObjectTypeParameter\processPugMixinsObjectTypeParameter.russian.pug:380:7
          378|         #[+Term--YDID натуральным числом]; остальные два свойства должны иметь строчные значения.
          379|
        > 380|       +
      ---------------^
          381|
