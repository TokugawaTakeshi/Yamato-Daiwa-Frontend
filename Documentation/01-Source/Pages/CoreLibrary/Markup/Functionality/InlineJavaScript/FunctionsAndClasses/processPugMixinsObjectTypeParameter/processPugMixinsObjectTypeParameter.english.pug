extends ../../../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../../../../../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "en";
    HTML_PAGE_TITLE = buildHTML_PageTitle("processPugMixinsObjectTypeParameter");
    HTML_PageMetaData = {
      description: MetaDescriptionTemplates.pugFunction({
        functionName: "processPugMixinsObjectTypeParameter",
        whatFunctionDoes:
            "processed the Pug mixin object-type parameter including the validation of the properties and substitution " +
              "of the default values."
      }),
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [ "@Shared/CommonStyles", "@Layouts/TwoColumns/TwoColumnsLayout", "@Shared/ExternalComponents" ];
    scriptsURIs.endOfBody = [ "@Common" ];

    RoutingEmulator.setCurrentRoute("coreLibrary.markup.functionality.inlineJavaScript.functionsAndClasses.processPugMixinsObjectTypeParameter");

    LanguageDropDownList__YDF_DK.setLinks({
      japanese: "./processPugMixinsObjectTypeParameter.japanese.html",
      russian: "./processPugMixinsObjectTypeParameter.russian.html"
    });


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    h1.Article-Heading1 processPugMixinsObjectTypeParameter

    +CallableExpressionScheme--YDF_DK({
      technicalName: "processPugMixinsObjectTypeParameter",
      headingTag: "h1",
      genericParameters: [
        {
          name: "ProcessedMixinParameter",
          extends: "object"
        }
      ],
      parametersSpecification: [
        {
          genericTechnicalName: "compoundParameter",
          type: "CompoundParameter",
          required: true
        }
      ],
      returnedValue: "ProcessedMixinParameter"
    })
      +ObjectTypeAbstract--YDF_DK({
        typeName: "CompoundParameter",
        propertiesSpecification: {
          rawParameter: {
            type: "string",
            required: true
          },
          parameterPropertiesSpecification: {
            type: "RawObjectDataProcessor.PropertiesSpecification",
            required: true
          },
          parameterNumber: {
            type: "number",
            required: true
          },
          parameterName: {
            type: "string",
            required: true
          },
          mixinName: {
            type: "string",
            required: true
          }
        }
      })

    p.Article-Paragraph.
      Validates and processes the #[+Term--YDID object]-type #[+Term--YDID parameter] of the #[+Term__Contrast--YDID Pug mixin].

    p.Article-Paragraph.
      Such functionality is demanded when using the #[+Term--YDID Pug mixins], the #[+Term--YDID GUI components] or other
        #[+Term--YDID markup] fragments being implemented with large number of #[+Keyword--YDID customizable] properties
        herewith some (sometimes every) of them must satisfy the the certain limitations for the generating of correct
        #[+Term--YDID HTML-code].


    h2.Article-Heading2 Problematics

    p.Article-Paragraph
      | The #[+Term--YDID HTML preprocessor] #[+ImportantEntity--YDID Pug], same as
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.pug.homePage.inlineJavaScript
      }).Article-Link internal JavaScript
      |   are #[+Keyword--YDID not]&nbsp;the #[+Term--YDID statically typed languages].
      | In the case of usage of the
      |
      +Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.mixins }).Article-Link Pug mixins
      |   with #[+Term--YDID parameters] in means that if specified #[+Term--YDID parameters] are invalid (the
      |   #[+Term--YDID parameters] numbers, or their types, etc.), it will&nbsp;#[+Keyword--YDID not]&nbsp;be the
      |   notification #[+Keyword--YDID at advance] for the developer.
      | Even if during the #[+ImportantEntity--YDID Pug-to-HTML] conversion the error will occur, it could be unclear
      |   what exactly and where has been violated, and sometimes it will be just generated the #[+Term--YDID HTML code]
      |   different with desired one wihtout any errors, which could be notices after a long time.
      | Especially it is critical when the #[+Term--YDID mixins] are being provided by the third-party library,
      |   not being written yourself, including the case of the implementation of the #[+Term--YDID GUI components]
      |   by #[+Term--YDID Pug-mixins].

    p.Article-Paragraph.
      The #[+Keyword--YDID primitive] solution of this problem is checking of the #[+Term--YDID parameters] for the
        #[+Term--YDID type] and other properties such as characters count or #[+Term--YDID numbers set] using the
        #[+Keyword--YDID native] #[+ImportantEntity--YDID JavaScript]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        :html_special_characters_to_html_entities
          mixin Example(foo, bar, baz)

            -

              if (typeof foo !== "string") {
                throw new Error(
                  `The type of 1st parameter of "Example" mixin must be the string while actually has type "${ typeof foo }".`
                );
              }

              if (foo.length < 2) {
                throw new Error("1st parameter of \"Example\" mixin must have at least two characters.");
              }

              if (typeof bar !== "number") {
                throw new Error(
                  `The type of 2nd parameter of "Example" mixin must be the number while actually has type "${ typeof bar }".`
                );
              }

              if (!Number.isInteger(bar)) {
                throw new Error("The 2nd parameter of \"Example\" mixin must be the integer.");
              }

              if (bar < 10) {
                throw new Error(
                  `The 2nd parameter of "Example" has been specified with ${ bar } while required minimal value is 10.`
                );
              }


              if (typeof baz !== "boolean") {
                throw new Error(
                  `The type of 3rd parameter of "Example" mixin must be the boolean while actually has type "${ typeof baz }".`
                );
              }

    p.Article-Paragraph.
      As you can see, the validation even of three #[+Term--YDID parameters] takes pretty large part of the code of the
        #[+Term--YDID Pug mixin], herewith the errors messages are formulaic.
      Not, what it we have not 10 or more #[+Term--YDID parameters], not 3?
      Also, what if such #[+Term--YDID mixins] are several tens?
      Such situation is #[+Keyphrase--YDID completely realistic] because for the average web application
        #[+ImportantEntity--YDID 20-30] #[+Term--YDID GUI components] with flexible settings via plenty is normal,
        thus the "manual" validation of the #[+Term--YDID parameters] like above one will take a lot of time,
        psychic energy and code lines.

    p.Article-Paragraph.
      Here, the question about #[+Keyword--YDID unified] mechanism of the #[+Term--YDID parameters]
        #[+Term__Contrast--YDID validation] arises.
      Such mechanism must check the #[+Term--YDID parameters] and their properties and if something wrong, log
        the details about #[+Keyword--YDID all] violations ( #[+Keyword--YDID not]&nbsp;#[+Keyword__Contrast--YDID only]
        first of them).
      The terminal output must be enough understandable to user of the #[+Term--YDID Pug mixin] can #[+Keyword--YDID quickly]
        fix the violation #[+Keyword--YDID himself]
        #[+Keyphrase--YDID without taking the time for the searching of the relevant documentation].


    h3.Article-Heading3 The YDF solution

    p.Article-Paragraph
      | Using the
      |
      +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.
            markup.$children.
            functionality.$children.
            inlineJavaScript.$children.
            YDEE_Integration.$URI
      }).Article-Link YDEE integration
      |   , in particular
      +Link--YDF({
        internalURI: sharedExternalLinks.YamatoDaiwaES_Extensions.RawObjectDataProcessor
      }).Article-Link RawObjectDataProcessor class
      |   the #[+Term--YDID function] #[+ImportantEntity--YDID processPugMixinsObjectTypeParameter] has been developed.
      | As it clear from the #[+Term--YDID function] name, this #[+Term--YDID function] processes the #[+Keyword--YDID one]
      |   #[+Keyword--YDID object-type] #[+Term--YDID parameter] of the #[+Keyword__Contrast--YDID Pug mixin].

    p.Article-Paragraph.
      The tool for the validation of the arbitrary number of the #[+Term--YDID parameters] of any type
        (as in #[+Term--YDID Example(foo, bar, baz)] example) has #[+Keyword--YDID not]&nbsp;been developed because the
        #[+Term--YDID mixins] (same as #[+Term--YDID function]) with large number of #[+Term--YDID parameters] causes
        the problems on both maintenance and usage.
      For example, in the #[+SecondaryEntity__Code--YDID +Example("top", 2, false)] it is unclear, what semantically
        means #[+SecondaryEntity__Code--YDID 2] and #[+SecondaryEntity__Code--YDID false], and even if the #[+Term--YDID IDE]
        displays the hints, in the services like #[+SecondaryEntity--YDID GitHub] they will not be during the code review
         (and, it will be challenge to find the code editor or the plugin which displays the hints for the
         #[+Term--YDID parameters] of the #[+Term__Contrast--YDID Pug mixins]).
      Fortunately, this problem could be easily solved by the combining of the #[+Term--YDID parameters] single one
        of the object type:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        :html_special_characters_to_html_entities
          mixin Example(compoundParameter)

          const { foo, bar, baz } = compoundParameter;


    p.Article-Paragraph.
      In above example, using the #[+Term--YDID destructuring assignment] all properties has been extracted to
        separate constants and now they could be use as if it was the parameters.
      Using #[+ImportantEntity--YDID processPugMixinsObjectTypeParameter], it is required to destructure
        the value which this #[+Term--YDID function] returns, #[+Keyword--YDID not]&nbsp;the&nbsp;#[+Term--YDID parameter]
        (#[+ImportantEntity__Code--YDID compoundParameter] in above example) itself:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        :html_special_characters_to_html_entities
          mixin Example(compoundParameter)

            const {
              foo,
              bar,
              baz
            } = processPugMixinsObjectTypeParameter({
              rawParameter: compoundParameter,
              parameterNumber: 1,
              parameterName: "compoundParameter",
              parameterPropertiesSpecification: {
                foo: {
                  type: String,
                  required: true,
                  minimalCharactersCount: 2
                },
                bar: {
                  type: Number,
                  numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeIngeter,
                  required: true,
                  minimalValue: 10
                },
                baz: {
                  type: Boolean,
                  required: true
                }
              },
              mixinName: "Example"
            });

    p.Article-Paragraph.
      As you can see, this #[+Term--YDID function] also accepts the #[+Keyword--YDID sole] #[+Term--YDID parameter]
        of the #[+Term--YDID object] type.
      The reasons are same as described above for the #[+Term--YDID Pug mixins].
      Among the properties of this #[+Term--YDID parameter] there is #[+ImportantEntity__Code--YDID rawParameter] one —
        this one accepts the #[+Keyword--YDID specific] #[+Term--YDID parameter] of the #[+Keyword--YDID Pug mixin]
        (in above example there is only one).
      Another important property — the #[+ImportantEntity__Code--YDID parameterPropertiesSpecification] — must be defined
        with the validation rules, and, optionally, the processings such as the default values substitutions.

    +AttentionBox--YDF({ decoration: AttentionBox__YDF.DecorativeVariations.warning, hasPrependedSVG_Icon: true }).
      Currently the #[+ImportantEntity--YDID RawObjectDataProcessor] which is being used by
        #[+ImportantEntity--YDID processPugMixinsObjectTypeParameter], created the #[+Keyword--YDID new]
        #[+Term--YDID object] based on source one, herewith
        #[+Keyphrase--YDID #[+Keyword--YDID only] properties specified in validation rules will be added to new one].
      The reason is #[+ImportantEntity--YDID in the general case] #[+Keyword--YDID not]&nbsp;each property
        and #[+Keyword--YDID not]&nbsp;each #[+Term--YDID object] could be changed even if changes has been requested.
      Is is planned to add the support of the modification of the source #[+Term--YDID object] (as far as possible),
        however it will take some time because the code volume will significantly increase and also the tests number
        should become at least double.

    p.Article-Paragraph
      | The #[+ImportantEntity__Code--YDID parameterPropertiesSpecification] property has
      |
      +Link--YDF({
        endorsedExternalURI: sharedExternalLinks.YamatoDaiwaES_Extensions.RawObjectDataProcessor.PropertiesSpecification
      }).Article-Link ObjectSubtypes.fixedKeyAndValuePairsObject
      |   type.
      | In fact is the #[+Term--YDID associative array]-type #[+Term__Contrast--YDID object], which keys must be event
      |   with keys of the target #[+Term--YDID parameter] of the #[+Term__Contrast--YDID Pug mixin].

    p.Article-Paragraph.
      Remain three properties — #[+ImportantEntity__Code--YDID parameterNumber], #[+ImportantEntity__Code--YDID parameterName]
        and #[+ImportantEntity__Code--YDID mixinName] are required #[+Keyword--YDID only] for the logging,
        however they are also important because without specifying of them it could be unclear where exactly the issue
        has occurred.


    h2.Article-Heading2 The properties of the sole parameter

    h3.Article-Heading3 #[code rawParameter]

    p.Article-Paragraph.
      The #[+Term--YDID parameter] of the #[+Term__Contrast--YDID Pug mixin] #[+Keyphrase--YDID in the initial state].

    ul.Article-UnorderedList

      li.
        Here the "raw" means that &nbsp;#[+Keyword--YDID no]&nbsp;manipulations such as default values substitution
          has been executed #[+Keyword--YDID yet].

      li.
        Must the #[+Term--YDID object-type], otherwise the validation will be completed with error #[+Keyword--YDID immideatly].
        The #[+Keyword--YDID only] #[+Keyword__Contrast--YDID exceptions] is when #[+Keyword--YDID all] properties
          has been specified as optional in #[+ImportantEntity__Code--YDID parameterPropertiesSpecification], in this case
          #[+ImportantEntity__Code--YDID rawParameter] could be the #[+ImportantEntity__Code--YDID undefined] type
          (#[+ImportantEntity--YDID processPugMixinsObjectTypeParameter] will replace it with the empty #[+Term--YDID object]).


    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })
        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          mixin Example(compoundParameter)

          const {
            foo,
            bar
          } = processPugMixinsObjectTypeParameter({
            rawParameter: compoundParameter,
            parameterNumber: 1,
            parameterName: "compoundParameter",
            parameterPropertiesSpecification: {
              foo: {
                type: String,
                required: false,
                minimalCharactersCount: 2
              },
              bar: {
                type: Number,
                numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeIngeter,
                defaultValue: 10
              }
            },
            mixinName: "Example"
          });
        +CodeViewer-Explanation--YDF
          p.Article-Paragraph.
            According the definitions in #[+ImportantEntity__Code--YDID parameterPropertiesSpecification] above,
              the #[+SecondaryEntity__Code--YDID foo] property is optional and #[+SecondaryEntity__Code--YDID bar]
              property has the default value.
            It means, the #[+SecondaryEntity__Code--YDID = {}] at
              #[+SecondaryEntity__Code--YDID mixin Example(compoundParameter = {})] could be omitted,
              because #[+ImportantEntity__Code--YDID processPugMixinsObjectTypeParameter] will provide the
              #[+Keyword--YDID empty] #[+Term--YDID object].


    h3.Article-Heading3 #[code parameterPropertiesSpecification] — mixin parameter properties specification

    p.Article-Paragraph
      | The rules of the validation and processing of the target #[+Term--YDID parameter] of the #[+Term--YDID Pug mixin] in
      |
      +Link--YDF({
        endorsedExternalURI: sharedExternalLinks.YamatoDaiwaES_Extensions.RawObjectDataProcessor.PropertiesSpecification
      }).Article-Link ObjectSubtypes.fixedKeyAndValuePairsObject
      | format.
      | In fact it is the #[+Term--YDID associative array] type #[+Term__Contrast--YDID objects], which keys must be
      |   even with keys of target #[+Term--YDID parameter] of the #[+Term__Contrast--YDID Pug mixin].

    p.Article-Paragraph.
      There are many various options in the values of #[+ImportantEntity__Code--YDID ObjectSubtypes.fixedKeyAndValuePairsObject]
        #[+Term--YDID associative array], but for #[+Keyword--YDID each] property of the #[+Term--YDID mixin]
        it is required to specify #[+Keyword--YDID at least] the #[+Term--YDID type] and #[+Term--YDID requirement]
        (#[+ImportantEntity__Code--YDID required] option, herewith when you want to provide the default value,
        specify #[+ImportantEntity__Code--YDID defaultValue] option #[+Keyword--YDID instead]).

    p.Article-Paragraph.
      Unfortunately, being forced to use the #[+ImportantEntity--YDID JavaScript] instead of
        #[+ImportantEntity--YDID TypeScript] inside #[+ImportantEntity--YDID Pug], it is easy to make a mistake
        when specifying the validation rules what could entail the incorrect execution of the function and it
        could take some time to notice and localize the mistake.
      It does not devalue the usage of #[+ImportantEntity__Code--YDID parameterPropertiesSpecification], because the
        presence of the validation is better than absence, and also with
        #[+ImportantEntity__Code--YDID parameterPropertiesSpecification] the routing code volume will be significantly less.
      To reduce the probability of the mistake during the specifying of the validation rules, you can define the
        #[+Term--YDID variable] of the #[+ImportantEntity__Code--YDID ObjectSubtypes.fixedKeyAndValuePairsObject] type
        in the #[+ImportantEntity--YDID TypeScript] file and define all desired properties there, when paste the value to
        the #[+ImportantEntity--YDID Pug] code.


    h3.Article-Heading Logging properties — #[code parameterNumber], #[code parameterName], #[+ImportantEntity__Code--YDID mixinName]

    p.Article-Paragraph.
      Being used exclusively for the logging of the validation error if those will be made.
      The number of the #[+Term--YDID mixin] parameter — #[+ImportantEntity__Code--YDID parameterNumber] — must the the
        #[+Term--YDID natural number], other two properties must the the #[+Term--YDID strings].

    //- TODO Example & output
