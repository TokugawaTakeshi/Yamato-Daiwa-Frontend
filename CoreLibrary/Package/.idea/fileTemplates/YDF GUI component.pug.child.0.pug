include ${NAME}Localization.english.pug


-

  class ${NAME}__YDF {

    static CSS_NAMESPACE = "${NAME}--YDF";


    /* ━━━ Theming ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static Themes = { regular: "REGULAR" };

    static defineCustomThemes(themesNames) {
      return ComponentsAuxiliaries.defineNewThemes(themesNames, ${NAME}__YDF);
    }
    /* Or, for components using CompoundControlShell :
    static selfAndCompoundControlShellThemesCorrespondence = {
      [${NAME}__YDF.Themes.regular]: CompoundControlShell__YDF.Themes.regular
    };

    static defineCustomThemes(ownAndCorrespondingCompoundControlShellThemes_Names) {
      return ComponentsAuxiliaries.defineThemesAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellThemes_Names, ${NAME}__YDF
      );
    }
    */

    static areThemesCSS_ClassesCommon = ARE_YDF_COMPONENTS_THEMES_COMMON_BY_DEFAULT;

    static considerThemesAsCommon() {
      ${NAME}__YDF.areThemesCSS_ClassesCommon = true;
      return ${NAME}__YDF;
    }


    /* ─── Geometry ───────────────────────────────────────────────────────────────────────────────────────────────── */
    GeometricVariations: {
      regular: "REGULAR",
      small: "SMALL"
    }
    /* ...or one-liner for single geometric variation case: | TODO Delete this comment
    static GeometricVariations = { regular: "REGULAR" };  */


    static defineCustomGeometricVariations(geometricVariationsNames) {
      return ComponentsAuxiliaries.defineNewGeometricVariations(geometricVariationsNames, Button__YDF);
    }
    /* Or, for components using CompoundControlShell : | TODO Delete this comment
    static selfAndCompoundControlShellGeometricVariationsCorrespondence = {
      [${NAME}__YDF.GeometricVariations.regular]: CompoundControlShell__YDF.GeometricVariations.regular,
      [${NAME}__YDF.GeometricVariations.small]: CompoundControlShell__YDF.GeometricVariations.small
    };

    static defineNewGeometricVariations(ownAndCorrespondingCompoundControlShellGeometricVariations_Names) {
      return ComponentsAuxiliaries.defineGeometricVariationAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellGeometricVariations_Names, ${NAME}__YDF
      );
    }
    */

	static GeometricModifiers = {
      pillShape: "PILL_SHAPE",
      squareShape: "SQUARE_SHAPE",
      singleLine: "SINGLE_LINE",
      noLeftBorderAndRoundings: "NO_LEFT_BORDER_AND_ROUNDINGS",
      noRightBorderAndRoundings: "NO_RIGHT_BORDER_AND_ROUNDINGS"
    };


    /* ─── Decoration ─────────────────────────────────────────────────────────────────────────────────────────────── */
    static DecorativeVariations = {
      regular: "REGULAR",
      accented: "ACCENTED",
      linkLike: "LINK_LIKE"
    };
		/* ...or one-liner for single decorative variation case: | TODO Delete this comment
		static DecorativeVariations = { regular: "REGULAR" };  */

    static defineCustomDecorativeVariations(decorativeVariationsNames) {
      return ComponentsAuxiliaries.defineNewDecorativeVariations(decorativeVariationsNames, Button__YDF);
    }

		/* Or, for components using CompoundControlShell : | TODO Delete this comment
		static selfAndCompoundControlShellDecorativeVariationsCorrespondence = {
      [${NAME}__YDF.DecorativeVariations.regular]: CompoundControlShell__YDF.DecorativeVariations.regular
    };

    static defineNewDecorativeVariation(ownAndCorrespondingCompoundControlShellDecorativeVariations_Names) {
      return ComponentsAuxiliaries.defineDecorativeVariationAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellDecorativeVariations_Names, ${NAME}__YDF
      );
    }
		*/


    /* ━━━ Properties specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static propertiesSpecification = {

      HTML_Type: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(${NAME}__YDF.HTML_Types)
      },

      label: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      accessibilityGuidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      externalLabelHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      guidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      placeholder: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      value: {
        preValidationModifications: rawValue => isNumber(rawValue) ? String(rawValue) : rawValue,
        type: String,
        required: false
      },

      multiline: {
        type: Boolean,
        required: false
      },

      disabled: {
        type: Boolean,
        required: false
      },

      readonly: {
        type: Boolean,
        required: false
      },

      required: {
        type: Boolean,
        required: false
      },

      mustDisplayAppropriateBadgeIfInputIsRequired: {
        type: Boolean,
        required: false
      },

      mustDisplayAppropriateBadgeIfInputIsOptional: {
        type: Boolean,
        required: false
      },

      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge: {
        type: Boolean,
        required: false
      },

      minimalCharactersCount: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false
      },

      maximalCharactersCount: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false,
        customValidators: {
          validationFunction: ({ currentPropertyValue: maximalCharactersCount, rawData__currentObjectDepth }) =>
              isUndefined(rawData__currentObjectDepth.minimalCharactersCount) ||
              (
                Number.isInteger(rawData__currentObjectDepth.minimalCharactersCount) &&
                maximalCharactersCount >= rawData__currentObjectDepth.minimalCharactersCount
              ),
          descriptionForLogging: "\"maximalCharactersCount\" could not be less than \"minimalCharactersCount\"."
        }
      },

      minimalNumericValue: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false
      },

      maximalNumericValue: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false,
        customValidators: {
          validationFunction: ({ currentPropertyValue: maximalNumericValue, rawData__currentObjectDepth }) =>
              isUndefined(rawData__currentObjectDepth.minimalNumericValue) ||
              (
                Number.isInteger(rawData__currentObjectDepth.minimalNumericValue) &&
                maximalNumericValue >= rawData__currentObjectDepth.minimalNumericValue
              ),
          descriptionForLogging: "\"maximalNumericValue\" could not be less than \"minimalNumericValue\"."
        }
      },

      // TODO If such property is requried, replace it with more specific name, for example "inputOrTextAreaElementHTML_ID". | TODO Delete this comment
      coreElementHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      labelElementHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      theme: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(${NAME}__YDF.Themes)
      },

      areThemesCSS_ClassesCommon: {
        type: Boolean,
        required: false
      },

      geometry: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(${NAME}__YDF.GeometricVariations)
      },

      decoration: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(${NAME}__YDF.DecorativeVariations)
      }

    };


    /* ━━━ State simulations specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static statesSimulationsSpecification = {

      invalidInputHighlightingIfAnyValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.invalidInputHighlightingIfAnyValidationErrorsMessages,

      validValueHighlightingIfNoValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.validValueHighlightingIfNoValidationErrorsMessages,

      validationErrorsMessages: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          validationErrorsMessages,

      asynchronousValidationsStatuses: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          asynchronousValidationsStatuses

    };


    /* ━━━ Routines ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    /* ─── ID generating ──────────────────────────────────────────────────────────────────────────────────────────── */
    static counterForID_Generating = 0;

    static generateComponentID() {
      ${NAME}__YDF.counterForID_Generating++;
			// TODO Change the part before `--` to SCREAMING_SNAKE_CASE | TODO Delete this comment
      return `${NAME}--YDF-${ ${NAME}__YDF.counterForID_Generating }`;
    }


    /* ━━━ Localization ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    localization: ${NAME}YDF_ComponentEnglishLocalization // TODO Change first letter to lowercase | TODO Delete this comment

  }
