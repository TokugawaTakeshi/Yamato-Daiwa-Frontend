@require "Themes/Regular/GeometricVariations/Badge-RegularGeometry.styl"

@require "Themes/Regular/DecorativeVariations/Bright/Badge-VeryCatchyBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-CatchyBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-ModestlyCatchyBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-NeutralBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-CalmingBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-ModestlyCalmingBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-AchromaticBrightDecoration.styl"

@require "Themes/Regular/DecorativeVariations/Pastel/Badge-VeryCatchyPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-CatchyPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-ModestlyCatchyPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-NeutralPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-CalmingPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-ModestlyCalmingPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-AchromaticPastelDecoration.styl"


Badge--YDF = {

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {
          regular: Badge-RegularGeometry--YDF
        },

        decorativeVariations: {

          veryCatchyBright: Badge-VeryCatchyBrightDecoration--YDF,
          catchyBright: Badge-CatchyBrightDecoration--YDF,
          modestlyCatchyBright: Badge-ModestlyCatchyBrightDecoration--YDF,
          neutralBright: Badge-NeutralBrightDecoration--YDF,
          modestlyCalmingBright: Badge-ModestlyCalmingBrightDecoration--YDF,
          calmingBright: Badge-CalmingBrightDecoration--YDF,
          achromaticBright: Badge-AchromaticBrightDecoration--YDF,

          veryCatchyPastel: Badge-VeryCatchyPastelDecoration--YDF,
          catchyPastel: Badge-CatchyPastelDecoration--YDF,
          modestlyCatchyPastel: Badge-ModestlyCatchyPastelDecoration--YDF,
          neutralPastel: Badge-NeutralPastelDecoration--YDF,
          modestlyCalmingPastel: Badge-ModestlyCalmingPastelDecoration--YDF,
          calmingPastel: Badge-CalmingPastelDecoration--YDF,
          achromaticPastel: Badge-AchromaticPastelDecoration--YDF
        }

      }
    }
  }
}


provideBadgeYDF_Component(
  preset= Badge--YDF.defaultProperties,
  overridings = {},
  options = {
    themeIndependentStylesOnly: false,
    externalThemes: false,
    loadingPlaceholder: true
  },
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overridings)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideBadgeYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes.boolean,
        required: true
      },
      externalThemes: {
        type: DataTypes.boolean,
        required: true
      },
      loadingPlaceholder: {
        type: DataTypes.boolean,
        required: true
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // === Methods =======================================================================================================
  applyBasicRules()

    .Badge--YDF

      display inline-flex
      align-items center


    .Badge--YDF-Key

      word-break break-all


    .Badge--YDF-Value

      /.Badge--YDF__SingleLineMode &

        SingleLineTextElementOverflowSafety({ displayEllipsis: true })


      /:not(.Badge--YDF__SingleLineMode) &

        word-break break-all


    .Badge--YDF-SVG_Icon

      flex-shrink 0


    if options.loadingPlaceholder

      .Badge--YDF__LoadingPlaceholder

        display inline-block


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Badge.${ themeName }Theme.${ variationName }Geometry",
      { themeName: themeName, variationName: variationName }
    )

    ROOT_ELEMENT_SELECTOR = getCurrentSelectorSubstitutingRoot(".Badge--YDF")

    cachedValidReusables = extractAndValidateObjectProperties({
      targetObject: variation,
      targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
      extracts: {
        borders: { dotSeparatedPath: "rootElement.borders", required: false },
        labelTextSize: { dotSeparatedPath: "valueLabel.text.size", required: true },
        valueLabelLineSpacing: { dotSeparatedPath: "valueLabel.text.lineSpacing", required: false },
        valueLabelLineHeight: { dotSeparatedPath: "valueLabel.text.lineHeight", mustBeInsteadOf: "valueLabel.text.lineSpacing" },
        valueLabelVerticalSymmerticSpacingAsTopSpacing: {
          newName: "valueLabelTopSpacing",
          dotSeparatedPath: "valueLabel.spacing.verticalSymmertic",
          required: false
        },
        valueLabelVerticalSymmerticSpacingAsBottomSpacing: {
          newName: "valueLabelBottomSpacing",
          dotSeparatedPath: "valueLabel.spacing.verticalSymmertic",
          required: false
        },
        valueLabelTopSpacing: {
          dotSeparatedPath: "valueLabel.spacing.top",
          required: false,
          incompatibleWith: "SVG_Icon.spacing.verticalSymmertic"
        },
        valueLabelBottomSpacing: {
          dotSeparatedPath: "valueLabel.spacing.bottom",
          required: false,
          incompatibleWith: "SVG_Icon.spacing.verticalSymmertic"
        }
      }
    })


    +provideDefaultSelectorWhenRootAndApply(ROOT_ELEMENT_SELECTOR)

      BordersSizing(cachedValidReusables.borders)

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    &.Badge--YDF__PillShapeGeometricModifier

      TEXT_SIZE_TO_BORDER_RADIUS_RATIO = extractAndValidateObjectProperties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        extracts: {
          textSizeToBorderRadiusRatio: {
            dotSeparatedPath: "rootElement.modifiers.pillShape.textSizeToBorderRadiusRatio", required: true
          }
        }
      }).textSizeToBorderRadiusRatio

      border-radius cachedValidReusables.labelTextSize * TEXT_SIZE_TO_BORDER_RADIUS_RATIO


    .Badge--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          width: { dotSeparatedPath: "SVG_Icon.width", required: false },
          height: {
            dotSeparatedPath: "SVG_Icon.height",
            requiredIf: {
              predicate: @(variation) { return isNull(getObjectValueByDotSeparatedPathSafely(variation, "SVG_Icon.width")) },
              conditionDescription: "'SVG_Icon.width' icon is null"
            }
          },
          verticalSymmerticMarginsAsTopMargin: {
            newName: "margin-top",
            dotSeparatedPath: "SVG_Icon.spacing.verticalSymmertic",
            required: false
          },
          verticalSymmerticMarginsAsBottomMargin: {
            newName: "margin-bottom",
            dotSeparatedPath: "SVG_Icon.spacing.verticalSymmertic",
            required: false
          },
          topMargin: {
            newName: "margin-top",
            dotSeparatedPath: "SVG_Icon.spacing.top",
            required: false,
            incompatibleWith: "SVG_Icon.spacing.verticalSymmertic"
          },
          bottomMargin: {
            newName: "margin-bottom",
            dotSeparatedPath: "SVG_Icon.spacing.bottom",
            required: false,
            incompatibleWith: "SVG_Icon.spacing.verticalSymmertic"
          },
          margin-left: { dotSeparatedPath: "SVG_Icon.spacing.left", required: true }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.SVG_Icon.customDeclarations)


    .Badge--YDF-Key

      // [ Approach ] The margins are reserved by `applyTextGeometryWithoutExtraSpaceCausedByLineHeight`.
      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          verticalSymmerticPaddingAsTopPadding: {
            newName: "padding-top",
            dotSeparatedPath: "keyLabel.spacing.verticalSymmertic",
            required: false
          },
          verticalSymmerticPaddingAsBottomPaddings: {
            newName: "padding-bottom",
            dotSeparatedPath: "keyLabel.spacing.verticalSymmertic",
            required: false
          },
          topPadding: {
            newName: "padding-top",
            dotSeparatedPath: "keyLabel.spacing.top",
            required: false,
            incompatibleWith: "keyLabel.spacing.verticalSymmertic"
          },
          bottomPadding: {
            newName: "padding-bottom",
            dotSeparatedPath: "keyLabel.spacing.bottom",
            required: false,
            incompatibleWith: "keyLabel.spacing.verticalSymmertic"
          }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.keyLabel.customDeclarations)


      &:first-child

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            margin-left: { dotSeparatedPath: "keyLabel.spacing.leftWhenGoingFirst", required: true }
          }
        })


    &.Badge--YDF__SingleLineMode .Badge--YDF-Key

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-size: { dotSeparatedPath: "keyLabel.text.size", required: true }
        }
      })

      SingleLineTextElementOverflowSafety({ displayEllipsis: true })


    &:not(.Badge--YDF__SingleLineMode) .Badge--YDF-Key

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
        merge(
          extractAndValidateObjectProperties({
            targetObject: variation,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            extracts: {
              fontSize: { dotSeparatedPath: "keyLabel.text.size", required: true },
              lineSpacing: { dotSeparatedPath: "keyLabel.text.lineSpacing", required: false },
              lineHeight: { dotSeparatedPath: "keyLabel.text.lineHeight", mustBeInsteadOf: "keyLabel.text.lineSpacing" }
            }
          }),
          {
            mustApplyNegativeMarginsToRootElement: true
          }
        )
      )


    retireFrom({
      targetElementSelector: ".Badge--YDF-SVG_Icon",
      contextSelector: selector(),
      referenceElementSelector: ".Badge--YDF-Key",
      x: extractAndValidateObjectProperties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        extracts: {
          spacingAfterSVG_Icon: { dotSeparatedPath: "keyLabel.spacing.afterSVG_Icon", required: true },
        }
      }).spacingAfterSVG_Icon
    })


    .Badge--YDF-Value

      // [ Approach ] The margins are reserved by `applyTextGeometryWithoutExtraSpaceCausedByLineHeight`.
      applyIfNotNull({
        padding-top: cachedValidReusables.valueLabelTopSpacing,
        padding-bottom: cachedValidReusables.valueLabelBottomSpacing
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.valueLabel.customDeclarations)


      &:first-child

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            margin-left: { dotSeparatedPath: "valueLabel.spacing.leftWhenGoingFirst", required: true }
          }
        })


      &:last-child

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            margin-right: { dotSeparatedPath: "valueLabel.spacing.right", required: true }
          }
        })


    &.Badge--YDF__SingleLineMode .Badge--YDF-Value

      font-size: cachedValidReusables.labelTextSize


    &:not(.Badge--YDF__SingleLineMode) .Badge--YDF-Value

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight({
        fontSize: cachedValidReusables.labelTextSize,
        lineSpacing: cachedValidReusables.valueLabelLineSpacing,
        lineHeight: cachedValidReusables.valueLabelLineHeight,
        mustApplyNegativeMarginsToRootElement: true
      })


    retireFrom({
      definitions:\
          (".Badge--YDF-SVG_Icon" {
            x: extractAndValidateObjectProperties({
              targetObject: variation,
              targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
              extracts: { spacingAfterSVG_Icon: { dotSeparatedPath: "valueLabel.spacing.afterSVG_Icon", required: true } }
            }).spacingAfterSVG_Icon
          })\
          (".Badge--YDF-Key" {
            x: extractAndValidateObjectProperties({
              targetObject: variation,
              targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
              extracts: { spacingAfterKeyLabel: { dotSeparatedPath: "valueLabel.spacing.afterKeyLabel", required: true } }
            }).spacingAfterKeyLabel
          }),
      referenceElementSelector: ".Badge--YDF-Value",
      contextSelector: selector()
    })


    if options.loadingPlaceholder

      &.Badge--YDF__LoadingPlaceholder

        LoadingPlaceholder()

        HEIGHT = computeTotalHeightByTextElementHeightSizingSpecification({
          type: TextElementHeightSizingTypes.natural,
          borders: cachedValidReusables.borders,
          paddings: {
            top: cachedValidReusables.valueLabelTopSpacing,
            bottom: cachedValidReusables.valueLabelBottomSpacing
          },
          fontSize: cachedValidReusables.labelTextSize,
          lineSpacing: cachedValidReusables.valueLabelLineSpacing,
          lineHeight: cachedValidReusables.valueLabelLineHeight
        })

        min-width: variation.rootElement.loadingPlaceholder.minimalWidth
        height HEIGHT


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Badge.${themeName}Theme.${variationName}Decoration",
      { themeName: themeName, variationName: variationName }
    )

    ROOT_ELEMENT_SELECTOR = getCurrentSelectorSubstitutingRoot(".Badge--YDF")


    +provideDefaultSelectorWhenRootAndApply(ROOT_ELEMENT_SELECTOR)

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          border-style: { dotSeparatedPath: "rootElement.borders.style", required: false },
          border-color: { dotSeparatedPath: "rootElement.borders.color", required: false },
          background-color: { dotSeparatedPath: "rootElement.background.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    .Badge--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          fill: { dotSeparatedPath: "SVG_Icon.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.SVG_Icon.customDeclarations)


    .Badge--YDF-Key

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "keyLabel.text.fontWeight", required: false },
          color: { dotSeparatedPath: "keyLabel.text.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.keyLabel.customDeclarations)


    .Badge--YDF-Value

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "valueLabel.text.fontWeight", required: false },
          color: { dotSeparatedPath: "valueLabel.text.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.valueLabel.customDeclarations)


  // === Applying ======================================================================================================
  applyBasicRules()

  if !options.themeIndependentStylesOnly

    applyComponentThemes({
      CSS_Namespace: "Badge--YDF",
      themes: properties.themes,
      applyGeometricVariation: applyGeometricVariation,
      applyDecorativeVariation: applyDecorativeVariation
    })
