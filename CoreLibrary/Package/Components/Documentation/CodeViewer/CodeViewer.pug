mixin CodeViewer(properties)

  -

    properties = properties || {}

    const {
      topHeading,
      resultViewURI,
      enableDefaultPaddingsInViewport = false
    } = properties


  .CodeViewer&attributes(attributes)(
    data-element-root
  )

    if topHeading

      .CodeViewer-TopHeading= topHeading


    if resultViewURI

      iframe.CodeViewer-IFrame(
        src= resultViewURI
        class= enableDefaultPaddingsInViewport && "CodeViewer-CodeExecutionResultViewport__DefaultPaddings"
        title="Below code rendering result"
      )

    .CodeViewer-ActionBar

      button.CodeViewer-ActionBar__CopyCode(
        type="button"
      ) Copy code


    .CodeViewer-TabsFlow(
      data-element-tabs_flow
    )

    .CodeViewer-TabsContent
      block


mixin CodeViewer-Listing(properties)

  .CodeViewer-TabContent(
    data-element-tab_content
    data-file_label= properties.fileLabel
    data-is_active= properties.isActive
    data-language= PrismJS_Integration.languageNotationsAndTitlesMap[properties.codeLanguageNotationByPrismJS]
    hidden= !properties.isActive
  )
    pre
      code.CodeViewer-CodeListing-CodeContainer(
        class=`language-${properties.codeLanguageNotationByPrismJS}`
      )
        block


mixin CodeViewer-PartialListingsWithExplanations(properties)

  .CodeViewer-TabContent(
    data-element-tab_content
    data-file_label= properties.fileLabel
    data-is_active= properties.isActive
    data-language= PrismJS_Integration.languageNotationsAndTitlesMap[properties.codeLanguageNotationByPrismJS]
    hidden= !properties.isActive
  )

    block


mixin CodeViewer-PartialListing(properties)

  pre
    code.CodeViewer-CodeListing-CodeContainer
      block


mixin CodeViewer-Explanation(properties)
  .CodeViewer-Explanation
    +InfoSignIcon__Circled__Filled.CodeViewer-Explanations-Icon
    .CodeViewer-Explanation-Text
      block
