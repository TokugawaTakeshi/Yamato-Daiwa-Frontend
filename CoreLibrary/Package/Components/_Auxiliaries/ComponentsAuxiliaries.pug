-

  let ARE_YDF_COMPONENTS_THEMES_COMMON_BY_DEFAULT = false;

  class ComponentsAuxiliaries {

    static validatableControlGeneralStatesSimulationsSpecification = {

      invalidInputHighlightingIfAnyValidationErrorsMessages: {
        type: Boolean,
        required: false
      },

      validValueHighlightingIfNoValidationErrorsMessages: {
        type: Boolean,
        required: false
      },

      validationErrorsMessages: {
        type: RawObjectDataProcessor.ValuesTypesIDs.oneOf,
        required: false,
        alternatives: [
          {
            type: Array,
            element: {
              type: String,
              minimalCharactersCount: 1
            }
          },
          {
            type: Boolean
          }
        ]
      },

      asynchronousValidationsStatuses: {
        type: RawObjectDataProcessor.ValuesTypesIDs.oneOf,
        required: false,
        alternatives: [
          {
            type: Array,
            element: {
              type: Object,
              properties: {
                ID: {
                  type: String,
                  required: true,
                  allowedAlternatives: [ "IN_PROGRESS", "FINISHED_BUT_INVALID", "FINISHED_AND_VALID", "MALFUNCTION" ]
                },
                message: {
                  type: String,
                  required: true,
                  minimalCharactersCount: 1
                }
              }
            }
          },
          {
            type: Boolean
          }
        ]
      }

    };


    static defineNewThemes(themesNames, TargetComponentClass) {

      for (const themeName of themesNames) {
        TargetComponentClass.Themes[toLowerCamelCase(themeName)] = toScreamingSnakeCase(themeName);
      }

      return TargetComponentClass;

    }

    static defineNewGeometricVariations(geometricVariationsNames, TargetComponentClass) {

      for (const geometricVariationName of geometricVariationsNames) {
        TargetComponentClass.GeometricVariations[toLowerCamelCase(geometricVariationName)] =
            toScreamingSnakeCase(geometricVariationName);
      }

      return TargetComponentClass;

    }

    static defineNewDecorativeVariations(decorativeVariationsNames, TargetComponentClass) {

      for (const decorativeVariationName of decorativeVariationsNames) {
        TargetComponentClass.DecorativeVariations[toLowerCamelCase(decorativeVariationName)] =
            toScreamingSnakeCase(decorativeVariationName);;
      }

      return TargetComponentClass;

    }


    static defineThemesAndAssociateThemWithParentCompoundControlShellOnes(
      ownAndCorrespondingCompoundControlShellThemes_Names,
      TargetComponentClass
    ) {

      ComponentsAuxiliaries.defineNewThemes(Object.keys(ownAndCorrespondingCompoundControlShellThemes_Names));

      for (
        const [ ownThemeName, compoundControlShell_sThemeName ] of
        Object.entries(ownAndCorrespondingCompoundControlShellThemes_Names)
      ) {
        /* [ Optimization ] The recomputing of screaming shake case (usually 1-2 words) which already has been computed
         * in `defineNewThemes` is cheaper for the performance than creating of additional methods, caching variables etc. */
        TargetComponentClass.selfAndCompoundControlShellThemesCorrespondence[themeName__screamingSnakeCase(ownThemeName)] =
            compoundControlShell_sThemeName;
      }

      return TargetComponentClass;
    }

    static defineGeometricVariationAndAssociateThemWithParentCompoundControlShellOnes(
      ownAndCorrespondingCompoundControlShellGeometricVariations_Names,
      TargetComponentClass
    ) {

      ComponentsAuxiliaries.defineNewGeometricVariations(
        Object.keys(ownAndCorrespondingCompoundControlShellGeometricVariations_Names)
      );

      for (
        const [ ownGeometricVariationName, compoundControlShell_sGeometricVariationName ] of
        Object.entries(ownAndCorrespondingCompoundControlShellGeometricVariations_Names)
      ) {
        /* [ Optimization ] The recomputing of screaming shake case (usually 1-2 words) which already has been computed
         * in `defineNewGeometricVariations` is cheaper for the performance than creating of additional methods, caching variables etc.  */
        TargetComponentClass.selfAndCompoundControlShellGeometricVariationsCorrespondence[
          ownGeometricVariationName(ownGeometricVariationName)
        ] = compoundControlShell_sGeometricVariationName;
      }

      return TargetComponentClass;
    }

    static defineDecorativeVariationAndAssociateThemWithParentCompoundControlShellOnes(
      ownAndCorrespondingCompoundControlShellDecorativeVariations_Names,
      TargetComponentClass
    ) {

      ComponentsAuxiliaries.defineNewDecorativeVariations(
        Object.keys(ownAndCorrespondingCompoundControlShellDecorativeVariations_Names)
      );

      for (
        const [ ownDecorativeVariationName, compoundControlShell_sDecorativeVariationName ] of
        Object.entries(ownAndCorrespondingCompoundControlShellDecorativeVariations_Names)
      ) {
        /* [ Optimization ] The recomputing of screaming shake case (usually 1-2 words) which already has been computed
         * in `defineNewDecorativeVariations` is cheaper for the performance than creating of additional methods, caching variables etc. */
        TargetComponentClass.selfAndCompoundControlShellDecorativeVariationsCorrespondence[
          ownDecorativeVariationName(ownDecorativeVariationName)
        ] = compoundControlShell_sDecorativeVariationName;
      }

      return TargetComponentClass;
    }


    static addThemeCSS_ClassToArrayIfMust(
      {
        theme,
        allThemes,
        areThemesCSS_ClassesCommon,
        CSS_Namespace
      }
    ) {
      return Object.entries(allThemes).length > 1 && !areThemesCSS_ClassesCommon ?
          [ `${ CSS_Namespace }__${ toUpperCamelCase(theme) }Theme` ] : [];
    }

    static addGeometricVariationCSS_ClassToArrayIfMust(
      {
        geometry,
        allGeometricVariations,
        CSS_Namespace
      }
    ) {
      return Object.entries(allGeometricVariations).length > 1 ?
          [ `${ CSS_Namespace }__${ toUpperCamelCase(geometry) }Geometry` ] : []
    }

    static addDecorativeVariationCSS_ClassToArrayIfMust(
      {
        decoration,
        allDecorativeVariations,
        CSS_Namespace
      }
    ) {
      return Object.entries(allDecorativeVariations).length > 1 ?
          [ `${ CSS_Namespace }__${ toUpperCamelCase(decoration)}Decoration` ] : []
    }


    /**
     * @param { string } CSS_Namespace
     * @param { Array<string> } demandedGeometricModifiersNames
     * @return Array<string>
     * */
    static generateDemandedGeometricModifiersCSS_Classes(CSS_Namespace, demandedGeometricModifiersNames) {
      return demandedGeometricModifiersNames.map(
        geometricModifierName => `${ CSS_Namespace }__${ toUpperCamelCase(geometricModifierName) }GeometricModifier`
      )
    }

    /**
     * @param { string } CSS_Namespace
     * @param { Array<string> } demandedDecorativeModifiersNames
     * @return Array<string>
     * */
    static generateDemandedDecorativeModifiersCSS_Classes(CSS_Namespace, demandedDecorativeModifiersNames) {
      return demandedDecorativeModifiersNames.map(
        decorativeModifierName => `${ CSS_Namespace }__${ toUpperCamelCase(decorativeModifierName) }DecorativeModifier`
      )
    }


    /** @deprecated Use `addThemeCSS_ClassToArrayIfMust` instead. */
    static generateThemeCSS_Class(CSS_Namespace, themeName) {
      return `${CSS_Namespace}__${toUpperCamelCase(themeName)}Theme`;
    }

    /** @deprecated Use `addGeometricVariationCSS_ClassToArrayIfMust` instead. */
    static generateGeometricVariationCSS_Class(CSS_Namespace, geometricVariationName) {
      return `${CSS_Namespace}__${toUpperCamelCase(geometricVariationName)}Geometry`;
    }

    /** @deprecated Use `generateDecorativeVariationCSS_Class` instead. */
    static generateDecorativeVariationCSS_Class(CSS_Namespace, decorativeVariationName) {
      return `${CSS_Namespace}__${toUpperCamelCase(decorativeVariationName)}Decoration`;
    }

  }
