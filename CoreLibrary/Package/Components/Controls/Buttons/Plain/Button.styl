@require "Themes/Regular/GeometricVariations/Button-RegularGeometry.styl"
@require "Themes/Regular/GeometricVariations/Button-SmallGeometry.styl"
@require "Themes/Regular/GeometricVariations/Button-LinkLikeGeometry.styl"

@require "Themes/Regular/DecorativeVariations/Button-RegularDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Button-AccentedDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Button-LinkLikeDecoration.styl"


Button--YDF = {

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {
          regular: Button-RegularGeometry--YDF,
          small: Button-SmallGeometry--YDF,
          linkLike: Button-LinkLikeGeometry--YDF
        },

        decorativeVariations: {
          regular: Button-RegularDecoration--YDF,
          accented: Button-AccentedDecoration--YDF,
          linkLike: Button-LinkLikeDecoration--YDF
        }

      }
    }
  }
}


provideButtonYDF_Component(
  preset = Button--YDF.defaultProperties,
  overridings = {},
  options = {
    themeIndependentStylesOnly: false,
    externalThemes: false,
    loadingPlaceholder: true,
    geometricModifiers: {
      pillShape: true,
      squareShape: true
    }
  },
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overridings)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideButtonYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes.boolean,
        required: true
      },
      externalThemes: {
        type: DataTypes.boolean,
        required: true
      },
      loadingPlaceholder: {
        type: DataTypes.boolean,
        required: true
      },
      geometricModifiers: {
        type: DataTypes.object,
        required: true,
        properties: {
          pillShape: {
            type: DataTypes.boolean,
            required: true
          },
          squareShape: {
            type: DataTypes.boolean,
            required: true
          }
        }
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // === Methods =======================================================================================================
  applyBasicRules()

    .Button--YDF

      ButtonLikeElementsPrimer()

      cursor pointer


      &:disabled

        cursor not-allowed


    button.Button--YDF,
    a.Button--YDF

      display inline-flex
      justify-content center
      align-items center


    input.Button--YDF

      white-space break-spaces
      word-break break-all


    a.Button--YDF__DisabledState

      pointer-events none


    .Button--YDF-Label

      word-break break-all


    .Button--YDF-SVG_Icon

      flex-shrink 0


    if options.loadingPlaceholder

      .Badge--YDF__LoadingPlaceholder

        display inline-block


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_DATA_FOR_LOGGING = buildString(
      "Button.${themeName}Theme.${variationName}Geometry",
      {
        themeName: themeName,
        variationName: variationName
      }
    )

    extractedValidProperties = extractAndValidateObjectProperties({
      targetObject: variation,
      targetObjectName: VARIATION_DATA_FOR_LOGGING,
      extracts: {
        textSize: {
          dotSeparatedPath: "label.text.size",
          required: true
        },
        lineHeight: {
          dotSeparatedPath: "label.text.lineHeight",
          required: false
        },
        lineSpacing: {
          dotSeparatedPath: "label.text.lineSpacing",
          mustBeInsteadOf: "label.text.lineHeight"
        },
        topSpacing: {
          dotSeparatedPath: "label.spacing.top",
          required: false
        },
        labelUpwardShifting: {
          dotSeparatedPath: "label.spacing.upwardShifting",
          required: false
        },
        bordersSizing: {
          dotSeparatedPath: "rootElement.borders",
          required: false
        }
      }
    })

    textSize = extractedValidProperties.textSize

    lineHeight = isNotNull(extractedValidProperties.lineHeight) ? extractedValidProperties.lineHeight :\
        getLineHeightByFontSizeAndLineSpacing({
          fontSize: textSize,
          lineSpacing: extractedValidProperties.lineSpacing
        })

    lineSpacing = isNotNull(extractedValidProperties.lineSpacing) ? extractedValidProperties.lineSpacing :\
        getLineSpacingByFontSizeAndLineHeight({
          fontSize: textSize,
          lineHeight: extractedValidProperties.lineHeight
        })

    topSpacing = buildCalcExpression(
      "${topSpacing} - ${lineSpacing}/2 - ${upwardShifting}",
      {
        topSpacing: nullToZero(extractedValidProperties.topSpacing),
        lineSpacing: lineSpacing,
        upwardShifting: nullToZero(extractedValidProperties.labelUpwardShifting)
      }
    )

    bottomSpacing = buildCalcExpression(
      "${topSpacing} - ${lineSpacing}/2 + ${upwardShifting}",
      {
        topSpacing: nullToZero(extractedValidProperties.topSpacing),
        lineSpacing: lineSpacing,
        upwardShifting: nullToZero(extractedValidProperties.labelUpwardShifting)
      }
    )


    +provideDefaultSelectorWhenRootAndApply(".Button--YDF")

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          min-width: {
            dotSeparatedPath: "rootElement.minimalWidth",
            required: false
          }
        }
      })

      BordersSizing(extractedValidProperties.bordersSizing)


    /a{selector()} .Button--YDF-Label,
    /button{selector()} .Button--YDF-Label

      font-size textSize
      line-height lineHeight

      margin-top topSpacing
      margin-bottom bottomSpacing


      if isNotNull(variation.label.spacing.left)

        &:first-child

          margin-left: variation.label.spacing.left


      if isNotNull(variation.label.spacing.right)

        &:last-child

          margin-right: variation.label.spacing.right


    /input{selector()}

      font-size textSize
      line-height lineHeight
      padding-top topSpacing
      padding-bottom bottomSpacing

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          padding-left: {
            dotSeparatedPath: "label.spacing.left",
            required: false
          },
          padding-right: {
            dotSeparatedPath: "label.spacing.right",
            required: false
          }
        }
      })


    .Button--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          width: {
            dotSeparatedPath: "SVG_Icon.standard.width",
            required: false
          },
          height: {
            dotSeparatedPath: "SVG_Icon.standard.height",
            requiredIf: {
              predicate: @(variation) { return isNull(getObjectValueByDotSeparatedPathSafely(variation, "variation.SVG_Icon.standard.width")) },
              conditionDescription: "'width' is null"
            }
          },
          margin-top: {
            dotSeparatedPath: "SVG_Icon.standard.spacing.top",
            required: false
          },
          margin-bottom: {
            dotSeparatedPath: "SVG_Icon.standard.spacing.bottom",
            required: false
          }
        }
      })


      if isNotNull(variation.SVG_Icon.standard.spacing.leftWhenGoingFirst)

        &:first-child

          margin-left: variation.SVG_Icon.standard.spacing.leftWhenGoingFirst


      if isNotNull(variation.SVG_Icon.standard.spacing.rightWhenGoingLast)

        &:last-child

          margin-right: variation.SVG_Icon.standard.spacing.rightWhenGoingLast


      ../

        PositionalRelationship({
          definitions: (
            ".Button--YDF-Label" {
              retireFromIt: { x: variation.SVG_Icon.standard.spacing.afterLabel },
              pushItFromSelf: { x: variation.SVG_Icon.standard.spacing.beforeLabel }
            }
          ),
          contextSelector: selector()
          referenceElementSelector: ".Button--YDF-SVG_Icon"
        })


      specialIcons = substituteNull(variation.SVG_Icon.specials, {})

      for iconSpecificCSS_Class, dimensions in specialIcons

        &.{iconSpecificCSS_Class}

          validateAndAssignStoredInObjectCSS_Properties({
            targetObject: dimensions,
            targetObjectName: VARIATION_DATA_FOR_LOGGING + ".variation.SVG_Icon.specials." + iconSpecificCSS_Class ,
            assigments: {
              width: {
                dotSeparatedPath: "width",
                required: false
              },
              height: {
                dotSeparatedPath: "height",
                requiredIf: {
                  predicate: @(variation) { return isNull(getObjectValueByDotSeparatedPathSafely(dimensions, "width")) },
                  conditionDescription: "'width' is null"
                }
              }
            }
          })


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_DATA_FOR_LOGGING = buildString(
      "Button.${themeName}Theme.${variationName}Decoration",
      {
        themeName: themeName,
        variationName: variationName
      }
    )


    +provideDefaultSelectorWhenRootAndApply(".Button--YDF")

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          color: { dotSeparatedPath: "rootElement.text.color", required: false },
          underline: {
            dotSeparatedPath: "rootElement.text.underline",
            required: false,
            applier: applyObjectTypeUnderlineDefinition
          },
          background-color: { dotSeparatedPath: "rootElement.background.color", required: false },
          border-style: { dotSeparatedPath: "rootElement.borders.style", required: false },
          border-color: { dotSeparatedPath: "rootElement.borders.color", required: false },
          outline: {
            dotSeparatedPath: "rootElement.outline",
            required: false,
            applier: applyOutlineObjectTypeDefinition
          },
          box-shadow: {
            dotSeparatedPath: "rootElement.shadow",
            required: false,
            applier: applyObjectTypeBoxShadowDefinition
          }
        }
      })


    .Button--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          fill: { dotSeparatedPath: "SVG_Icon.color", required: false }
        }
      })


    stateDependentStyles = isNotNull(variation.stateDependent) ? variation.stateDependent : {}

    for state, element in stateDependentStyles

      applyRootElementStateDependentStyles()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_DATA_FOR_LOGGING,
          assigments: {
            color: { dotSeparatedPath: "stateDependent." + state + ".rootElement.text.color", required: false },
            underline: {
              dotSeparatedPath: "stateDependent." + state + ".rootElement.text.underline",
              required: false,
              applier: applyObjectTypeUnderlineDefinition
            },
            background-color: { dotSeparatedPath: "stateDependent." + state + ".rootElement.background.color", required: false },
            border-style: { dotSeparatedPath: "stateDependent." + state + ".rootElement.borders.style", required: false },
            border-color: { dotSeparatedPath: "stateDependent." + state + ".rootElement.borders.color", required: false },
            outline: {
              dotSeparatedPath: "rootElement." + state + ".outline",
              required: false,
              applier: applyOutlineObjectTypeDefinition
            },
            box-shadow: {
              dotSeparatedPath: "stateDependent." + state + ".rootElement.shadow",
              required: false,
              applier: applyObjectTypeBoxShadowDefinition
            }
          }
        })


        applySVG_IconStateDependentStyles()

          validateAndAssignStoredInObjectCSS_Properties({
            targetObject: variation,
            targetObjectName: VARIATION_DATA_FOR_LOGGING,
            assigments: {
              fill: { dotSeparatedPath: "stateDependent." + state + ".SVG_Icon.color", required: false }
            }
          })


      if state == "hover" || state == "focus" || state == "active"

        &:{state}

          applyRootElementStateDependentStyles()

          .Button--YDF-SVG_Icon

            applySVG_IconStateDependentStyles()


      else if state == "disabled"

        /button{selector()}:disabled,
        /input{selector()}:disabled,
        /a{selector()}.Button--YDF__DisabledState

          applyRootElementStateDependentStyles()


        /button{selector()}:disabled,
        /a{selector()}.Button--YDF__DisabledState

          .Button--YDF-SVG_Icon

            applySVG_IconStateDependentStyles()


  // === Applying ======================================================================================================
  applyBasicRules()

  if !options.themeIndependentStylesOnly

    applyComponentThemes({
      CSS_Namespace: "Button--YDF",
      themes: properties.themes,
      areThemesTheExternal: properties.externalThemes,
      applyGeometricVariation: applyGeometricVariation,
      applyDecorativeVariation: applyDecorativeVariation
    })
