@require "Themes/Regular/GeometricVariations/Button-RegularGeometry.styl"
@require "Themes/Regular/GeometricVariations/Button-SmallGeometry.styl"


getLineHeightByFontSizeAndLineSpacing(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "getLineHeightByFontSizeAndLineSpacing",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      fontSize: {
        type: DataTypes.dimensionalAmount,
        required: true
      },
      lineSpacing: {
        type: DataTypes.dimensionalAmount,
        required: true
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  return buildCalcExpression(
    "${fontSize} + 2*${lineSpacing}",
    { fontSize: compoundParameter.fontSize, lineSpacing: compoundParameter.lineSpacing }
  )


getLineSpacingByFontSizeAndLineHeight(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "getLineSpacingByFontSizeAndLineHeight",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      fontSize: {
        type: DataTypes.dimensionalAmount,
        required: true
      },
      lineHeight: {
        type: DataTypes.dimensionalAmount DataTypes.dimensionlessAmount,
        required: true
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  fontSize = compoundParameter.fontSize
  lineHeight = compoundParameter.lineHeight
  lineHeight__dimensionalAmount = isDimensionlessAmount(lineHeight) ? lineHeight * fontSize : lineHeight

  return buildCalcExpression(
    "${lineHeight__dimensionalAmount} - ${fontSize}",
    { lineHeight__dimensionalAmount: round(lineHeight__dimensionalAmount), fontSize: fontSize }
  )


Button = {

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {
          regular: Button-RegularGeometry--YDF,
          small: Button-SmallGeometry--YDF
        },

        decorativeVariations: {

          regular: {
            rootElement: {
              borders: {
                style: solid,
                color: JQueryUI_BaseTheme.clickableElements.defaultState.borderColor
              },
              background: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.background
              },
              font: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.fontColor
              }
            }
          },

          accented: {
            rootElement: {
              borders: {
                style: solid,
                color: JQueryUI_BaseTheme.clickableElements.defaultState.borderColor
              },
              background: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.background
              },
              font: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.fontColor
              }
            }
          }
        }
      }
    }
  }
}


provideButtonComponent(preset= Button.defaultProperties, overridings = {})

  properties = deeplyCloneAndOverrideObject(preset, overridings)
  CSS_NAMESPACE = "Button"
  ROOT_ELEMENT_SELECTOR = "." + CSS_NAMESPACE


  // === Methods =======================================================================================================
  applyBasicRules()

    .Button

      ButtonLikeElementsPrimer()

      cursor pointer


    button.Button,
    a.Button

      display inline-flex
      justify-content center
      align-items center


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(variation)

    lineHeight = isNotNull(variation.label.text.lineHeight) ? variation.label.text.lineHeight :\
        getLineHeightByFontSizeAndLineSpacing({
          fontSize: variation.label.text.size,
          lineSpacing: variation.label.text.lineSpacing
        })

    lineSpacing = isNotNull(variation.label.text.lineSpacing) ? variation.label.text.lineSpacing :\
        getLineSpacingByFontSizeAndLineHeight({
          fontSize: variation.label.text.size,
          lineHeight: variation.label.text.lineHeight
        })

    topSpacing = buildCalcExpression(
      "${topSpacing} - ${lineSpacing}/2 - ${upwardShifting}",
      {
        topSpacing: variation.label.spacing.top,
        lineSpacing: lineSpacing,
        upwardShifting: nullToZero(variation.label.spacing.upwardShifting)
      }
    )

    bottomSpacing = buildCalcExpression(
      "${topSpacing} - ${lineSpacing}/2 + ${upwardShifting}",
      {
        topSpacing: variation.label.spacing.top,
        lineSpacing: lineSpacing,
        upwardShifting: nullToZero(variation.label.spacing.upwardShifting)
      }
    )


    min-width: variation.rootElement.minimalWidth
    BordersSizing(variation.rootElement.borders)


    .Button-PrependedSVG_Icon

      width: variation.prependedSVG_Icon.width
      height: variation.prependedSVG_Icon.height

      margin-left: variation.prependedSVG_Icon.spacing.left
      margin-top: variation.prependedSVG_Icon.spacing.top
      margin-bottom: variation.prependedSVG_Icon.spacing.bottom


    /a{selector()} .Button-Label,
    /button{selector()} .Button-Label

      font-size: variation.label.text.size
      line-height: lineHeight
      word-break break-all

      margin-top: topSpacing
      margin-bottom: bottomSpacing


      &:first-child

        margin-left: variation.label.spacing.left


      &:last-child

        margin-right: variation.label.spacing.right


    /a{selector()}

      log(selector())

      retireFrom({
        targetElementSelector: ".Button-PrependedSVG_Icon",
        x: variation.label.spacing.afterPrependedIcon,
        referenceElementSelector: ".Button-Label",
        contextSelector: selector()
      })


    /button{selector()}

      retireFrom({
        targetElementSelector: ".Button-PrependedSVG_Icon",
        x: variation.label.spacing.afterPrependedIcon,
        referenceElementSelector: ".Button-Label",
        contextSelector: selector()
      })


    /input{selector()}

      font-size: variation.label.text.size
      line-height: lineHeight
      white-space: break-spaces
      word-break: break-all

      padding-left: variation.label.spacing.left
      padding-right: variation.label.spacing.right
      padding-top: topSpacing
      padding-bottom: bottomSpacing


    .Button-LoneSVG_Icon

      width: variation.loneSVG_Icon.width
      height: variation.loneSVG_Icon.height


    .Button-AppendedSVG_Icon

      width: variation.prependedSVG_Icon.width
      height: variation.prependedSVG_Icon.height

      margin-left: variation.prependedSVG_Icon.spacing.left
      margin-top: variation.prependedSVG_Icon.spacing.top
      margin-bottom: variation.prependedSVG_Icon.spacing.bottom


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(variation)

    applyIfNotNull({
      border-style: variation.rootElement.borders.style,
      border-color: variation.rootElement.borders.color,
      background-color: variation.rootElement.background.color,
      color: variation.rootElement.font.color
    })


  // --- Applying ------------------------------------------------------------------------------------------------------
  applyBasicRules()

  applyComponentThemes({
    CSS_Namespace: CSS_NAMESPACE,
    themes: properties.themes,
    applyGeometricVariation: applyGeometricVariation,
    applyDecorativeVariation: applyDecorativeVariation
  })
