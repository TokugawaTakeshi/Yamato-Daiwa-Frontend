Button = {

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {

          regular: {

            rootElement: {
              minimalWidth: 80px,
              minimalHeight: 31px,
              borders: specifyBordersSizing({
                thickness: { all: 1px },
                radius: { all: 3px }
              }),
              paddings: specifyPaddings({
                horizontalSymmetric: 15px,
                verticalSymmetric: 6px
              })
            },

            label: {
              text: {
                size: 15px,
                lineSpacing: 4px
              }
            },

            prependedSVG_Icon: {
              width: 16px,
              height: 16px,
              horizontalSpaceBeforeLabel: 4px
            },

            loneSVG_Icon: {
              width: 16px,
              height: 16px
            }
          },

          small: {

            rootElement: {
              minimalWidth: 60px
              borders: specifyBordersSizing({
                thickness: { all: 1px },
                radius: { all: 3px }
              }),
              paddings: specifyPaddings({
                horizontalSymmetric: 6px,
                verticalSymmetric: 3px
              })
            },

            label: {
              text: {
                size: 13px,
                lineSpacing: 4px
              }
            },

            prependedSVG_Icon: {
              width: 16px,
              height: 16px,
              horizontalSpaceBeforeLabel: 4px
            },

            loneSVG_Icon: {
              width: 16px,
              height: 16px
            }
          }
        },

        decorativeVariations: {

          regular: {
            rootElement: {
              borders: {
                style: solid,
                color: JQueryUI_BaseTheme.clickableElements.defaultState.borderColor
              },
              background: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.background
              },
              font: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.fontColor
              }
            }
          },

          accented: {
            rootElement: {
              borders: {
                style: solid,
                color: JQueryUI_BaseTheme.clickableElements.defaultState.borderColor
              },
              background: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.background
              },
              font: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.fontColor
              }
            }
          }
        }
      }
    }
  }
}


provideButtonComponent(preset= Button.defaultProperties, overridings = {})

  properties = deeplyCloneAndOverrideObject(preset, overridings)
  CSS_NAMESPACE = "Button"
  ROOT_ELEMENT_SELECTOR = "." + CSS_NAMESPACE


  // === Methods =======================================================================================================
  applyBasicRules()

    .Button

      ButtonLikeElementsPrimer()

      display inline-flex
      justify-content center
      align-items center

      cursor pointer


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(variation)

    +provideDefaultSelectorWhenRootAndApply(ROOT_ELEMENT_SELECTOR)

      min-width: variation.rootElement.minimalWidth
      min-height: variation.rootElement.minimalHeight

      BordersSizing(variation.rootElement.borders)


    /a{getCurrentSelectorSubstitutingRoot(ROOT_ELEMENT_SELECTOR)} .Button-Label,
    /button{getCurrentSelectorSubstitutingRoot(ROOT_ELEMENT_SELECTOR)} .Button-Label

      font-size: variation.label.text.size

      // TODO if isNotNull(lineSpacing)
      // TODO getLineSpacingByFontSizeAndLineHeight
      // TODO else line-height: lineHeight

      padding-left 15px // TODO when it going first
      padding-right 15px // TODO when it going last

      // 垂直調節にはtransform translateが必要


    /input{getCurrentSelectorSubstitutingRoot(ROOT_ELEMENT_SELECTOR)}

      // TODO 同上
      font-size: variation.label.text.size
      line-height 19px

      // Paddingは垂直調節のに必要
      Paddings(variation.rootElement.paddings)


    .Button-Label

      //VERTICAL_SYMMETRIC_MARGIN = 0.5*(31px - 19px)
      //
      //margin-top VERTICAL_SYMMETRIC_MARGIN
      //margin-bottom VERTICAL_SYMMETRIC_MARGIN


    .Button-PrependedSVG_Icon

      width: variation.prependedSVG_Icon.width
      height: variation.prependedSVG_Icon.height

      margin-right: variation.prependedSVG_Icon.horizontalSpaceBeforeLabel


    .Button-LoneSVG_Icon

      width: variation.loneSVG_Icon.width
      height: variation.loneSVG_Icon.height


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(variation)

    +provideDefaultSelectorWhenRootAndApply(ROOT_ELEMENT_SELECTOR)

      applyIfNotNull({
        border-style: variation.rootElement.borders.style,
        border-color: variation.rootElement.borders.color,
        background-color: variation.rootElement.background.color,
        color: variation.rootElement.font.color
      })


  // --- Applying ------------------------------------------------------------------------------------------------------
  applyBasicRules()

  applyComponentThemes({
    CSS_Namespace: CSS_NAMESPACE,
    themes: properties.themes,
    applyGeometricVariation: applyGeometricVariation,
    applyDecorativeVariation: applyDecorativeVariation
  })
