getLineHeightByFontSizeAndLineSpacing(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "getLineHeightByFontSizeAndLineSpacing",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      fontSize: {
        type: DataTypes.dimensionalAmount,
        required: true
      },
      lineSpacing: {
        type: DataTypes.dimensionalAmount,
        required: true
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  return buildCalcExpression(
    "${fontSize} + 2*${lineSpacing}",
    { fontSize: compoundParameter.fontSize, lineSpacing: compoundParameter.lineSpacing }
  )


getLineSpacingByFontSizeAndLineHeight(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "getLineSpacingByFontSizeAndLineHeight",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      fontSize: {
        type: DataTypes.dimensionalAmount,
        required: true
      },
      lineHeight: {
        type: DataTypes.dimensionalAmount DataTypes.dimensionlessAmount,
        required: true
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  fontSize = compoundParameter.fontSize
  lineHeight = compoundParameter.lineHeight
  lineHeight__dimensionalAmount = isDimensionlessAmount(lineHeight) ? lineHeight * fontSize : lineHeight

  return buildCalcExpression(
    "${lineHeight__dimensionalAmount} - ${fontSize}",
    { lineHeight__dimensionalAmount: round(lineHeight__dimensionalAmount), fontSize: fontSize }
  )


Button = {

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {

          regular: {

            rootElement: {
              minimalWidth: 80px,
              minimalHeight: 31px,
              borders: specifyBordersSizing({
                thickness: { all: 1px },
                radius: { all: 3px }
              }),
              paddings: specifyPaddings({
                horizontalSymmetric: 15px,
                verticalSymmetric: 6px
              })
            },

            label: {
              text: {
                size: 15px,
                lineSpacing: 4px,
                lineHeight: null
              },
              spacing: {
                top: 6px,
                bottom: 6px,
                left: 15px,
                right: 15px,
                upwardShifting: null
              }
            },

            prependedSVG_Icon: {
              width: 16px,
              height: 16px,
              horizontalSpaceBeforeLabel: 4px
            },

            loneSVG_Icon: {
              width: 16px,
              height: 16px
            }
          },

          small: {

            rootElement: {
              minimalWidth: 60px
              borders: specifyBordersSizing({
                thickness: { all: 1px },
                radius: { all: 3px }
              }),
              paddings: specifyPaddings({
                horizontalSymmetric: 6px,
                verticalSymmetric: 3px
              })
            },

            label: {
              text: {
                size: 13px,
                lineSpacing: 4px,
                lineHeight: null
              },
              spacing: {
                top: 6px,
                bottom: 6px,
                left: 15px,
                right: 15px,
                upwardShifting: null
              }
            },

            prependedSVG_Icon: {
              width: 16px,
              height: 16px,
              horizontalSpaceBeforeLabel: 4px
            },

            loneSVG_Icon: {
              width: 16px,
              height: 16px
            }
          }
        },

        decorativeVariations: {

          regular: {
            rootElement: {
              borders: {
                style: solid,
                color: JQueryUI_BaseTheme.clickableElements.defaultState.borderColor
              },
              background: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.background
              },
              font: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.fontColor
              }
            }
          },

          accented: {
            rootElement: {
              borders: {
                style: solid,
                color: JQueryUI_BaseTheme.clickableElements.defaultState.borderColor
              },
              background: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.background
              },
              font: {
                color: JQueryUI_BaseTheme.clickableElements.defaultState.fontColor
              }
            }
          }
        }
      }
    }
  }
}


provideButtonComponent(preset= Button.defaultProperties, overridings = {})

  properties = deeplyCloneAndOverrideObject(preset, overridings)
  CSS_NAMESPACE = "Button"
  ROOT_ELEMENT_SELECTOR = "." + CSS_NAMESPACE


  // === Methods =======================================================================================================
  applyBasicRules()

    .Button

      ButtonLikeElementsPrimer()

      display inline-flex
      justify-content center
      align-items center

      cursor pointer


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(variation)

    lineHeight = isNotNull(variation.label.text.lineHeight) ? variation.label.text.lineHeight :\
        getLineHeightByFontSizeAndLineSpacing({
          fontSize: variation.label.text.size,
          lineSpacing: variation.label.text.lineSpacing
        })

    lineSpacing = isNotNull(variation.label.text.lineSpacing) ? variation.label.text.lineSpacing :\
        getLineSpacingByFontSizeAndLineHeight({
          fontSize: variation.label.text.size,
          lineHeight: variation.label.text.lineHeight
        })


    +provideDefaultSelectorWhenRootAndApply(ROOT_ELEMENT_SELECTOR)

      min-width: variation.rootElement.minimalWidth

      BordersSizing(variation.rootElement.borders)


    /a{getCurrentSelectorSubstitutingRoot(ROOT_ELEMENT_SELECTOR)} .Button-Label,
    /button{getCurrentSelectorSubstitutingRoot(ROOT_ELEMENT_SELECTOR)} .Button-Label

      font-size: variation.label.text.size
      line-height: lineHeight


      &:first-child:last-child

        margin-left: variation.label.spacing.left
        margin-right: variation.label.spacing.right
        margin-top: buildCalcExpression(
          "${topSpacing} - ${lineSpacing}/2 - ${upwardShifting}",
          {
            topSpacing: variation.label.spacing.top,
            lineSpacing: lineSpacing,
            upwardShifting: nullToZero(variation.label.spacing.upwardShifting)
          }
        )

        margin-bottom: variation.label.spacing.bottom


    /input{getCurrentSelectorSubstitutingRoot(ROOT_ELEMENT_SELECTOR)}

      font-size: variation.label.text.size
      line-height 19px

      Paddings(variation.rootElement.paddings)


    .Button-PrependedSVG_Icon

      width: variation.prependedSVG_Icon.width
      height: variation.prependedSVG_Icon.height

      margin-right: variation.prependedSVG_Icon.horizontalSpaceBeforeLabel


    .Button-LoneSVG_Icon

      width: variation.loneSVG_Icon.width
      height: variation.loneSVG_Icon.height


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(variation)

    +provideDefaultSelectorWhenRootAndApply(ROOT_ELEMENT_SELECTOR)

      applyIfNotNull({
        border-style: variation.rootElement.borders.style,
        border-color: variation.rootElement.borders.color,
        background-color: variation.rootElement.background.color,
        color: variation.rootElement.font.color
      })


  // --- Applying ------------------------------------------------------------------------------------------------------
  applyBasicRules()

  applyComponentThemes({
    CSS_Namespace: CSS_NAMESPACE,
    themes: properties.themes,
    applyGeometricVariation: applyGeometricVariation,
    applyDecorativeVariation: applyDecorativeVariation
  })
