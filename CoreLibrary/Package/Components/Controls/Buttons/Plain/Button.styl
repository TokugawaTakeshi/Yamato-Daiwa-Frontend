@require "Themes/Regular/GeometricVariations/Button-RegularGeometry.styl"
@require "Themes/Regular/GeometricVariations/Button-SmallGeometry.styl"
@require "Themes/Regular/GeometricVariations/Button-LinkLikeGeometry.styl"
@require "Themes/Regular/DecorativeVariations/Button-RegularDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Button-AccentedDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Button-LinkLikeDecoration.styl"


Button = {

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {
          regular: Button-RegularGeometry--YDF,
          small: Button-SmallGeometry--YDF,
          linkLike: Button-LinkLikeGeometry--YDF
        },

        decorativeVariations: {
          regular: Button-RegularDecoration--YDF,
          accented: Button-AccentedDecoration--YDF,
          linkLike: Button-LinkLikeDecoration--YDF
        }
      }
    }
  }
}


provideButtonComponent(preset= Button.defaultProperties, overridings = {})

  properties = deeplyCloneAndOverrideObject(preset, overridings)
  CSS_NAMESPACE = "Button--YDF"
  ROOT_ELEMENT_SELECTOR = "." + CSS_NAMESPACE


  // === Methods =======================================================================================================
  applyBasicRules()

    .Button--YDF

      ButtonLikeElementsPrimer()

      cursor pointer


    button.Button--YDF,
    a.Button--YDF

      display inline-flex
      justify-content center
      align-items center


    /button{selector()}:disabled,
    /input{selector()}:disabled

      cursor not-allowed


    a.Button--YDF__DisabledState

      pointer-events none


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(variation)

    lineHeight = isNotNull(variation.label.text.lineHeight) ? variation.label.text.lineHeight :\
        getLineHeightByFontSizeAndLineSpacing({
          fontSize: variation.label.text.size,
          lineSpacing: variation.label.text.lineSpacing
        })

    lineSpacing = isNotNull(variation.label.text.lineSpacing) ? variation.label.text.lineSpacing :\
        getLineSpacingByFontSizeAndLineHeight({
          fontSize: variation.label.text.size,
          lineHeight: variation.label.text.lineHeight
        })

    topSpacing = buildCalcExpression(
      "${topSpacing} - ${lineSpacing}/2 - ${upwardShifting}",
      {
        topSpacing: nullToZero(variation.label.spacing.top),
        lineSpacing: lineSpacing,
        upwardShifting: nullToZero(variation.label.spacing.upwardShifting)
      }
    )

    bottomSpacing = buildCalcExpression(
      "${topSpacing} - ${lineSpacing}/2 + ${upwardShifting}",
      {
        topSpacing: nullToZero(variation.label.spacing.top),
        lineSpacing: lineSpacing,
        upwardShifting: nullToZero(variation.label.spacing.upwardShifting)
      }
    )


    applyIfNotNull({ min-width: variation.rootElement.minimalWidth })
    BordersSizing(variation.rootElement.borders)


    /a{selector()} .Button--YDF-Label,
    /button{selector()} .Button--YDF-Label

      font-size: variation.label.text.size
      line-height: lineHeight
      word-break break-all

      margin-top: topSpacing
      margin-bottom: bottomSpacing


      if isNotNull(variation.label.spacing.left)

        &:first-child

          margin-left: variation.label.spacing.left


      if isNotNull(variation.label.spacing.right)

        &:last-child

          margin-right: variation.label.spacing.right


    /input{selector()}

      font-size: variation.label.text.size
      line-height: lineHeight
      white-space: break-spaces
      word-break: break-all

      padding-left: variation.label.spacing.left
      padding-right: variation.label.spacing.right
      padding-top: topSpacing
      padding-bottom: bottomSpacing


    .Button--YDF-SVG_Icon

      applyIfNotNull({
        width: variation.SVG_Icon.standard.width,
        height: variation.SVG_Icon.standard.height
      })

      flex-shrink 0

      applyIfNotNull({
        margin-top: variation.SVG_Icon.standard.spacing.top,
        margin-bottom: variation.SVG_Icon.standard.spacing.bottom
      })


      if isNotNull(variation.SVG_Icon.standard.spacing.leftWhenGoingFirst)

        &:first-child

          margin-left: variation.SVG_Icon.standard.spacing.leftWhenGoingFirst


      if isNotNull(variation.SVG_Icon.standard.spacing.rightWhinGoingLast)

        &:last-child

          margin-right: variation.SVG_Icon.standard.spacing.rightWhinGoingLast


      ../

        PositionalRelationship({
          definitions: (
            ".Button--YDF-Label" {
              retireFromIt: { x: variation.SVG_Icon.standard.spacing.afterLabel },
              pushItFromSelf: { x: variation.SVG_Icon.standard.spacing.beforeLabel }
            }
          ),
          contextSelector: selector()
          referenceElementSelector: ".Button--YDF-SVG_Icon"
        })


      specialIcons = substituteNull(variation.SVG_Icon.specials, {})

      for iconSpecificCSS_Class, dimensions in specialIcons

        &.{iconSpecificCSS_Class}

          applyIfNotNull({
            width: dimensions.width,
            height: dimensions.height
          })


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(variation)

    applyIfNotNull({
      border-style: variation.rootElement.borders.style,
      border-color: variation.rootElement.borders.color,
      background-color: variation.rootElement.background.color,
      color: variation.rootElement.text.color
    })


    .Button--YDF-SVG_Icon

      applyIfNotNull({ fill: variation.SVG_Icon.color })


    &:hover

      applyIfNotNull({
        border-style: variation.stateDependent.hover.rootElement.borders.style,
        border-color: variation.stateDependent.hover.rootElement.borders.color,
        background-color: variation.stateDependent.hover.rootElement.background.color,
        color: variation.stateDependent.hover.rootElement.text.color
      })


      .Button--YDF-SVG_Icon

        applyIfNotNull({ fill: variation.stateDependent.hover.SVG_Icon.color })


    &:focus

      box-shadow: JQueryUI_BaseTheme.clickableElements.focusState.shadow


    &:active

      applyIfNotNull({
        border-style: variation.stateDependent.active.rootElement.borders.style,
        border-color: variation.stateDependent.active.rootElement.borders.color,
        background-color: variation.stateDependent.active.rootElement.background.color,
        color: variation.stateDependent.active.rootElement.text.color
      })


      .Button--YDF-SVG_Icon

        applyIfNotNull({ fill: variation.stateDependent.active.SVG_Icon.color })


    /button{selector()}:disabled,
    /input{selector()}:disabled,
    /a{selector()}.Button--YDF__DisabledState

      applyIfNotNull({
        border-style: variation.stateDependent.disabled.rootElement.borders.style,
        border-color: variation.stateDependent.disabled.rootElement.borders.color,
        background-color: variation.stateDependent.disabled.rootElement.background.color,
        color: variation.stateDependent.disabled.rootElement.text.color
      })


    /button{selector()}:disabled,
    /a{selector()}.Button--YDF__DisabledState

      .Button--YDF-SVG_Icon

        applyIfNotNull({ fill: variation.stateDependent.disabled.SVG_Icon.color })


  // --- Applying ------------------------------------------------------------------------------------------------------
  applyBasicRules()

  applyComponentThemes({
    CSS_Namespace: CSS_NAMESPACE,
    themes: properties.themes,
    applyGeometricVariation: applyGeometricVariation,
    applyDecorativeVariation: applyDecorativeVariation
  })
