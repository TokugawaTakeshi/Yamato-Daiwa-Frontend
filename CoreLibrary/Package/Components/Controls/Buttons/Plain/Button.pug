include Button.class.pug


mixin Button--YDF(properties)

  -

    const {

      HTML_Type = Button__YDF.HTML_Types.regular,

      label,
      accessibilityGuidance,
      URI,

      disabled = false,

      theme = Button__YDF.Themes.regular,
      areThemesCSS_ClassesCommon = ARE_YDF_COMPONENTS_THEMES_COMMON_BY_DEFAULT || Button__YDF.areThemesCSS_ClassesCommon,
      geometry = Button__YDF.GeometricVariations.regular,
      geometricModifiers = [],
      decoration = Button__YDF.DecorativeVariations.regular,
      decorativeModifiers = []

    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: Button__YDF.propertiesSpecification,
      mixinName: Button__YDF.CSS_NAMESPACE
    });

    let isButtonTheTagNameOfRootElement = false;
    let isInputTheTagNameOfRootElement = false;
    let isAnchorTheTagNameOfRootElement = false;

    let typeAttributeValueOfButtonOrInputElement;


    if (URI) {

      isAnchorTheTagNameOfRootElement = true;

    } else {

      switch (HTML_Type) {

        case Button__YDF.HTML_Types.regular: {

          isButtonTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "button"

          break;
        }

        case Button__YDF.HTML_Types.submit: {

          isButtonTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "submit"

          break;
        }

        case Button__YDF.HTML_Types.inputButton: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "button";

          break;

        }

        case Button__YDF.HTML_Types.inputSubmit: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "submit";

          break;

        }

        case Button__YDF.HTML_Types.inputReset: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "reset";

        }

      }
    }

    const commonCSS_Classes = [

      Button__YDF.CSS_NAMESPACE,

      ...isAnchorTheTagNameOfRootElement && disabled ? [ `${ Button__YDF.CSS_NAMESPACE }__DisabledState` ] : [],

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: Button__YDF.Themes,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometry,
        allGeometricVariations: Button__YDF.GeometricVariations,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.generateDemandedGeometricModifiersCSS_Classes(Button__YDF.CSS_NAMESPACE, geometricModifiers),

      ...ComponentsAuxiliaries.addDecorativeVariationCSS_ClassToArrayIfMust({
        decoration,
        allDecorativeVariations: Button__YDF.DecorativeVariations,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.generateDemandedDecorativeModifiersCSS_Classes(Button__YDF.CSS_NAMESPACE, decorativeModifiers)

    ];


  if isButtonTheTagNameOfRootElement

    button&attributes(attributes)(
      type= typeAttributeValueOfButtonOrInputElement
      disabled= disabled
      aria-label= accessibilityGuidance
      class= commonCSS_Classes
    )

      if block

        block

      else if label

        span.Button--YDF-Label= label

  else if isAnchorTheTagNameOfRootElement

    a&attributes(attributes)(
      href= disabled ? undefined : URI
      aria-disabled= disabled ? "true" : undefined
      aria-label= accessibilityGuidance
      tabindex = disabled && -1
      class= [ ...commonCSS_Classes, disabled ? [ `${ Button__YDF.CSS_NAMESPACE }__DisabledState` ] : [] ]
    )

      if block

        block

      else if label

        span.Button--YDF-Label= label

  else if isInputTheTagNameOfRootElement

    input&attributes(attributes)(
      type= typeAttributeValueOfButtonOrInputElement
      value= label
      disabled= disabled
      class= commonCSS_Classes
    )


mixin Button--YDF-LoadingPlaceholder(properties)

  -

    const {
      theme = Button__YDF.Themes.regular,
      areThemesCSS_ClassesCommon = ARE_YDF_COMPONENTS_THEMES_COMMON_BY_DEFAULT || Button__YDF.areThemesCSS_ClassesCommon,
      geometry = Button__YDF.GeometricVariations.regular,
      geometricModifiers = []
    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: {
        theme: Button__YDF.propertiesSpecification.theme,
        areThemesCSS_ClassesCommon: Button__YDF.propertiesSpecification.areThemesCSS_ClassesCommon,
        geometry: Button__YDF.propertiesSpecification.geometry,
        geometricModifiers: Button__YDF.propertiesSpecification.geometricModifiers
      },
      mixinName: `${ Button__YDF.CSS_NAMESPACE }-LoadingPlaceholder`
    });

    const rootElementModifierCSS_Classes = [

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: Button__YDF.Themes,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometry,
        allGeometricVariations: Button__YDF.GeometricVariations,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.generateDemandedGeometricModifiersCSS_Classes(Button__YDF.CSS_NAMESPACE, geometricModifiers)

    ];
