include Button.class.pug


mixin Button--YDF(properties)

  -

    const {

      HTML_Type = Button__YDF.HTML_Types.regular,

      label,
      accessibilityGuidance,
      URI,

      disabled = false,

      theme = Button__YDF.Themes.regular,
      areThemesExternal = Button__YDF.areThemesExternal,
      geometry = Button__YDF.GeometricVariations.regular,
      geometricModifiers = [],
      decoration = Button__YDF.DecorativeVariations.regular

    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: Button__YDF.propertiesSpecification,
      mixinName: Button__YDF.CSS_NAMESPACE
    });

    let isButtonTheTagNameOfRootElement = false;
    let isInputTheTagNameOfRootElement = false;
    let isAnchorTheTagNameOfRootElement = false;

    let typeAttributeValueOfButtonOrInputElement;


    if (URI) {

      isAnchorTheTagNameOfRootElement = true;

    } else {

      switch (HTML_Type) {

        case Button__YDF.HTML_Types.regular: {

          isButtonTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "button"

          break;
        }

        case Button__YDF.HTML_Types.submit: {

          isButtonTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "submit"

          break;
        }

        case Button__YDF.HTML_Types.inputButton: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "button";

          break;

        }

        case Button__YDF.HTML_Types.inputSubmit: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "submit";

          break;

        }

        case Button__YDF.HTML_Types.inputReset: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "reset";

        }

      }
    }

    const commonCSS_Classes = [
      Button__YDF.CSS_NAMESPACE,
      ...isAnchorTheTagNameOfRootElement && disabled ? [ `${ Button__YDF.CSS_NAMESPACE }__DisabledState` ] : [],
      ...Object.entries(Button__YDF.Themes).length > 1 && !areThemesExternal ?
          [ ComponentsAuxiliaries.generateThemeCSS_Class(Button__YDF.CSS_NAMESPACE, theme) ] : [],
      ...Object.entries(Button__YDF.GeometricVariations).length > 1 ?
          [ ComponentsAuxiliaries.generateGeometricVariationCSS_Class(Button__YDF.CSS_NAMESPACE, geometry) ] : [],
      ...geometricModifiers.includes(Button__YDF.GeometricModifiers.squareShape) ?
          [ `${ Button__YDF.CSS_NAMESPACE }__SquareShapeGeometricModifier` ] : [],
      ...geometricModifiers.includes(Button__YDF.GeometricModifiers.pillShape) ?
          [ `${Button__YDF.CSS_NAMESPACE}__PillShapeGeometricModifier` ] : [],
      ...Object.entries(Button__YDF.DecorativeVariations).length > 1 ?
          [ ComponentsAuxiliaries.generateDecorativeVariationCSS_Class(Button__YDF.CSS_NAMESPACE, decoration)]  : []
    ];


  if isButtonTheTagNameOfRootElement

    button&attributes(attributes)(
      type= typeAttributeValueOfButtonOrInputElement
      disabled= disabled
      aria-label= accessibilityGuidance
      class= commonCSS_Classes
    )

      if block

        block

      else if label

        span.Button--YDF-Label= label

  else if isAnchorTheTagNameOfRootElement

    a&attributes(attributes)(
      href= disabled ? undefined : URI
      aria-disabled= disabled ? "true" : undefined
      aria-label= accessibilityGuidance
      tabindex = disabled && -1
      class= [ ...commonCSS_Classes, disabled ? [ `${ Button__YDF.CSS_NAMESPACE }__DisabledState` ] : [] ]
    )

      if block

        block

      else if label

        span.Button--YDF-Label= label

  else if isInputTheTagNameOfRootElement

    input&attributes(attributes)(
      type= typeAttributeValueOfButtonOrInputElement
      value= label
      disabled= disabled
      class= commonCSS_Classes
    )


mixin Button--YDF-LoadingPlaceholder(properties)

  -

    const {
      theme = Button__YDF.Themes.regular,
      areThemesExternal = Button__YDF.areThemesExternal,
      geometry = Button__YDF.GeometricVariations.regular,
      geometricModifiers = []
    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: {
        theme: Button__YDF.propertiesSpecification.theme,
        areThemesExternal: Button__YDF.propertiesSpecification.areThemesExternal,
        geometry: Button__YDF.propertiesSpecification.geometry,
        geometricModifiers: Button__YDF.propertiesSpecification.geometricModifiers
      },
      mixinName: `${ Button__YDF.CSS_NAMESPACE }-LoadingPlaceholder`
    });

    const rootElementModifierCSS_Classes = [
      ...Object.entries(Button__YDF.Themes).length > 1 && !areThemesExternal ?
          [ ComponentsAuxiliaries.generateThemeCSS_Class(Button__YDF.CSS_NAMESPACE, theme) ] : [],
      ...Object.entries(Button__YDF.GeometricVariations).length > 1 ?
          [ ComponentsAuxiliaries.generateGeometricVariationCSS_Class(Button__YDF.CSS_NAMESPACE, geometry) ] : [],
      ...geometricModifiers.includes(Button__YDF.GeometricModifiers.squareShape) ?
          [ `${Button__YDF.CSS_NAMESPACE}__SquareShapeGeometricModifier` ] : [],
      ...geometricModifiers.includes(Button__YDF.GeometricModifiers.pillShape) ?
          [ `${Button__YDF.CSS_NAMESPACE}__PillShapeGeometricModifier` ] : []
    ];
