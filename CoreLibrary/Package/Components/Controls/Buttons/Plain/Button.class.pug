-
  const Button = {

    /** @readonly */
    HTML_Types: {
      regular: "BUTTON",
      submit: "SUBMIT",
      inputButton: "INPUT_BUTTON",
      inputSubmit: "INPUT_SUBMIT",
      inputReset: "INPUT_RESET"
    },


    /* === Themes =================================================================================================== */
    /** @readonly */
    Themes: {
      regular: "BASIC"
    },

    /** @readonly */
    ThemesCSS_ModifiersNames: {
      BASIC: "BasicTheme"
    },

    /** @public */
    defineNewThemes(themesNames) {

      for (const themeName of themesNames) {

        const themeName__lowerCamelCase = themeName;
        const themeName__capitalized = themeName.charAt(0).toUpperCase() + themeName.slice(1);

        this.Themes[themeName__lowerCamelCase] = themeName.toUpperCase();
        this.ThemesCSS_ModifiersNames[themeName__lowerCamelCase] = `Button__${themeName__capitalized}Theme`;
      }

      return this;
    },


    /* --- Geometric variations ------------------------------------------------------------------------------------- */
    /** @readonly */
    GeometricVariations: {
      regular: "REGULAR",
      small: "SMALL",
      linkLike: "LINK_LIKE"
    },

    /** @private */
    GeometricVariationsCSS_ModifiersNames: {
      REGULAR: "Button__RegularGeometry",
      SMALL: "Button__SmallGeometry",
      LINK_LIKE: "Button__LinkLikeGeometry"
    },

    /** @public */
    defineNewThemes(geometricVariationsNames) {

      for (const geometricVariationsName of geometricVariationsNames) {

        const geometricVariationsName__lowerCamelCase = geometricVariationsName;
        const geometricVariationsName__capitalized = geometricVariationsName.charAt(0).toUpperCase() + geometricVariationsName.slice(1);

        this.GeometricVariations[geometricVariationsName__lowerCamelCase] = geometricVariationsName.toUpperCase();
        this.GeometricVariationsCSS_ModifiersNames[geometricVariationsName__lowerCamelCase] =
            `Button__${geometricVariationsName__capitalized}Geometry`;
      }

      return this;
    },


    /* --- Decorative variations ------------------------------------------------------------------------------------ */
    /** @readonly */
    DecorativeVariations: {
      regular: "REGULAR",
      accented: "ACCENTED",
      linkLike: "LINK_LIKE"
    },

    /** @private */
    DecorativeVariationsCSS_Modifiers: {
      REGULAR: "Button__RegularDecoration",
      ACCENTED: "Button__AccentedDecoration",
      LINK_LIKE: "Button__LinkLikeDecoration"
    },

    /** @public */
    defineNewDecorativeVariation(decorativeVariationsNames) {

      for (const decorativeVariationsName of decorativeVariationsNames) {

        const decorativeVariationsName__lowerCamelCase = decorativeVariationsName;
        const decorativeVariationsName__capitalized = decorativeVariationsName.charAt(0).toUpperCase() + decorativeVariationsName.slice(1);

        this.DecorativeVariations[decorativeVariationsName__lowerCamelCase] = decorativeVariationsName.toUpperCase();
        this.DecorativeVariationsCSS_Modifiers[decorativeVariationsName__lowerCamelCase] =
                `Button__${decorativeVariationsName__capitalized}Decoration`;
      }

      return this;
    },

    get properties() {
      return {

        HTML_Type: {
          type: String,
          defaultValue: this.HTML_Types.regular,
          allowedAlternatives: Object.values(this.HTML_Types)
        },

        label: {
          type: String,
          required: false
          // requiredIf: {
          //   predicate: properties => properties.HTML_Type === this.HTML_Types.inputButton ||
          //     properties.HTML_Type === this.HTML_Types.inputSubmit ||
          //     properties.HTML_Type === this.HTML_Types.inputReset,
          //   descriptionForLogging: "'HTML_Type' is 'inputButton', 'inputSubmit' or 'inputReset'"
          // }
        },

        URI: {
          type: String,
          required: false
        },

        toggled: {
          type: Boolean,
          defaultValue: false
        },

        disabled: {
          type: Boolean,
          defaultValue: false
        },

        theme: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.Themes),
          defaultValue: this.Themes.basic,
        },

        geometry: {
          type: String,
          defaultValue: this.GeometricVariations.regular,
          allowedAlternatives: Object.values(this.GeometricVariations)
        },

        decoration: {
          defaultValue: this.DecorativeVariations.regular,
          type: String,
          allowedAlternatives: Object.values(this.DecorativeVariations)
        },

        hasPrependedSVG_Icon: {
          type: Boolean,
          defaultValue: false
        },

        hasAppendedSVG_Icon: {
          type: Boolean,
          defaultValue: false
        },

        hasLoneSVG_Icon: {
          type: Boolean,
          defaultValue: false
        }
      }
    }
  };
