-

  const Button__YDF = {

    CSS_NAMESPACE: "Button--YDF",

    HTML_Types: {
      regular: "BUTTON",
      submit: "SUBMIT",
      inputButton: "INPUT_BUTTON",
      inputSubmit: "INPUT_SUBMIT",
      inputReset: "INPUT_RESET"
    },


    /* === Themes =================================================================================================== */
    Themes: { regular: "REGULAR" },

    defineNewThemes(themesNames) {
      return ComponentsAuxiliaries.defineNewThemes(themesNames, this);
    },

    areThemesExternal: ARE_YDF_COMPONENTS_THEMES_EXTERNAL_BY_DEFAULT,
    considerThemesAsExternal() {
      this.areThemesExternal = true;
      return this;
    },


    /* --- Geometry ------------------------------------------------------------------------------------------------- */
    GeometricVariations: {
      regular: "REGULAR",
      small: "SMALL",
      linkLike: "LINK_LIKE"
    },

    defineNewGeometricVariations(geometricVariationsNames) {
      return ComponentsAuxiliaries.defineNewGeometricVariations(geometricVariationsNames, this);
    },

    GeometricModifiers: {
      squareShape: "SQUARE_SHAPE",
      pillShape: "PILL_SHAPE"
    },


    /* --- Decoration ----------------------------------------------------------------------------------------------- */
    DecorativeVariations: {
      regular: "REGULAR",
      accented: "ACCENTED",
      linkLike: "LINK_LIKE"
    },

    defineNewDecorativeVariations(decorativeVariationsNames) {
      return ComponentsAuxiliaries.defineNewDecorativeVariations(decorativeVariationsNames, this);
    },


    /* === Properties specification ================================================================================= */
    get propertiesSpecification() {
      return {

        HTML_Type: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.HTML_Types)
        },

        label: {
          type: String,
          requiredIf: {
            predicate: properties => properties.HTML_Type === this.HTML_Types.inputButton ||
              properties.HTML_Type === this.HTML_Types.inputSubmit ||
              properties.HTML_Type === this.HTML_Types.inputReset,
            descriptionForLogging: "'HTML_Type' is 'inputButton', 'inputSubmit' or 'inputReset'"
          },
          minimalCharactersCount: 1
        },

        accessibilityGuidance: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        URI: {
          type: String,
          required: false,
          /* [ Theory ] It could be the "#" */
          minimalCharactersCount: 1
        },

        disabled: {
          type: Boolean,
          required: false
        },

        theme: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.Themes)
        },

        areThemesExternal: {
          type: Boolean,
          required: false
        },

        geometry: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.GeometricVariations)
        },

        geometricModifiers: {
          type: Array,
          required: false,
          allowedAlternatives: Object.values(this.GeometricModifiers)
        },

        decoration: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.DecorativeVariations)
        }

      };
    }

  };
