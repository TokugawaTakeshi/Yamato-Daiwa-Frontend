include TextBox.class.pug


mixin TextBox--YDF(properties, statesSimulations)

  -

    const COMPONENT_ID = TextBox__YDF.generateComponentID();

    const {

      HTML_Type = TextBox__YDF.HTML_Types.text,

      label,
      accessibilityGuidance,
      externalLabelHTML_ID,
      guidance,
      placeholder,

      value = "",

      multiline = false,
      disabled = false,
      readonly = false,

      required = false,
      mustDisplayAppropriateBadgeIfInputIsRequired = false,
      mustDisplayAppropriateBadgeIfInputIsOptional = false,
      minimalCharactersCount,
      maximalCharactersCount,
      minimalNumericValue,
      maximalNumericValue,

      inputOrTextAreaElementHTML_ID = `${ COMPONENT_ID }-INPUT_OR_TEXTAREA`,
      labelElementHTML_ID = `${ COMPONENT_ID }-LABEL`,

      theme = TextBox__YDF.Themes.regular,
      areThemesExternal = TextBox__YDF.areThemesExternal,
      geometry = TextBox__YDF.GeometricVariations.regular,
      decoration = TextBox__YDF.GeometricVariations.regular,

    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: TextBox__YDF.propertiesSpecification,
      mixinName: "TextBox--YDF"
    });

    // TODO 何れかのlabel、accessibilityGuidance、externalLabelHTML_IDは必須
    // TODO こちらをバリデーションに抽出した方が
    if (
      Number.isInteger(minimalCharactersCount) &&
      Number.isInteger(maximalCharactersCount) &&
      minimalCharactersCount > maximalCharactersCount
    ) {
      throw new Error(
        `"TextBox--YDF", the specified "minimalCharactersCount" (${ minimalCharactersCount }) is greater than ` +
        `"maximalCharactersCount" (${ maximalCharactersCount })`
      );
    }


    if (
      Number.isInteger(minimalNumericValue) &&
      Number.isInteger(maximalNumericValue) &&
      minimalNumericValue > maximalNumericValue
    ) {
      throw new Error(
        `"TextBox--YDF", the specified "minimalNumericValue" (${ minimalNumericValue }) is greater than ` +
        `"maximalNumericValue" (${ maximalNumericValue })`
      );
    }


    const {
      invalidInputHighlightingIfAnyErrorsMessages = false,
      validValueHighlightingIfNoErrorsMessages = false,
      errorsMessages = []
    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: statesSimulations,
      parameterNumber: 2,
      parameterName: "statesSimulations",
      parameterPropertiesSpecification: TextBox__YDF.stateSimulationsSpecification,
      mixinName: "TextBox--YDF"
    });

    const rootElementModifierCSS_Classes = [
      ...Object.entries(TextBox__YDF.Themes).length > 1 && !areThemesExternal ?
          [ ComponentsAuxiliaries.generateThemeCSS_Class(TextBox__YDF.CSS_NAMESPACE, theme) ] : [],
      ...Object.entries(TextBox__YDF.GeometricVariations).length > 1 ?
          [ ComponentsAuxiliaries.generateGeometricVariationCSS_Class(TextBox__YDF.CSS_NAMESPACE, geometry) ] : [],
      ...Object.entries(TextBox__YDF.DecorativeVariations).length > 1 ?
          [ ComponentsAuxiliaries.generateDecorativeVariationCSS_Class(TextBox__YDF.CSS_NAMESPACE, decoration) ] : [],
      ...invalidInputHighlightingIfAnyErrorsMessages && errorsMessages.length > 0 ?
          [ `${ TextBox__YDF.CSS_NAMESPACE }__InvalidValueState` ] : [],
      ...validValueHighlightingIfNoErrorsMessages && errorsMessages.length === 0 ?
          [ `${ TextBox__YDF.CSS_NAMESPACE }__ValueState` ] : []
    ];


  +CompoundControlShell--YDF(
    {

      label,
      guidance,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      coreElementHTML_ID: inputOrTextAreaElementHTML_ID,
      labelElementHTML_ID: labelElementHTML_ID,

      theme: TextBox__YDF.selfAndCompoundControlShellThemesCorrespondence[theme],
      areThemesExternal,
      geometry: TextBox__YDF.selfAndCompoundControlShellGeometricVariationsCorrespondence[geometry],
      decoration: TextBox__YDF.selfAndCompoundControlShellGeometricVariationsCorrespondence[decoration]

    },
    {
      invalidInputHighlightingIfAnyErrorsMessages,
      validValueHighlightingIfNoErrorsMessages,
      errorsMessages,
    }
  ).TextBox--YDF&attributes(attributes)(class= rootElementModifierCSS_Classes)

    if multiline

      textarea.TextBox--YDF-InputOrTextAreaElement(
        placeholder= placeholder
        readonly= readonly
        disabled= disabled
        required= required
        minlength= minimalCharactersCount
        maxlength= maximalCharactersCount
        min= minimalNumericValue
        max= maximalNumericValue
        id= inputOrTextAreaElementHTML_ID
        aria-label= accessibilityGuidance
        aria-labelledby= externalLabelHTML_ID
      )= value

    else

      input.TextBox--YDF-InputOrTextAreaElement(
        type= HTML_Type
        value= value
        placeholder= placeholder
        readonly= readonly
        disabled= disabled
        required= required
        minlength= minimalCharactersCount
        maxlength= maximalCharactersCount
        min= minimalNumericValue
        max= maximalNumericValue
        id= inputOrTextAreaElementHTML_ID
        aria-label= accessibilityGuidance
        aria-labelledby= externalLabelHTML_ID
      )
