-

  const TextBox__YDF = {

    CSS_NAMESPACE: "TextBox--YDF",

    HTML_Types: {
      regular: "text",
      email: "email",
      number: "number",
      password: "password",
      phoneNumber: "tel",
      URI: "url",
      hidden: "hidden"
    },


    /* === Themes =================================================================================================== */
    Themes: { regular: "REGULAR" },
    ThemesCSS_ModifiersNames: { REGULAR: "TextBox--YDF__RegularTheme" },
    selfAndCompoundControlShellThemesCorrespondence: { REGULAR: CompoundControlShell__YDF.Themes.regular },

    defineNewThemes(ownAndCorrespondingCompoundControlShellThemes_Names) {
      return ComponentsAuxiliaries.defineThemesAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellThemes_Names, this
      );
    },

    areThemesExternal: false,
    considerThemesAsExternal() {
      this.areThemesExternal = true;
      return this;
    },


    /* --- Geometric variations ------------------------------------------------------------------------------------- */
    GeometricVariations: {
      regular: "REGULAR",
      small: "SMALL"
    },

    GeometricVariationsCSS_ModifiersNames: {
      REGULAR: "TextBox--YDF__RegularGeometry",
      SMALL: "TextBox--YDF__SmallGeometry"
    },

    selfAndCompoundControlShellGeometricVariationsCorrespondence: {
      REGULAR: CompoundControlShell__YDF.GeometricVariations.regular,
      SMALL: CompoundControlShell__YDF.GeometricVariations.small
    },

    defineNewGeometricVariations(ownAndCorrespondingCompoundControlShellGeometricVariations_Names) {
      return ComponentsAuxiliaries.defineGeometricVariationAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellGeometricVariations_Names, this
      );
    },


    /* --- Decorative variations ------------------------------------------------------------------------------------ */
    DecorativeVariations: { regular: "REGULAR" },
    DecorativeVariationsCSS_Modifiers: { REGULAR: "TextBox--YDF__RegularDecoration" },

    selfAndCompoundControlShellDecorativeVariationsCorrespondence: {
      REGULAR: CompoundControlShell__YDF.DecorativeVariations.regular
    },

    defineNewDecorativeVariation(ownAndCorrespondingCompoundControlShellDecorativeVariations_Names) {
      return ComponentsAuxiliaries.defineDecorativeVariationAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellDecorativeVariations_Names, this
      );
    },


    /* === Properties specification ================================================================================= */
    get propertiesSpecification() {
      return {

        HTML_Type: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.HTML_Types)
        },

        label: {
          type: String,
          required: false,
          minimalCharactersCount: 0
        },

        accessibilityGuidance: {
          type: String,
          required: false,
          minimalCharactersCount: 0
        },

        externalLabelHTML_ID: {
          type: String,
          required: false,
          minimalCharactersCount: 0
        },

        guidance: {
          type: String,
          required: false,
          minimalCharactersCount: 0
        },

        placeholder: {
          type: String,
          required: false,
          minimalCharactersCount: 0
        },

        value: {
          preValidationModifications: rawValue => isNeitherUndefinedNorNull(rawValue) ? String(rawValue) : rawValue,
          type: String,
          required: false
        },

        minimalCharactersCount: {
          type: Number,
          numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: false
        },

        maximalCharactersCount: {
          type: Number,
          numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: false
        },

        minimalNumericValue: {
          type: Number,
          numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: false
        },

        maximalNumericValue: {
          type: Number,
          numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: false
        },

        multiline: {
          type: Boolean,
          required: false
        },

        disabled: {
          type: Boolean,
          required: false
        },

        readonly: {
          type: Boolean,
          required: false
        },

        inputOrTextAreaElementHTML_ID: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        labelElementHTML_ID: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        theme: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.Themes)
        },

        externalThemes: {
          type: Boolean,
          required: false
        },

        geometry: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.GeometricVariations)
        },

        decoration: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.DecorativeVariations)
        }
      }
    },


    /* === State simulations specification ========================================================================== */
    stateSimulationsSpecification: {

      invalidInputHighlightIfAnyErrorsMessages: {
        type: Boolean,
        required: false
      },

      errorsMessages: {
        type: Array,
        required: false,
        element: {
          type: String,
          minimalCharactersCount: 1
        }
      }
    },


    /* === ID ======================================================================================================= */
    counterForID_Generating: 0,
    generateComponentID() {
      this.counterForID_Generating++;
      return `TEXT_BOX--YDF-${ this.counterForID_Generating }`;
    }
  };
