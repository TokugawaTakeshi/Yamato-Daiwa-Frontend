include FilesUploaderLocalization.english.pug


-

  const FilesUploader__YDF = {

    CSS_NAMESPACE: "FilesUploader--YDF",


    /* === Themes =================================================================================================== */
    Themes: { regular: "REGULAR" },
    selfAndCompoundControlShellThemesCorrespondence: { REGULAR: CompoundControlShell__YDF.Themes.regular },

    defineNewThemes(ownAndCorrespondingCompoundControlShellThemes_Names) {
      return ComponentsAuxiliaries.defineThemesAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellThemes_Names, this
      );
    },

    areThemesExternal: ARE_YDF_COMPONENTS_THEMES_COMMON_BY_DEFAULT,
    considerThemesAsExternal() {
      this.areThemesExternal = true;
      return this;
    },


    /* --- Geometry ------------------------------------------------------------------------------------------------- */
    GeometricVariations: {
      regular: "REGULAR"
    },

    selfAndCompoundControlShellGeometricVariationsCorrespondence: {
      REGULAR: CompoundControlShell__YDF.GeometricVariations.regular
    },

    defineNewGeometricVariations(ownAndCorrespondingCompoundControlShellGeometricVariations_Names) {
      return ComponentsAuxiliaries.defineGeometricVariationAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellGeometricVariations_Names, this
      );
    },


    /* --- Decoration ----------------------------------------------------------------------------------------------- */
    DecorativeVariations: { regular: "REGULAR" },

    selfAndCompoundControlShellDecorativeVariationsCorrespondence: {
      REGULAR: CompoundControlShell__YDF.DecorativeVariations.regular
    },

    defineNewDecorativeVariation(ownAndCorrespondingCompoundControlShellDecorativeVariations_Names) {
      return ComponentsAuxiliaries.defineDecorativeVariationAndAssociateThemWithParentCompoundControlShellOnes(
        ownAndCorrespondingCompoundControlShellDecorativeVariations_Names, this
      );
    },


    /* === Properties specification ================================================================================= */
    get propertiesSpecification() {
      return {

        label: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        accessibilityGuidance: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        externalLabelHTML_ID: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        guidance: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        disabled: {
          type: Boolean,
          required: false
        },

        readonly: {
          type: Boolean,
          required: false
        },

        required: {
          type: Boolean,
          required: false
        },

        mustDisplayAppropriateBadgeIfInputIsRequired: {
          type: Boolean,
          required: false
        },

        mustDisplayAppropriateBadgeIfInputIsOptional: {
          type: Boolean,
          required: false
        },

        mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge: {
          type: Boolean,
          required: false
        },

        minimalFilesCount: {
          type: Number,
          numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: false
        },

        maximalFilesCount: {
          type: Number,
          numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: false,
          customValidators: {
            validationFunction: ({ currentPropertyValue: maximalFilesCount, rawData__currentObjectDepth }) =>
                isUndefined(rawData__currentObjectDepth.minimalFilesCount) ||
                (
                  Number.isInteger(rawData__currentObjectDepth.minimalFilesCount) &&
                  maximalFilesCount >= rawData__currentObjectDepth.minimalFilesCount
                ),
            descriptionForLogging: "\"maximalFilesCount\" could not be less than \"minimalFilesCount\"."
          }
        },

        supportedFilesNamesExtensions: {
          type: Array,
          required: false,
          element: {
            type: String,
            minimalCharactersCount: 1
          }
        },

        inputElementHTML_ID: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        labelElementHTML_ID: {
          type: String,
          required: false,
          minimalCharactersCount: 1
        },

        noButton: {
          type: Boolean,
          required: false
        },

        // TODO Could not be true if `noButton` is true
        noDragAndDropArea: {
          type: Boolean,
          required: false
        },

        theme: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.Themes)
        },

        areThemesExternal: {
          type: Boolean,
          required: false
        },

        geometry: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.GeometricVariations)
        },

        decoration: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.DecorativeVariations)
        }

      };
    },


    /* === Status simulations specification ========================================================================== */
    statesSimulationsSpecification: {

      status: {
        type: Boolean,
        required: false
      },

      singleImagePreview: {
        type: RawObjectDataProcessor.ValuesTypesIDs.oneOf,
        required: false,
        alternatives: [
          {
            type: Boolean,
            trueOnly: true
          },
          {
            type: String,
            minimalCharactersCount: 1
          }
        ]
      },

      // TODO Could not be true if `singleImagePreview` is true
      imagesPreviewFlow: {
        type: Boolean,
        required: false
      },

      dragOver: {
        type: Boolean,
        required: false
      },

      busy: {
        type: Boolean,
        required: false
      },

      invalidInputHighlightingIfAnyValidationErrorsMessages: {
        type: Boolean,
        required: false
      },

      validValueHighlightingIfNoValidationErrorsMessages: {
        type: Boolean,
        required: false
      },

      validationErrorsMessages: {
        type: Array,
        required: false,
        element: {
          type: String,
          minimalCharactersCount: 1
        }
      }

    },


    /* === ID generating ============================================================================================ */
    counterForID_Generating: 0,
    generateComponentID() {
      this.counterForID_Generating++;
      return `FILES_UPLOADER--YDF-${ this.counterForID_Generating }`;
    },

    /* === Localization ============================================================================================= */
    localization: filesUploaderYDF_ComponentLocalization__english

  };
