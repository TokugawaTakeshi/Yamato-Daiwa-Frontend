include CompoundControlShell.class.pug


mixin CompoundControlShell--YDF(properties, statesSimulations)

  -

    const {

      label,
      guidance,

      required = false,
      mustDisplayAppropriateBadgeIfInputIsRequired = false,
      mustDisplayAppropriateBadgeIfInputIsOptional = false,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge = false,

      coreElementHTML_ID,
      labelElementHTML_ID,

      mainSlotWrapperAdditionalCSS_Classes = [],

      theme = CompoundControlShell__YDF.Themes.regular,
      areThemesExternal = ARE_YDF_COMPONENTS_THEMES_COMMON_BY_DEFAULT || CompoundControlShell__YDF.areThemesCSS_ClassesCommon,
      geometry = CompoundControlShell__YDF.GeometricVariations.regular,
      decoration = CompoundControlShell__YDF.DecorativeVariations.regular

    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: CompoundControlShell__YDF.propertiesSpecification,
      mixinName: CompoundControlShell__YDF.CSS_NAMESPACE
    });

    const {
      validationErrorsMessages = false,
      asynchronousValidationsStatuses = false
    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: statesSimulations,
      parameterNumber: 2,
      parameterName: "statesSimulations",
      parameterPropertiesSpecification: CompoundControlShell__YDF.statesSimulationsSpecification,
      mixinName: CompoundControlShell__YDF.CSS_NAMESPACE
    });


    let formattedGuidance;

    if (isNotUndefined(guidance)) {

      const guidanceSegments = guidance.split("**");

      if (guidanceSegments.length > 0) {

        for (let segmentIndex = 0; segmentIndex <= guidanceSegments.length - 1; segmentIndex++) {

          const currentSegment = guidanceSegments[segmentIndex];

          if (segmentIndex % 2 !== 0) {
            guidanceSegments[segmentIndex] =
                `<span class="CompoundControlShell--YDF-Guidance-AccentedFragment">${ currentSegment }</span>`
          }

        }

      }

      formattedGuidance = guidanceSegments.join("")

    }

    const { localization } = CompoundControlShell__YDF;

    const rootElementModifierCSS_Classes = [

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: CompoundControlShell__YDF.Themes,
        CSS_Namespace: CompoundControlShell__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometry,
        allGeometricVariations: CompoundControlShell__YDF.GeometricVariations,
        CSS_Namespace: CompoundControlShell__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.addDecorativeVariationCSS_ClassToArrayIfMust({
        decoration,
        allDecorativeVariations: CompoundControlShell__YDF.DecorativeVariations,
        CSS_Namespace: CompoundControlShell__YDF.CSS_NAMESPACE
      })

    ];


    const mustDisplayRequiredInputBadge = required && mustDisplayAppropriateBadgeIfInputIsRequired;
    const mustDisplayOptionalInputBadge = !required && mustDisplayAppropriateBadgeIfInputIsOptional;

    const mustDisplayHeader = label ||
        mustDisplayRequiredInputBadge ||
        mustDisplayOptionalInputBadge ||
        mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge;


  .CompoundControlShell--YDF&attributes(attributes)(class= rootElementModifierCSS_Classes)

    //- ━━━ Header ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    if mustDisplayHeader

      .CompoundControlShell--YDF-Header

        if label

          label.CompoundControlShell--YDF-Label(
            for=coreElementHTML_ID
            id=labelElementHTML_ID
          )= label

        if mustDisplayRequiredInputBadge

          span.CompoundControlShell--YDF-Badge.CompoundControlShell--YDF-Badge__Required
            | #{ localization.requirementBadges.required }

        else if mustDisplayOptionalInputBadge

          span.CompoundControlShell--YDF-Badge.CompoundControlShell--YDF-Badge__Optional
            | #{ localization.requirementBadges.optional }

        else if mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge

          span.CompoundControlShell--YDF-Badge.CompoundControlShell--YDF-Badge__Invisible
            | #{ required ? localization.requirementBadges.required : localization.requirementBadges.optional }


    //- ━━━ Guidance ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    if formattedGuidance

      p.CompoundControlShell--YDF-Guidance!=formattedGuidance


    //- ━━━ Main slot ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    .CompoundControlShell--YDF-MainSlotCustomizableWrapper(
      class= mainSlotWrapperAdditionalCSS_Classes
    )

      block


    //- ━━━ (Non-asynchronous) validations ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    if validationErrorsMessages === true
      ul.CompoundControlShell--YDF-ValidationErrorsMessagesList
        each sampleValidationErrorMessage in CompoundControlShell__YDF.localization.sampleValidationErrorsMessages
          li.CompoundControlShell--YDF-ValidationErrorMessage= sampleValidationErrorMessage

    else if Array.isArray(validationErrorsMessages) && validationErrorsMessages.length > 0
      ul.CompoundControlShell--YDF-ValidationErrorsMessagesList
        each validationErrorMessage in validationErrorsMessages
          li.CompoundControlShell--YDF-ValidationErrorMessage= validationErrorMessage

    <!--COMPOUND_CONTROL_SHELL__YDF-VALIDATION_ERRORS_MESSAGES_LIST_MOUNTING_POINT-->


    //- ━━━ Asynchronous validations ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    if asynchronousValidationsStatuses === true || isNonEmptyArray(asynchronousValidationsStatuses)

      ul.CompoundControlShell--YDF-AsynchronousValidationsStatusesList

        -
          const _asynchronousValidationsStatuses = asynchronousValidationsStatuses === true ?
              CompoundControlShell__YDF.localization.sampleAsynchronousValidationsStatuses : asynchronousValidationsStatuses;

        each asynchronousValidationsStatus in _asynchronousValidationsStatuses

          case asynchronousValidationsStatus.ID

            when "IN_PROGRESS"

              li.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item(
                class="CompoundControlShell--YDF-AsynchronousValidationsStatuses-Item__InProgressState"
              )
                +LoadingIndicator--YDF({
                  type: LoadingIndicator__YDF.Types.variableWidthArcSpinner,
                  geometry: LoadingIndicator__YDF.GeometricVariations.small
                }).CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-LoadingIndicator
                p.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Text= asynchronousValidationsStatus.message

            when "FINISHED_BUT_INVALID"

              li.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item(
                class="CompoundControlShell--YDF-AsynchronousValidationsStatuses-Item__SucceededButInvalidState"
              )
                +ExclamationMark__Circled__Filled--YDF_Icon.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Icon
                p.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Text= asynchronousValidationsStatus.message

            when "FINISHED_AND_VALID"

              li.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item(
                class="CompoundControlShell--YDF-AsynchronousValidationsStatuses-Item__SucceededAndValidState"
              )
                +Checkmark__Circled__Filled--YDF_Icon.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Icon
                p.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Text= asynchronousValidationsStatus.message

            when "MALFUNCTION"

              li.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item(
                class="CompoundControlShell--YDF-AsynchronousValidationsStatuses-Item__MalfunctionState"
              )
                +MultiplicationSign__Boxed__Filled--YDF_Icon.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Icon
                p.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Text= asynchronousValidationsStatus.message

    <!--COMPOUND_CONTROL_SHELL__YDF-ASYNCHRONOUS_VALIDATIONS_STATUSES_LIST_MOUNTING_POINT-->
