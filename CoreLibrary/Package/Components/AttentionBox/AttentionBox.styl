@require "Themes/Regular/GeometricVariations/AttentionBox-RegularTheme-RegularGeometry.styl"
@require "Themes/Regular/GeometricVariations/AttentionBox-RegularTheme-StickyNoteLikeGeometry.styl"

@require "Themes/Regular/DecorativeVariations/AttentionBox-RegularTheme-NoticeDecoration.styl"
@require "Themes/Regular/DecorativeVariations/AttentionBox-RegularTheme-ErrorDecoration.styl"
@require "Themes/Regular/DecorativeVariations/AttentionBox-RegularTheme-WarningDecoration.styl"
@require "Themes/Regular/DecorativeVariations/AttentionBox-RegularTheme-SuccessDecoration.styl"
@require "Themes/Regular/DecorativeVariations/AttentionBox-RegularTheme-GuidanceDecoration.styl"
@require "Themes/Regular/DecorativeVariations/AttentionBox-RegularTheme-QuestionDecoration.styl"


AttentionBox--YDF = {

  CSS_NAMESPACE: "AttentionBox--YDF",

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {
          regular: AttentionBox-RegularTheme-RegularGeometry--YDF,
          stickyNoteLike: AttentionBox-RegularTheme-StickyNoteLikeGeometry--YDF
        },

        decorativeVariations: {
          notice: AttentionBox-RegularTheme-NoticeDecoration--YDF,
          error: AttentionBox-RegularTheme-ErrorDecoration--YDF,
          warning: AttentionBox-RegularTheme-WarningDecoration--YDF,
          success: AttentionBox-RegularTheme-SuccessDecoration--YDF,
          guidance: AttentionBox-RegularTheme-GuidanceDecoration--YDF,
          question: AttentionBox-RegularTheme-QuestionDecoration--YDF
        }

      }
    }

  },

  defaultOptions: {
    themeIndependentStylesOnly: false,
    externalThemes: false,
    themeIndependentGeometricVariations: true,
    typographyAssimilation: false
  }

}


provideAttentionBoxYDF_Component(
  preset = AttentionBox--YDF.defaultProperties,
  overridings = {},
  options = AttentionBox--YDF.defaultOptions,
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overridings)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideAttentionBoxYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes.boolean,
        defaultValue: AttentionBox--YDF.defaultOptions.themeIndependentStylesOnly
      },
      externalThemes: {
        type: DataTypes.boolean,
        defaultValue: AttentionBox--YDF.defaultOptions.externalThemes
      },
      themeIndependentGeometricVariations: {
        type: DataTypes.boolean,
        defaultValue: AttentionBox--YDF.defaultOptions.themeIndependentGeometricVariations
      },
      typographyAssimilation: {
        type: DataTypes.boolean,
        defaultValue: AttentionBox--YDF.defaultOptions.typographyAssimilation
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // === Methods =======================================================================================================
  applyBasicRules()

    .AttentionBox--YDF

      display grid
      grid-template-areas\
          "PREPENDED_SVG_ICON TITLE DISMISSING_BUTTON"\
          "PREPENDED_SVG_ICON MAIN_CONTENT DISMISSING_BUTTON"
      grid-template-rows auto 1fr
      grid-template-columns auto minmax(0, 1fr) auto
      align-items center


      &-SVG_Icon

        grid-area PREPENDED_SVG_ICON


      &-Title

        grid-area TITLE


      &-MainContent

        grid-area MAIN_CONTENT


      &-DismissingButton

        ButtonLikeElementsPrimer()

        cursor pointer

        grid-area DISMISSING_BUTTON


        &-Icon

          display block


      &-CenteredButton

        centerHorizontallyWithoutWrapper({
          targetElementType: HorizontalCenteringWithoutWrapper.TargetElementTypes.inlineBlock
        })


      &-ActionBar

        display flex
        justify-content center
        align-items center


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "AttentionBox.${themeName}Theme.${variationName}Geometry",
      { themeName: themeName, variationName: variationName }
    )

    CONTEXT_SELECTOR = selector() == "&" ? null : selector()


    +provideDefaultSelectorWhenRootAndApply(".AttentionBox--YDF")

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          borders: {
            dotSeparatedPath: "rootElement.borders",
            required: false,
            applier: BordersSizing
          },
          paddings: {
            dotSeparatedPath: "rootElement.paddings",
            required: false,
            applier: Paddings
          }
        }
      })


    .AttentionBox--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          width: { dotSeparatedPath: "SVG_Icon.width", required: false },
          height: {
            dotSeparatedPath: "SVG_Icon.height",
            requiredIf: {
              predicate: @(variation) { return isNull(getObjectValueByDotSeparatedPathSafely(variation, "SVG_Icon.width")) },
              conditionDescription: "'SVG_Icon.width' icon is null"
            }
          }
        }
      })


    .AttentionBox--YDF-Title

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
        extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            fontSize: { dotSeparatedPath: "title.text.size", required: true },
            lineSpacing: { dotSeparatedPath: "title.text.lineSpacing", required: false },
            lineHeight: { dotSeparatedPath: "title.text.lineHeight", mustBeInsteadOf: "title.text.lineSpacing" }
          }
        })
      )

      retireFrom({
        targetElementSelector: ".AttentionBox--YDF-SVG_Icon",
        referenceElementSelector: ".AttentionBox--YDF-Title",
        contextSelector: CONTEXT_SELECTOR,
        x: extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            spacingAfterMainSection: { dotSeparatedPath: "title.spacing.afterSVG_Icon", required: true }
          }
        }).spacingAfterMainSection
      })


    .AttentionBox--YDF-MainContent

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
        extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            fontSize: { dotSeparatedPath: "mainContent.text.size", required: true },
            lineSpacing: { dotSeparatedPath: "mainContent.text.lineSpacing", required: false },
            lineHeight: { dotSeparatedPath: "mainContent.text.lineHeight", mustBeInsteadOf: "mainContent.text.lineSpacing" }
          }
        })
      )

      retireFrom({
        targetElementSelector: ":is(.AttentionBox--YDF-SVG_Icon, .AttentionBox--YDF-Title)",
        referenceElementSelector: ".AttentionBox--YDF-MainContent",
        contextSelector: CONTEXT_SELECTOR,
        x: extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            afterSVG_Icon: { dotSeparatedPath: "mainContent.spacing.afterSVG_Icon", required: true }
          }
        }).afterSVG_Icon
      })

      retireFrom({
        targetElementSelector: ".AttentionBox--YDF-Title",
        referenceElementSelector: ".AttentionBox--YDF-MainContent",
        contextSelector: CONTEXT_SELECTOR,
        y: extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            afterSVG_Icon: { dotSeparatedPath: "mainContent.spacing.afterTitle", required: true }
          }
        }).afterSVG_Icon
      })


    .AttentionBox--YDF-DismissingButton

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          margin-left: {
            dotSeparatedPath: "dismissingButton.spacing.afterMainContent",
            required: true
          }
        }
      })


    .AttentionBox--YDF-DismissingButton-Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          width: { dotSeparatedPath: "dismissingButton.SVG_Icon.width", required: false },
          height: {
            dotSeparatedPath: "dismissingButton.SVG_Icon.height",
            requiredIf: {
              predicate: @(variation) {
                return isNull(getObjectValueByDotSeparatedPathSafely(variation, "dismissingButton.SVG_Icon.width"))
              },
              conditionDescription: "'dismissingButton.SVG_Icon.width' icon is null"
            }
          }
        }
      })


    .AttentionBox--YDF-CenteredButton

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          margin-top: { dotSeparatedPath: "centeredButton.spacing.top", required: true }
        }
      })


    .AttentionBox--YDF-ActionBar

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          margin-top: { dotSeparatedPath: "actionBar.spacing.top", required: true },
          column-gap: { dotSeparatedPath: "actionBar.spacing.betweenChildrenElements", required: true }
        }
      })


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "AttentionBox.${themeName}Theme.${variationName}Decoration",
      {
        themeName: themeName,
        variationName: variationName
      }
    )


    +provideDefaultSelectorWhenRootAndApply(".AttentionBox--YDF")

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          border-style: { dotSeparatedPath: "rootElement.borders.style", required: false },
          border-color: { dotSeparatedPath: "rootElement.borders.color", required: false },
          background-color: { dotSeparatedPath: "rootElement.background.color", required: false },
          background-image: { dotSeparatedPath: "rootElement.background.image", required: false }
        }
      })


    .AttentionBox--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          fill: { dotSeparatedPath: "SVG_Icon.color", required: false },
        }
      })


    .AttentionBox--YDF-Title

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "title.text.fontWeight", required: false },
          color: { dotSeparatedPath: "title.text.color", required: false }
        }
      })


    .AttentionBox--YDF-MainContent

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "mainContent.font.weight", required: false },
          color: { dotSeparatedPath: "mainContent.font.color", required: false }
        }
      })


    .AttentionBox--YDF-DismissingButton-Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          fill: { dotSeparatedPath: "dismissingButton.background.color", required: false }
        }
      })


    if isNotNull(variation.typographyAssimilation)

      assimilatedTypography = {
        elements: {}
      }

      for elementKey, elementDecorationOverridings in variation.typographyAssimilation

        assimilatedTypography.elements[elementKey] = deeplyCloneAndOverrideObject(
          YDF_TypographyDefaultDefinitions.elements[elementKey], { decoration: elementDecorationOverridings }
        )


      +provideDefaultSelectorWhenRootAndApply(".AttentionBox--YDF")

        provideYDF_Typography(
          preset: assimilatedTypography,
          options: { decorationOnly: true }
        )


  // === Applying ======================================================================================================
  applyBasicRules()

  applyComponentThemes({
    CSS_Namespace: "AttentionBox--YDF",
    themes: properties.themes,
    applyGeometricVariation: applyGeometricVariation,
    applyDecorativeVariation: applyDecorativeVariation
  })
