-

  const AttentionBox__YDF = {

    /* === Themes =================================================================================================== */
    /** @readonly */
    Themes: {
      regular: "REGULAR"
    },

    ThemesCSS_ModifiersNames: {
      REGULAR: "RegularTheme"
    },

    /** @public */
    defineNewThemes(themesNames) {

      for (const themeName of themesNames) {

        const themeName__lowerCamelCase = themeName;
        const themeName__capitalized = themeName.charAt(0).toUpperCase() + themeName.slice(1);

        this.Themes[themeName__lowerCamelCase] = themeName.toUpperCase();
        this.ThemesCSS_ModifiersNames[themeName__lowerCamelCase] = `AttentionBox--YDF__${themeName__capitalized}Theme`;
      }

      return this;
    },


    /* --- Geometric variations ------------------------------------------------------------------------------------- */
    /** @readonly */
    GeometricVariations: {
      regular: "REGULAR"
    },

    /** @private */
    GeometricVariationsCSS_ModifiersNames: {
      REGULAR: "AttentionBox--YDF__RegularGeometry"
    },

    /** @public */
    defineNewThemes(geometricVariationsNames) {

      for (const geometricVariationsName of geometricVariationsNames) {

        const geometricVariationsName__lowerCamelCase = geometricVariationsName;
        const geometricVariationsName__capitalized = geometricVariationsName.charAt(0).toUpperCase() + geometricVariationsName.slice(1);

        this.GeometricVariations[geometricVariationsName__lowerCamelCase] = geometricVariationsName.toUpperCase();
        this.GeometricVariationsCSS_ModifiersNames[geometricVariationsName__lowerCamelCase] =
            `AttentionBox--YDF__${geometricVariationsName__capitalized}Geometry`;
      }

      return this;
    },


    /* --- Decorative variations ------------------------------------------------------------------------------------ */
    /** @readonly */
    DecorativeVariations: {
      importantInfo: "IMPORTANT_INFO",
      secondaryInfo: "SECONDARY_INFO",
      notice: "NOTICE",
      error: "ERROR",
      warning: "WARNING",
      success: "SUCCESS",
      guidance: "GUIDANCE",
      question: "QUESTION"
    },

    /** @private */
    DecorativeVariationsCSS_Modifiers: {
      IMPORTANT_INFO: "AttentionBox--YDF__ImportantInfoDecoration",
      SECONDARY_INFO: "AttentionBox--YDF__SecondaryInfoDecoration",
      NOTICE: "AttentionBox--YDF__NoticeDecoration",
      ERROR: "AttentionBox--YDF__ErrorDecoration",
      WARNING: "AttentionBox--YDF__WarningDecoration",
      SUCCESS: "AttentionBox--YDF__SuccessDecoration",
      GUIDANCE: "AttentionBox--YDF__GuidanceDecoration",
      QUESTION: "AttentionBox--YDF__QuestionDecoration"
    },

    /** @public */
    defineNewDecorativeVariation(decorativeVariationsNames) {

      for (const decorativeVariationsName of decorativeVariationsNames) {

        const decorativeVariationsName__lowerCamelCase = decorativeVariationsName;
        const decorativeVariationsName__capitalized = decorativeVariationsName.charAt(0).toUpperCase() + decorativeVariationsName.slice(1);

        this.DecorativeVariations[decorativeVariationsName__lowerCamelCase] = decorativeVariationsName.toUpperCase();
        this.DecorativeVariationsCSS_Modifiers[decorativeVariationsName__lowerCamelCase] =
                `AttentionBox--YDF__${decorativeVariationsName__capitalized}Decoration`;
      }

      return this;
    },


    /* === Properties specification ================================================================================= */
    get properties() {
      return {

        theme: {
          type: String,
          required: false,
          allowedAlternatives: Object.values(this.Themes),
          defaultValue: this.Themes.regular,
        },

        geometry: {
          type: String,
          defaultValue: this.GeometricVariations.regular,
          allowedAlternatives: Object.values(this.GeometricVariations)
        },

        decoration: {
          defaultValue: this.DecorativeVariations.regular,
          type: String,
          allowedAlternatives: Object.values(this.DecorativeVariations)
        },

        hasPrependedSVG_Icon: {
          type: Boolean,
          defaultValue: false
        },

        hasDismissButton: {
          type: Boolean,
          defaultValue: false
        }

      }
    },

    /* === Localization ============================================================================================= */
    localization: {
      dismissingButtonAccessibilityGuidance: "Hide this message"
    }
  };
