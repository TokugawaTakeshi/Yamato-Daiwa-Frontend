provideDefaultSelectorWhenRootAndApply(defaultSelector)

  if selector() == "&"

    {defaultSelector}

      {block}

  else

    {block}


getCurrentSelectorSubstitutingRoot(defaultSelector)

  return selector() == "&" ? defaultSelector : selector()


applyComponentThemes(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "applyComponentThemes",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {},
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  CSS_Namespace = compoundParameter.CSS_Namespace
  themes = compoundParameter.themes

  // [ Stylus theory ] Functions in object are allowed but must be decomposed to be invoked.
  applyGeometricVariation = compoundParameter.applyGeometricVariation
  applyDecorativeVariation = compoundParameter.applyDecorativeVariation


  applyTheme(theme) {

    // [ Theory ] Every value could be set to null by user.
    iterateObjectSkippingNullValues(theme.geometricVariations, @(geometricVariationName, geometricVariation) {

      if (getObjectNonNullValuesCount(theme.geometricVariations) == 1) {

        applyGeometricVariation(getFirstNonNullArrayElement(values(theme.geometricVariations)))

      } else {

        geometricVariationCSS_Class = buildBEM_ClassName({
          block: CSS_Namespace,
          modifier: capitalizeFirstLatinCharacter(geometricVariationName) + "Geometry"
          elementSeparator: "-",
          modifierSeparator: "__"
        })

        &.{geometricVariationCSS_Class} {
          applyGeometricVariation(geometricVariation)
        }
      }
    })

    iterateObjectSkippingNullValues(theme.decorativeVariations, @(decorativeVariationName, decorativeVariation) {

      if (getObjectNonNullValuesCount(theme.decorativeVariations) == 1) {

        applyDecorativeVariation(getFirstNonNullArrayElement(values(theme.decorativeVariations)))

      } else {

        decorativeVariationCSS_Class = buildBEM_ClassName({
          block: CSS_Namespace,
          modifier: capitalizeFirstLatinCharacter(decorativeVariationName) + "Decoration",
          elementSeparator: "-",
          modifierSeparator: "__"
        })

        &.{decorativeVariationCSS_Class} {
          applyDecorativeVariation(decorativeVariation)
        }
      }
    })
  }


  if (getObjectNonNullValuesCount(themes) == 1) {

    applyTheme(getFirstNonNullArrayElement(values(themes)))

  } else {

    iterateObjectSkippingNullValues(properties.themes, @(themeName, theme) {

      themeCSS_Class = buildBEM_Class({
        block: CSS_Namespace,
        modifier: themeName + "Theme"
      })

      .{themeCSS_Class} {
        applyTheme(theme)
      }
    })
  }
