extends ../../../../PagesTemplates/RegularWebPage.pug


block append Metadata

  -
    HTML_PAGE_TITLE = "CodeViewer component testing";
    styleSheetsURIs = [ "./CodeViewer.test.css" ]
    scriptsURIs.endOfBody = [ "./CodeViewer.test.js" ]


block append Requirements

  include ../../../../Components.pug


block append PageContent

  .SamplesFlow

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript }).
        import { areStringifiedDigitsOnly } from "hikari-es-extensions";

        console.log(areStringifiedDigitsOnly("123")); // 数字しか含めていないので「true」
        console.log(areStringifiedDigitsOnly("032")); // 此の関数の場合先に行く"0"は妥当とされているので、「true」
        console.log(areStringifiedDigitsOnly("03e")); // 「e」はネイピア数？何方にせよ、関数名通り数字だけではない場合、「false」
        console.log(areStringifiedDigitsOnly("ab1")); // 数字だけではないので「false」

    +CodeViewer--YDF({ title: "Sample" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript }).
        import { areStringifiedDigitsOnly } from "hikari-es-extensions";

        console.log(areStringifiedDigitsOnly("123")); // 数字しか含めていないので「true」
        console.log(areStringifiedDigitsOnly("032")); // 此の関数の場合先に行く"0"は妥当とされているので、「true」
        console.log(areStringifiedDigitsOnly("03e")); // 「e」はネイピア数？何方にせよ、関数名通り数字だけではない場合、「false」
        console.log(areStringifiedDigitsOnly("ab1")); // 数字だけではないので「false」


    +CodeViewer--YDF({ title: "必須HTML用意済みPug初手" })

      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug,
        fileLabel: "Source code"
      }).
        extends ../../../../../../node_modules/hikari-frontend/PagesTemplates/RegularWebPage


        block append Metadata

          -
            styleSheetURLs = [ "./Styles.css" ]
            scriptsURLs.endOfBody = [ "./Main.js" ]


        block append PageContent

          h1 ページ見出し

          p 目に見える内容は此方


      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.HTML,
        fileLabel: "Output"
      }): :html_special_characters_to_html_entities
        <!DOCTYPE html>
        <html lang="ja">

            <head>
              <title>最小HTMLページ</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
              <link href="./Styles.css" rel="stylesheet" type="text/css">
            </head>

            <body>
              <h1>ページ見出し</h1>
              <p>目に見える内容は此方</p>
              <script src="./Main.js"></script>
            </body>

        </html>



    +CodeViewer--YDF

      +CodeViewer-TabPanel--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript,
        fileLabel: "Source code"
      })

        +CodeViewer-PartialListing--YDF.

          import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
          import { HTTP_Methods } from "@yamato-daiwa/es-extensions";


          Server.initializeAndStart({
        +CodeViewer-Explanation--YDF.
          The static initializeAndStart method of **Server** class accepts the configuration as first and only parameter.
          This method does exactly according to it's name, and only that's how it should be.

        +CodeViewer-PartialListing--YDF.
          IP_Address: "127.0.0.1",
        +CodeViewer-Explanation--YDF.
          The IP_Address has been made to required property because you as engineer *must* comprehend on which IP-address
          your server will run. In real application, it will be environment-dependent (local, staging, production, etc.).
          We will discuss the conditional configuration in dedicated tutorials Dotenv config and
          Console line interface. Now, if you have no idea which IP-address will be appropriate for the current tutorial,
          set 127.0.0.1 (see localhost article for details).

        +CodeViewer-PartialListing--YDF.
          HTTP: { port: ProtocolDependentDefaultPorts.HTTP },
        +CodeViewer-Explanation--YDF.
          The 80 - the value of ProtocolDependentDefaultPorts.HTTP - is the default port for HTTP protocol.
          Why you need to specify it explicitly? Again, you *must* comprehend which port your server will serve before it started.
          Next, the specified HTTP property tells to framework that you want to serve the HTTP protocol (and HTTP only in this tutorial).
          There is another option - HTTPS, which will be discussed in dedicated tutorial.
          Currently, the HTTP object-type property has only one child property - port, but in the future, probably more
          properties will be added.

        +CodeViewer-PartialListing--YDF.
          &nbsp;&nbsp;routing: [
              {
                route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
                async handler(request: Request, response: Response): Promise＜void＞ {
                  return response.submitWithSuccess({
                    HTML_Content: "＜h1＞Hello, world!＜/h1＞"
                  });
                }
              }
            ]
        +CodeViewer-Explanation--YDF.
          The routing, obviously and must be obviously for high quality API, allows to define the routing.
          If you are currently don't understand both routing and URI/URL anatomy, you need to learn URI/URL anatomy first.
          For this lesson, it is important what we are serving the root route only; it means what if we will submit the request,
          for example, http://127.0.0.1:80/foo from the browser, not http://127.0.0.1:80/, error "not found" will be returned
          by server.
