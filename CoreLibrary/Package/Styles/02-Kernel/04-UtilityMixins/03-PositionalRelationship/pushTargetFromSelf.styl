pushTargetFromSelf(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "pushTargetFromSelf",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      targetElementSelector: {
        type: DataTypes.string,
        requiredIf: {
          predicate: @(compoundParameter) { return isNull(compoundParameter.definitions) },
          descriptionForLogging: "The 'definitions' are not specified"
        }
      },
      x: {
        type: DataTypes.dimensionalQuantity,
        required: false
      },
      y: {
        type: DataTypes.dimensionalQuantity,
        required: false
      },
      usePaddingsInsteadOfMargins: {
        type: DataTypes.boolean
      },
      definitions: {
        type: DataTypes.string
        required: false,
        incompatibleWith: "targetElementSelector" "x" "y" "usePaddingsInsteadOfMargins"
      },
      contextSelector: {
        type: DataTypes.string,
        required: false
      },
      referenceElementSelector: {
        type: DataTypes.string,
        defaultValue: selector()
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  if (isNotNull(compoundParameter.definitions)) {

    iterateAssociativeArray(compoundParameter.definitions, @(targetElementSelector, definition) {

      definition.pushItFromSelf = {
        x: definition.x,
        y: definition.y,
        usePaddingsInsteadOfMargins: definition.usePaddingsInsteadOfMargins
      }

      // [ Approach ] Deleting became unnecessary properties
      definition.x = null
      definition.y = null
      definition.usePaddingsInsteadOfMargins = null
    });

    definitions = compoundParameter.definitions

  } else {
    definitions = (\
      compoundParameter.targetElementSelector\
      {
        pushItFromSelf: { x: compoundParameter.x, y: compoundParameter.y },
        usePaddingsInsteadOfMargins: compoundParameter.usePaddingsInsteadOfMargins
      }
    )
  }

  PositionalRelationship({
    definitions: definitions,
    contextSelector: compoundParameter.contextSelector,
    referenceElementSelector: compoundParameter.referenceElementSelector
  })
