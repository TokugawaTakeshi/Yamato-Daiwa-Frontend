fillBodyVertically(parametersObject, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: parametersObject,
    propertiesSpecification: {
      verticalScrolling: {
        required: true,
        type: DataTypes.boolean
      }
    },
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "fillBodyVertically"
  })


  height 100%
  max-height 100%


  if parametersObject.verticalScrolling

    overflow-y auto

  else

    overflow-y hidden


FixedTranslucentDimLayer(parametersObject = {}, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: parametersObject,
    propertiesSpecification: {
      ZIndex: {
        type: DataTypes.unit,
        defaultValue: ZIndexes.blockingOverlay
      },
      backgroundColor: {
        type: DataTypes.colorDefinition,
        defaultValue: rgba(black, 0.25)
      }
    },
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "FixedTranslucentDimLayer"
  })


  position fixed
  top 0
  bottom 0
  left 0
  right 0
  z-index: parametersObject.ZIndex

  background: parametersObject.backgroundColor


Centerer(parametersObject = {}, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: parametersObject,
    propertiesSpecification: {
      minimalWidth: {
        type: DataTypes.unit,
        defaultValue: GRID_MINIMAL_WIDTH
      },
      maximalWidth: {
        type: DataTypes.unit,
        defaultValue: GRID_MAXIMAL_WIDTH
      }
    },
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "Centerer"
  })


  width 100%
  min-width: parametersObject.minimalWidth
  max-width: parametersObject.maximalWidth

  margin-left auto
  margin-right auto


provideClippedShadowsAndOutlinesVisibility(parametersObject, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: parametersObject,
    propertiesSpecification: {

      requiredHorizontalSymmetricSpace: {
        type: DataTypes.unit,
        required: false
      },
      requiredSpaceAtLeft: {
        type: DataTypes.unit,
        required: false,
        incompatibleWith: "requiredHorizontalSymmetricSpace"
      },
      requiredSpaceAtRight: {
        type: DataTypes.unit,
        required: false,
        incompatibleWith: "requiredHorizontalSymmetricSpace"
      },

      requiredVerticalSymmetricSpace: {
        type: DataTypes.unit,
        required: false
      },
      requiredSpaceAtTop: {
        type: DataTypes.unit,
        required: false,
        incompatibleWith: "requiredVerticalSymmetricSpace"
      },
      requiredSpaceAtBottom: {
        type: DataTypes.unit,
        required: false,
        incompatibleWith: "requiredVerticalSymmetricSpace"
      },

      noCompensatingNegativeTopMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      noCompensatingNegativeBottomMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      noCompensatingNegativeLeftMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      noCompensatingNegativeRightMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },

      useBeforePseudoElementWithCompensatingNegativeTopMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      useAfterPseudoElementWithCompensatingNegativeBottomMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      }
    },
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "provideClippedShadowsAndOutlinesVisibility"
  })


  requiredSpaceAtLeft = getFirstNonNullArrayElement(
    parametersObject.requiredHorizontalSymmetricSpace parametersObject.requiredSpaceAtLeft
  )

  requiredSpaceAtRight = getFirstNonNullArrayElement(
    parametersObject.requiredHorizontalSymmetricSpace parametersObject.requiredSpaceAtRight
  )

  requiredSpaceAtTop = getFirstNonNullArrayElement(
    parametersObject.requiredVerticalSymmetricSpace parametersObject.requiredSpaceAtTop
  )

  requiredSpaceAtBottom = getFirstNonNullArrayElement(
    parametersObject.requiredVerticalSymmetricSpace parametersObject.requiredSpaceAtBottom
  )


  applyIfNotNull({
    padding-left: requiredSpaceAtLeft,
    padding-right: requiredSpaceAtRight,
    padding-top: requiredSpaceAtTop,
    padding-bottom: requiredSpaceAtBottom
  })


  if isNotNull(requiredSpaceAtLeft) && isFalse(parametersObject.noCompensatingNegativeLeftMargins)

    margin-left: -(requiredSpaceAtLeft)


  if isNotNull(requiredSpaceAtRight) && isFalse(parametersObject.noCompensatingNegativeRightMargins)

    margin-right: -(requiredSpaceAtRight)


  if isNotNull(requiredSpaceAtTop) && isFalse(parametersObject.noCompensatingNegativeTopMargins)

    if isTrue(parametersObject.useBeforePseudoElementWithCompensatingNegativeTopMargins)

      &:before

        display block
        content ""
        margin-top: -(requiredSpaceAtTop)

    else

      margin-top: -(requiredSpaceAtTop)


  if isNotNull(requiredSpaceAtBottom) && isFalse(parametersObject.noCompensatingNegativeBottomMargins)

    if isTrue(parametersObject.useAfterPseudoElementWithCompensatingNegativeBottomMargins)

      &:after

        display block
        content ""
        margin-bottom: -(requiredSpaceAtBottom)

    else

      margin-bottom: -(requiredSpaceAtBottom)


CenteredContentWithComputedHorizontalPaddings(parametersObject, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: parametersObject,
    propertiesSpecification: {
      contentWidth: {
        type: DataTypes.unit,
        required: true
      }
    },
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "CenteredContentWithComputedHorizontalPaddings"
  })

  padding-left "calc(0.5*(100% - %s))" % parametersObject.contentWidth
  padding-right "calc(0.5*(100% - %s))" % parametersObject.contentWidth
