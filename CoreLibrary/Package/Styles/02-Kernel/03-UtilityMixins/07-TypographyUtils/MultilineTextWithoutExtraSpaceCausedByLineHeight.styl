MultilineTextWithoutExtraSpaceCausedByLineHeight(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "MultilineTextWithoutExtraSpaceCausedByLineHeight",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      fontSize: {
        type: DataTypes.dimensionalAmount,
        required: true
      },
      lineHeight: {
        type: DataTypes.dimensionalAmount DataTypes.dimensionlessAmount,
        required: true
      },
      doNotUsePseudoElements: {
        type: DataTypes.boolean,
        required: false
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  fontSize = compoundParameter.fontSize
  lineHeight = compoundParameter.lineHeight
  lineHeight__dimensionalValue = isDimensionlessAmount(lineHeight) ? lineHeight * fontSize : lineHeight

  doNotUsePseudoElements = compoundParameter.doNotUsePseudoElements

  extraSpaceCausedByLineHeightAtTopOrBottom = buildCalcExpression(
    "(${lineHeight__dimensionalValue} - ${fontSize}) / 2",
    { lineHeight__dimensionalValue: round(lineHeight__dimensionalValue), fontSize: fontSize }
  )

  topOrBottomMarginValue = buildCalcExpression(
    "-1 * ${extraSpaceCausedByLineHeightAtTopOrBottom}",
    { extraSpaceCausedByLineHeightAtTopOrBottom: extraSpaceCausedByLineHeightAtTopOrBottom }
  )


  font-size fontSize
  line-height lineHeight
  word-break break-all


  if doNotUsePseudoElements

    margin-top topOrBottomMarginValue
    margin-bottom topOrBottomMarginValue

  else

    &:before

      content ''
      display block
      margin-top topOrBottomMarginValue


    &:after

      content ''
      display block
      margin-bottom topOrBottomMarginValue
