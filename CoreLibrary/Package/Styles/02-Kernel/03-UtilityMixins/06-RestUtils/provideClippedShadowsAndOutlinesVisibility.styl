provideClippedShadowsAndOutlinesVisibility(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideClippedShadowsAndOutlinesVisibility",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      requiredHorizontalSymmetricSpace: {
        type: DataTypes.dimensionalAmount,
        required: false
      },
      requiredSpaceAtLeft: {
        type: DataTypes.dimensionalAmount,
        required: false,
        incompatibleWith: "requiredHorizontalSymmetricSpace"
      },
      requiredSpaceAtRight: {
        type: DataTypes.dimensionalAmount,
        required: false,
        incompatibleWith: "requiredHorizontalSymmetricSpace"
      },

      requiredVerticalSymmetricSpace: {
        type: DataTypes.dimensionalAmount,
        required: false
      },
      requiredSpaceAtTop: {
        type: DataTypes.dimensionalAmount,
        required: false,
        incompatibleWith: "requiredVerticalSymmetricSpace"
      },
      requiredSpaceAtBottom: {
        type: DataTypes.dimensionalAmount,
        required: false,
        incompatibleWith: "requiredVerticalSymmetricSpace"
      },

      noCompensatingNegativeTopMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      noCompensatingNegativeBottomMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      noCompensatingNegativeLeftMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      noCompensatingNegativeRightMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },

      useBeforePseudoElementWithCompensatingNegativeTopMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      },
      useAfterPseudoElementWithCompensatingNegativeBottomMargins: {
        type: DataTypes.boolean,
        defaultValue: false
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  requiredSpaceAtLeft = getFirstNonNullArrayElement(
    compoundParameter.requiredHorizontalSymmetricSpace compoundParameter.requiredSpaceAtLeft
  )

  requiredSpaceAtRight = getFirstNonNullArrayElement(
    compoundParameter.requiredHorizontalSymmetricSpace compoundParameter.requiredSpaceAtRight
  )

  requiredSpaceAtTop = getFirstNonNullArrayElement(
    compoundParameter.requiredVerticalSymmetricSpace compoundParameter.requiredSpaceAtTop
  )

  requiredSpaceAtBottom = getFirstNonNullArrayElement(
    compoundParameter.requiredVerticalSymmetricSpace compoundParameter.requiredSpaceAtBottom
  )


  applyIfNotNull({
    padding-left: requiredSpaceAtLeft,
    padding-right: requiredSpaceAtRight,
    padding-top: requiredSpaceAtTop,
    padding-bottom: requiredSpaceAtBottom
  })


  if isNotNull(requiredSpaceAtLeft) && isFalse(compoundParameter.noCompensatingNegativeLeftMargins)

    margin-left: -(requiredSpaceAtLeft)


  if isNotNull(requiredSpaceAtRight) && isFalse(compoundParameter.noCompensatingNegativeRightMargins)

    margin-right: -(requiredSpaceAtRight)


  if isNotNull(requiredSpaceAtTop) && isFalse(compoundParameter.noCompensatingNegativeTopMargins)

    if isTrue(compoundParameter.useBeforePseudoElementWithCompensatingNegativeTopMargins)

      &:before

        display block
        content ""
        margin-top: -(requiredSpaceAtTop)

    else

      margin-top: -(requiredSpaceAtTop)


  if isNotNull(requiredSpaceAtBottom) && isFalse(compoundParameter.noCompensatingNegativeBottomMargins)

    if isTrue(compoundParameter.useAfterPseudoElementWithCompensatingNegativeBottomMargins)

      &:after

        display block
        content ""
        margin-bottom: -(requiredSpaceAtBottom)

    else

      margin-bottom: -(requiredSpaceAtBottom)
