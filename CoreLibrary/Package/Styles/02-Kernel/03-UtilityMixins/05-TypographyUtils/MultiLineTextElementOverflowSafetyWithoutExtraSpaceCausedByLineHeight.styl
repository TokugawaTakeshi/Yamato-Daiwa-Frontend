MultiLineTextElementOverflowSafetyWithoutExtraSpaceCausedByLineHeight(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "MultiLineTextElementOverflowSafetyWithoutExtraSpaceCausedByLineHeight",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      fontSize: {
        type: DataTypes.dimensionalAmount,
        required: true
      },
      lineHeight: {
        type: DataTypes.dimensionalAmount DataTypes.dimensionlessAmount,
        required: false
      },
      lineSpacing: {
        type: DataTypes.dimensionalAmount DataTypes.dimensionlessAmount,
        requiredIf: {
          predicate: @(compoundParameter) { return isNull(compoundParameter.lineHeight) },
          descriptionForLogging: "The 'lineHeight' is not specified"
        },
        incompatibleWith: "lineHeight"
      },
      doNotUsePseudoElements: {
        type: DataTypes.boolean,
        required: false
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  fontSize = compoundParameter.fontSize

  lineHeight = isNotNull(compoundParameter.lineHeight) ? compoundParameter.lineHeight :\
      getLineHeightByFontSizeAndLineSpacing({
        fontSize: fontSize,
        lineSpacing: compoundParameter.lineSpacing
      })

  lineHeight__dimensionalAmount = null
  isLineHeightTheDimensionalAmount = isDimensionalAmount(lineHeight, { considerDimensionlessZeroAsDimensionalAmount: false })

  if isLineHeightTheDimensionalAmount

    lineHeight__dimensionalAmount = lineHeight

  else if isDimensionlessAmount(lineHeight)

    lineHeight__dimensionalAmount = lineHeight * fontSize

  else

    lineHeight__dimensionalAmount = lineHeight


  lineSpacing = isNotNull(compoundParameter.lineSpacing) ? compoundParameter.lineSpacing :\
      getLineSpacingByFontSizeAndLineHeight({
        fontSize: fontSize,
        lineHeight: compoundParameter.lineHeight
      })

  extraSpaceCausedByLineHeightAtTopOrBottom = buildCalcExpression(
    "(${lineHeight__dimensionalAmount} - ${fontSize}) / 2",
    { lineHeight__dimensionalAmount: lineHeight__dimensionalAmount, fontSize: fontSize }
  )

  topOrBottomMarginValue = buildCalcExpression(
    "-1 * ${extraSpaceCausedByLineHeightAtTopOrBottom}",
    { extraSpaceCausedByLineHeightAtTopOrBottom: extraSpaceCausedByLineHeightAtTopOrBottom }
  )


  font-size fontSize
  line-height lineHeight
  word-break break-all


  if compoundParameter.doNotUsePseudoElements

    margin-top topOrBottomMarginValue
    margin-bottom topOrBottomMarginValue

  else

    &:before

      content ''
      display block
      margin-top topOrBottomMarginValue


    &:after

      content ''
      display block
      margin-bottom topOrBottomMarginValue
