PaddingsSpecificationSchema = {

  all: {
    type: DataTypes.dimensionalAmount,
    required: false
  },

  horizontalSymmetric: {
    type: DataTypes.dimensionalAmount,
    required: false,
    incompatibleWith: "all"
  },
  left: {
    type: DataTypes.dimensionalAmount,
    required: false,
    incompatibleWith: "all" "horizontalSymmetric"
  },
  right: {
    type: DataTypes.dimensionalAmount,
    required: false,
    incompatibleWith: "all" "horizontalSymmetric"
  },

  verticalSymmetric: {
    type: DataTypes.dimensionalAmount,
    required: false,
    incompatibleWith: "all"
  },
  verticalUpwardShifting: {
    type: DataTypes.dimensionalAmount,
    required: false
  },
  top: {
    type: DataTypes.dimensionalAmount,
    required: false,
    incompatibleWith: "all" "verticalSymmetric"
  },
  bottom: {
    type: DataTypes.dimensionalAmount,
    required: false,
    incompatibleWith: "all" "verticalSymmetric"
  }
}


Paddings(paddingsSpecification, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "Paddings",
    targetParameterNumber: 1,
    targetParameter: paddingsSpecification,
    schema: PaddingsSpecificationSchema,
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  leftPadding = getFirstNonNullArrayElement(arrayConstructor__POLYFILL(
    paddingsSpecification.all, paddingsSpecification.horizontalSymmetric, paddingsSpecification.left
  ))

  rightPadding = getFirstNonNullArrayElement(arrayConstructor__POLYFILL(
    paddingsSpecification.all, paddingsSpecification.horizontalSymmetric, paddingsSpecification.right
  ))

  topPadding = getFirstNonNullArrayElement(arrayConstructor__POLYFILL(
    paddingsSpecification.all, paddingsSpecification.verticalSymmetric, paddingsSpecification.top
  ))

  bottomPadding = getFirstNonNullArrayElement(arrayConstructor__POLYFILL(
    paddingsSpecification.all, paddingsSpecification.verticalSymmetric, paddingsSpecification.bottom
  ))


  if (isNotNull(paddingsSpecification.verticalUpwardShifting) && isNotNull(topPadding)) {
    topPadding = buildCalcExpression(
      "${topPadding} - ${verticalUpwardShifting}",
      { topPadding: topPadding, verticalUpwardShifting: paddingsSpecification.verticalUpwardShifting }
    )
  }

  applyIfNotNull({
    padding-left: leftPadding,
    padding-right: rightPadding,
    padding-top: topPadding,
    padding-bottom: bottomPadding
  })


specifyPaddings(paddingsSpecification, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "specifyPaddings",
    targetParameterNumber: 1,
    targetParameter: paddingsSpecification,
    schema: PaddingsSpecificationSchema,
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  return {
    all: paddingsSpecification.all,
    horizontalSymmetric: paddingsSpecification.horizontalSymmetric,
    verticalUpwardShifting: paddingsSpecification.verticalUpwardShifting,
    verticalSymmetric: paddingsSpecification.verticalSymmetric,
    top: paddingsSpecification.top,
    bottom: paddingsSpecification.bottom,
    left: paddingsSpecification.left,
    right: paddingsSpecification.right
  }
