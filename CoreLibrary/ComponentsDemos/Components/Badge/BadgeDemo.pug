mixin BadgeDemo(options)

  -

    options = options ?? {
      headings: true,
      partials: {
        valuesOnly: true,
        keysAndValues: true,
        longLabels: true,
        iconsAndKeysAndValues: true,
        iconsAndValues: true,
        geometricModifiers: {
          pillShape: true,
          singleLine: true
        },
        decorativeModifiers: {
          bordersDisguising: true,
          noBackground: true
        },
        loadingPlaceholder: true
      }
    }

    ThemesShowcase__YDF.
        setDefaultThemeKeyLabelPrefix("Badge__YDF.Themes.").
        setDefaultGeometricVariationLabelPrefix("Badge__YDF.GeometricVariations.").
        setDefaultDecorativeVariationLabelPrefix("Badge__YDF.DecorativeVariations.");

    const themeShowcaseCurrentIterationData = ThemesShowcase__YDF.initializeCurrentIterationData();

    const todayDate__localized__stringified = new Date().toLocaleDateString();


  if options.headings

    h1.Heading1 Badge component testing


  //- ━━━ Values only ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if options.partials.valuesOnly

    if options.headings

      h2.Heading2 Values only

    +ThemesShowcase--YDF({
      themes: Badge__YDF.Themes,
      geometricVariations: Badge__YDF.GeometricVariations,
      decorativeVariations: Badge__YDF.DecorativeVariations,
      decorativeVariationsWrapperTag: "dl",
      decorativeVariationsWrapperAdditionalCSS_Classes: [ "BadgeDemo-BadgesTwoColumnsTable" ],
      iterationData: themeShowcaseCurrentIterationData
    })

      dt=`Badge__YDF.DecorativeVariations.${ themeShowcaseCurrentIterationData.decorativeVariation.key }`
      dd
        +Badge--YDF({
          value: "Value",
          theme: themeShowcaseCurrentIterationData.theme.value,
          geometry: themeShowcaseCurrentIterationData.geometricVariation.value,
          decoration: themeShowcaseCurrentIterationData.decorativeVariation.value
        })


  //- ━━━ Keys and values ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if options.partials.keysAndValues

    if options.headings

      h2.Heading2 Keys and values

    +ThemesShowcase--YDF({
      themes: Badge__YDF.Themes,
      geometricVariations: Badge__YDF.GeometricVariations,
      decorativeVariations: Badge__YDF.DecorativeVariations,
      decorativeVariationsWrapperTag: "dl",
      decorativeVariationsWrapperAdditionalCSS_Classes: [ "BadgeDemo-BadgesTwoColumnsTable" ],
      iterationData: themeShowcaseCurrentIterationData
    })

      dt=`Badge__YDF.DecorativeVariations.${ themeShowcaseCurrentIterationData.decorativeVariation.key }`
      dd
        +Badge--YDF({
          key: "Key",
          value: "Value",
          theme: themeShowcaseCurrentIterationData.theme.value,
          geometry: themeShowcaseCurrentIterationData.geometricVariation.value,
          decoration: themeShowcaseCurrentIterationData.decorativeVariation.value
        })


  //- ━━━ Long labels ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if options.partials.longLabels

    if options.headings

      h3.Heading3 Long labels

    .BadgeDemo-BadgesFlow.BadgeDemo-BadgesFlow__LimitedChildrenMaximalWidth

      +Badge--YDF({
        key: textOverflowSafetyTest,
        value: textOverflowSafetyTest,
        decoration: Badge__YDF.DecorativeVariations.achromaticPastel
      })


  //- ━━━ Icons, keys and values ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if options.partials.iconsAndKeysAndValues

    if options.headings

      h2.Heading2 Icons, keys and values

    +ThemesShowcase--YDF({
      themes: Badge__YDF.Themes,
      geometricVariations: Badge__YDF.GeometricVariations,
      decorativeVariations: Badge__YDF.DecorativeVariations,
      decorativeVariationsWrapperTag: "dl",
      decorativeVariationsWrapperAdditionalCSS_Classes: [ "BadgeDemo-BadgesTwoColumnsTable" ],
      iterationData: themeShowcaseCurrentIterationData
    })

      dt=`Badge__YDF.DecorativeVariations.${ themeShowcaseCurrentIterationData.decorativeVariation.key }`
      dd
        +Badge--YDF({
          key: "Date",
          value: todayDate__localized__stringified,
          theme: themeShowcaseCurrentIterationData.theme.value,
          geometry: themeShowcaseCurrentIterationData.geometricVariation.value,
          decoration: themeShowcaseCurrentIterationData.decorativeVariation.value
        }): +Calendar--YDF_Icon.Badge--YDF-SVG_Icon


  //- ━━━ Icons and values ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if options.partials.iconsAndValues

    if options.headings

      h2.Heading2 Icons and values

    +ThemesShowcase--YDF({
      themes: Badge__YDF.Themes,
      geometricVariations: Badge__YDF.GeometricVariations,
      decorativeVariations: Badge__YDF.DecorativeVariations,
      decorativeVariationsWrapperTag: "dl",
      decorativeVariationsWrapperAdditionalCSS_Classes: [ "BadgeDemo-BadgesTwoColumnsTable" ],
      iterationData: themeShowcaseCurrentIterationData
    })

      dt=`Badge__YDF.DecorativeVariations.${ themeShowcaseCurrentIterationData.decorativeVariation.key }`
      dd
        +Badge--YDF({
          value: todayDate__localized__stringified,
          theme: themeShowcaseCurrentIterationData.theme.value,
          geometry: themeShowcaseCurrentIterationData.geometricVariation.value,
          decoration: themeShowcaseCurrentIterationData.decorativeVariation.value
        }): +Calendar--YDF_Icon.Badge--YDF-SVG_Icon


  //- ━━━ Geometric modifiers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if options.headings && Array.from(Object.values(options.partials.geometricModifiers)).some(isRequired => isRequired)

    h2.Heading2 Geometric modifiers


  //- ─── Pill shape ──────────────────────────────────────────────────────────────────────────────────────────────────
  if options.partials.geometricModifiers.pillShape

    if options.headings

      h3.Heading3 Pill shape

    +ThemesShowcase--YDF({
      themes: Badge__YDF.Themes,
      geometricVariations: Badge__YDF.GeometricVariations,
      decorativeVariations: Badge__YDF.DecorativeVariations,
      decorativeVariationsWrapperTag: "dl",
      decorativeVariationsWrapperAdditionalCSS_Classes: [ "BadgeDemo-BadgesTwoColumnsTable" ],
      iterationData: themeShowcaseCurrentIterationData
    })

      dt=`Badge__YDF.DecorativeVariations.${ themeShowcaseCurrentIterationData.decorativeVariation.key }`
      dd
        +Badge--YDF({
          value: "Value",
          geometry: themeShowcaseCurrentIterationData.geometricVariation.value,
          geometricModifiers: [ Badge__YDF.GeometricModifiers.pillShape ],
          decoration: themeShowcaseCurrentIterationData.decorativeVariation.value
        }): +Calendar--YDF_Icon.Badge--YDF-SVG_Icon


    //- ─── Single line ───────────────────────────────────────────────────────────────────────────────────────────────
    if options.partials.geometricModifiers.singleLine

      if options.headings

        h3.Heading3 Single line

      .BadgeDemo-BadgesFlow.BadgeDemo-BadgesFlow__LimitedChildrenMaximalWidth

        +Badge--YDF({
          key: textOverflowSafetyTest,
          value: textOverflowSafetyTest,
          geometricModifiers: [ Badge__YDF.GeometricModifiers.singleLine ],
          decoration: Badge__YDF.DecorativeVariations.achromaticPastel
        })


    //- ━━━ Decorative modifiers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    if options.headings && Array.from(Object.values(options.partials.decorativeModifiers)).some(isRequired => isRequired)

      h2.Heading2 Decorative modifiers


    //- ─── Borders disguising ────────────────────────────────────────────────────────────────────────────────────────
    if options.partials.decorativeModifiers.bordersDisguising

      if options.headings

        h3.Heading3 Borders disguising

      +ThemesShowcase--YDF({
        themes: Badge__YDF.Themes,
        geometricVariations: Badge__YDF.GeometricVariations,
        decorativeVariations: Badge__YDF.DecorativeVariations,
        decorativeVariationsWrapperTag: "dl",
        decorativeVariationsWrapperAdditionalCSS_Classes: [ "BadgeDemo-BadgesTwoColumnsTable" ],
        iterationData: themeShowcaseCurrentIterationData
      })

        dt=`Badge__YDF.DecorativeVariations.${ themeShowcaseCurrentIterationData.decorativeVariation.key }`
        dd
          +Badge--YDF({
            value: "Value",
            geometry: themeShowcaseCurrentIterationData.geometricVariation.value,
            decoration: themeShowcaseCurrentIterationData.decorativeVariation.value,
            decorativeModifiers: [ Badge__YDF.DecorativeModifiers.bordersDisguising ]
          }): +Calendar--YDF_Icon.Badge--YDF-SVG_Icon


    //- ─── No background ─────────────────────────────────────────────────────────────────────────────────────────────
    if options.partials.decorativeModifiers.noBackground

      if options.headings

        h3.Heading3 No background

      +ThemesShowcase--YDF({
        themes: Badge__YDF.Themes,
        geometricVariations: Badge__YDF.GeometricVariations,
        decorativeVariations: Badge__YDF.DecorativeVariations,
        decorativeVariationsWrapperTag: "dl",
        decorativeVariationsWrapperAdditionalCSS_Classes: [ "BadgeDemo-BadgesTwoColumnsTable" ],
        iterationData: themeShowcaseCurrentIterationData
      })

        dt=`Badge__YDF.DecorativeVariations.${ themeShowcaseCurrentIterationData.decorativeVariation.key }`
        dd
          +Badge--YDF({
            value: "Value",
            geometry: themeShowcaseCurrentIterationData.geometricVariation.value,
            decoration: themeShowcaseCurrentIterationData.decorativeVariation.value,
            decorativeModifiers: [ Badge__YDF.DecorativeModifiers.noBackground ]
          }): +Calendar--YDF_Icon.Badge--YDF-SVG_Icon


  //- ━━━ Loading placeholder ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if options.partials.loadingPlaceholder

    if options.headings

      h2.Heading2 Loading placeholder

    .BadgeDemo-BadgesFlow

      each geometricVariation in Object.values(Badge__YDF.GeometricVariations)

        +Badge--YDF-LoadingPlaceholder({
          geometry: geometricVariation,
        })

        +Badge--YDF-LoadingPlaceholder({
          geometry: geometricVariation,
          geometricModifiers: [ Badge__YDF.GeometricModifiers.pillShape ]
        })
