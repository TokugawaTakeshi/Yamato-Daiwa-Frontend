/*
 * @yamato-daiwa/frontend v1.0
 * (c) 2021 Sole proprietorship "Yamato Daiwa" Takeshi Tokugawa
 * Released under the MIT License.
 */
a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video {
  border: 0;
  font-size: 100%;
  margin: 0;
  padding: 0;
  vertical-align: baseline;
}
article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section {
  display: block;
}
h1,h2,h3,h4,h5,h6 {
  font-weight: 400;
}
body {
  line-height: 1;
}
ol,ul {
  list-style: none;
}
a {
  color: #000;
  outline: none;
  text-decoration: none;
}
blockquote,q {
  quotes: none;
}
blockquote:after,blockquote:before,q:after,q:before {
  content: "";
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
th {
  font-weight: 400;
}
button:focus,input:focus,select:focus,textarea:focus {
  outline: none;
}
input {
  box-shadow: none;
}
hr {
  border-width: 0;
  margin: 0;
}
* {
  box-sizing: border-box;
}
body,html {
  height: 100%;
}
html {
  font-family: system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,Liberation Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;
  font-size: 14px;
  line-height: 1;
}
sub {
  vertical-align: sub;
}
sub,sup {
  font-size: 10px;
  margin-left: 1px;
}
sup {
  vertical-align: super;
}
.Heading1 {
  color: #202020;
  font-size: 3.4rem;
  line-height: 1.058823529411765;
}
.Heading1:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Heading1:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading2 {
  color: #404040;
  font-size: 3rem;
  line-height: 1.066666666666667;
}
.Heading2:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Heading2:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading1+.Heading2 {
  margin-top: 16px;
}
.Heading3 {
  color: #606060;
  font-size: 2.6rem;
  line-height: 1.076923076923077;
}
.Heading3:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Heading3:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading2+.Heading3 {
  margin-top: 12px;
}
.Heading4 {
  color: #787878;
  font-size: 2.2rem;
  line-height: 1.090909090909091;
}
.Heading4:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Heading4:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading3+.Heading4 {
  margin-top: 10px;
}
.Heading5 {
  color: #989898;
  font-size: 1.8rem;
  line-height: 1.111111111111111;
}
.Heading5:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Heading5:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading4+.Heading5 {
  margin-top: 8px;
}
.Heading6 {
  color: #b0b0b0;
  font-size: 1.4rem;
  line-height: 1.142857142857143;
}
.Heading6:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Heading6:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading5+.Heading6 {
  margin-top: 6px;
}
.Subheading1 {
  color: #505050;
  font-size: 3.1rem;
  line-height: 1.064516129032258;
}
.Subheading1:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Subheading1:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading1+.Subheading1 {
  margin-top: 4px;
}
.Subheading1+.Heading2 {
  margin-top: 12px;
}
.Subheading2 {
  color: #606060;
  font-size: 2.7rem;
  line-height: 1.074074074074074;
}
.Subheading2:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Subheading2:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading2+.Subheading2 {
  margin-top: 4px;
}
.Subheading2+.Heading3 {
  margin-top: 12px;
}
.Subheading3 {
  color: #787878;
  font-size: 2.3rem;
  line-height: 1.086956521739131;
}
.Subheading3:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Subheading3:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading3+.Subheading3 {
  margin-top: 2px;
}
.Subheading3+.Heading4 {
  margin-top: 10px;
}
.Subheading4 {
  color: #989898;
  font-size: 1.9rem;
  line-height: 1.105263157894737;
}
.Subheading4:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Subheading4:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading4+.Subheading4 {
  margin-top: 4px;
}
.Subheading4+.Heading5 {
  margin-top: 10px;
}
.Subheading5 {
  color: #b0b0b0;
  font-size: 1.5rem;
  line-height: 1.133333333333333;
}
.Subheading5:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Subheading5:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading5+.Subheading5 {
  margin-top: 4px;
}
.Subheading5+.Heading6 {
  margin-top: 10px;
}
.Subheading6 {
  color: #c8c8c8;
  font-size: 1.1rem;
  line-height: 1.181818181818182;
}
.Subheading6:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.Subheading6:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.Heading6+.Subheading6 {
  margin-top: 4px;
}
.Paragraph {
  font-size: 14px;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.4;
}
.Paragraph:before {
  content: "";
  display: block;
  margin-top: -2.8px;
}
.Paragraph:after {
  content: "";
  display: block;
  margin-bottom: -2.8px;
}
.Paragraph+.Paragraph {
  margin-top: .8rem;
}
.Heading1+.Paragraph,.Subheading1+.Paragraph {
  margin-top: 12px;
}
.Heading2+.Paragraph {
  margin-top: 16px;
}
.Paragraph+.Heading2 {
  margin-top: 24px;
}
.Heading3+.Paragraph,.Subheading2+.Paragraph {
  margin-top: 16px;
}
.Paragraph+.Heading3 {
  margin-top: 24px;
}
.Heading4+.Paragraph,.Subheading3+.Paragraph {
  margin-top: 16px;
}
.Paragraph+.Heading4 {
  margin-top: 24px;
}
.Heading5+.Paragraph,.Subheading4+.Paragraph {
  margin-top: 16px;
}
.Paragraph+.Heading5 {
  margin-top: 24px;
}
.Heading6+.Paragraph,.Subheading5+.Paragraph {
  margin-top: 16px;
}
.Paragraph+.Heading6 {
  margin-top: 24px;
}
.Subheading6+.Paragraph {
  margin-top: 16px;
}
.UnorderedList {
  list-style-position: inside;
  list-style-type: disc;
}
.UnorderedList li {
  font-size: 14px;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.4;
  margin-bottom: -2.8px;
  margin-top: -2.8px;
}
.UnorderedList li+li {
  padding-top: 8px;
}
.UnorderedList ul {
  list-style-type: circle;
  padding-left: 28px;
}
.UnorderedList ul ul {
  list-style-type: square;
}
.Heading1+.UnorderedList {
  margin-top: 12px;
}
.Heading2+.UnorderedList {
  margin-top: 10px;
}
.UnorderedList+.Heading2 {
  margin-top: 14px;
}
.Heading3+.UnorderedList {
  margin-top: 8px;
}
.Paragraph+.UnorderedList,.UnorderedList+.Heading3 {
  margin-top: 12px;
}
.UnorderedList+.Paragraph {
  margin-top: 1.2rem;
}
.UnorderedList+.UnorderedList {
  margin-top: 12px;
}
.OrderedList {
  list-style-position: outside;
  list-style-type: decimal;
  padding-left: 28px;
}
.OrderedList li {
  font-size: 14px;
  line-height: 1.4;
  word-break: break-all;
}
.OrderedList li:before {
  content: "";
  display: block;
  margin-top: -2.8px;
}
.OrderedList li:after {
  content: "";
  display: block;
  margin-bottom: -2.8px;
}
.OrderedList li+li {
  margin-top: 8px;
}
.OrderedList ol {
  list-style-type: lower-alpha;
  padding-left: 10px;
}
.OrderedList ol ol {
  list-style-type: lower-roman;
}
.Heading1+.OrderedList {
  margin-top: 12px;
}
.Heading2+.OrderedList {
  margin-top: 10px;
}
.OrderedList+.Heading2 {
  margin-top: 14px;
}
.Paragraph+.OrderedList {
  margin-top: 12px;
}
.OrderedList+.Paragraph {
  margin-top: 1.2rem;
}
.UnorderedList+.OrderedList {
  margin-top: 12px;
}
.DescriptionList dt {
  font-size: 1rem;
  font-weight: 700;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.2;
}
.DescriptionList dt:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.DescriptionList dt:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.DescriptionList dd {
  font-size: 1rem;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.2;
  padding-left: 10px;
}
.DescriptionList dd:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.DescriptionList dd:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.DescriptionList dt+dd {
  margin-top: 6px;
}
.DescriptionList dd+dt,.Heading1+.DescriptionList {
  margin-top: 12px;
}
.Heading2+.DescriptionList {
  margin-top: 10px;
}
.DescriptionList+.Heading2 {
  margin-top: 14px;
}
.Paragraph+.DescriptionList {
  margin-top: 12px;
}
.DescriptionList+.Paragraph {
  margin-top: 1.2rem;
}
.UnorderedList+.DescriptionList {
  margin-top: 12px;
}
.Link {
  background-image: linear-gradient(rgba(0,62,255,.5), rgba(0,62,255,.5));
  background-position: bottom 0 center;
  background-repeat: no-repeat;
  background-size: 100% 1px;
  color: #003eff;
  cursor: pointer;
  display: inline-block;
  line-height: 1;
  padding-bottom: 2px;
}
.Link:focus,.Link:hover {
  background-image: linear-gradient(rgba(0,127,255,.75), rgba(0,127,255,.75));
  color: #007fff;
}
.Link:focus {
  outline: none;
}
.Link:active {
  background-image: linear-gradient(#777620, #777620);
  color: #777620;
}
.Link.Link__DisabledState {
  background-image: linear-gradient(rgba(0,127,255,.5), rgba(0,127,255,.5));
  color: #007fff;
}
.ThemesShowcase--YDF>li+li {
  margin-top: 12px;
}
.ThemesShowcase--YDF>li li+li {
  margin-top: 8px;
}
.ThemesShowcase--YDF-Label {
  color: #606060;
  font-size: 1.2rem;
  font-weight: 700;
  line-height: 1.166666666666667;
}
.ThemesShowcase--YDF-Label:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.ThemesShowcase--YDF-Label:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.ThemesShowcase--YDF-ChildList {
  border-left: 3px solid #dcdcdc;
  padding-left: 8px;
}
.ThemesShowcase--YDF-Label+.ThemesShowcase--YDF-ChildList {
  margin-top: 4px;
}
.ComponentTestingPageContent {
  margin-left: auto;
  margin-right: auto;
  max-width: 640px;
  min-width: 320px;
  padding: 12px 16px;
  width: 100%;
}
.ComponentTestingPageContent .Heading2+.ThemesShowcase--YDF {
  margin-top: 8px;
}
.ComponentTestingPageContent .ThemesShowcase--YDF+.Heading2 {
  margin-top: 16px;
}
.ComponentTestingPageContent .Heading3+.ThemesShowcase--YDF {
  margin-top: 6px;
}
.ComponentTestingPageContent .ThemesShowcase--YDF+.Heading3 {
  margin-top: 12px;
}
.Badge--YDF {
  align-items: center;
  display: inline-flex;
}
.Badge--YDF-Key {
  word-break: break-all;
}
.Badge--YDF__SingleLineMode .Badge--YDF-Value {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
:not(.Badge--YDF__SingleLineMode) .Badge--YDF-Value {
  word-break: break-all;
}
.Badge--YDF-SVG_Icon {
  flex-shrink: 0;
}
.Badge--YDF__BordersDisguisingDecorativeModifier {
  border-color: transparent;
}
.Badge--YDF__LoadingPlaceholder {
  display: inline-block;
}
.Badge--YDF {
  border-radius: .2em;
  border-width: 1px;
}
.Badge--YDF__PillShapeGeometricModifier {
  border-radius: 2em;
}
.Badge--YDF-SVG_Icon {
  height: 1em;
  margin-left: .5em;
}
.Badge--YDF-Key {
  padding-bottom: .3em;
  padding-top: .3em;
}
.Badge--YDF-Key:first-child {
  margin-left: .8em;
}
.Badge--YDF__SingleLineMode .Badge--YDF-Key {
  font-size: 1em;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
:not(.Badge--YDF__SingleLineMode) .Badge--YDF-Key {
  font-size: 1em;
  line-height: 1.2;
  margin-bottom: -.1em;
  margin-top: -.1em;
}
.Badge--YDF-SVG_Icon+.Badge--YDF-Key {
  margin-left: .4em;
}
.Badge--YDF-Value {
  padding-bottom: .3em;
  padding-top: .3em;
}
.Badge--YDF-Value:first-child {
  margin-left: .8em;
}
.Badge--YDF-Value:last-child {
  margin-right: .8em;
}
.Badge--YDF__SingleLineMode .Badge--YDF-Value {
  font-size: 1em;
}
:not(.Badge--YDF__SingleLineMode) .Badge--YDF-Value {
  font-size: 1em;
  line-height: 1.2;
  margin-bottom: -.1em;
  margin-top: -.1em;
}
.Badge--YDF-SVG_Icon+.Badge--YDF-Value {
  margin-left: .6em;
}
.Badge--YDF-Key+.Badge--YDF-Value {
  margin-left: .4em;
}
.Badge--YDF__LoadingPlaceholder {
  background: #e1e7eb;
  height: 1.8em;
  min-width: 80px;
  overflow: hidden;
}
.Badge--YDF__LoadingPlaceholder:before {
  animation-duration: 1.5s;
  animation-fill-mode: forwards;
  animation-iteration-count: infinite;
  animation-name: LoadingPlaceholderAnimation;
  animation-timing-function: ease;
  background: linear-gradient(90deg, transparent 0, #e7ecef 30%, #eaeef1 50%, #e7ecef 70%, transparent);
  content: "";
  display: block;
  height: 100%;
  transform: translateX(-100%);
}
@keyframes LoadingPlaceholderAnimation {
  0% {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(100%);
  }
}
.Badge--YDF__VeryCatchyBrightDecoration {
  background-color: #c00;
  border-color: #c00;
  border-style: solid;
}
.Badge--YDF__VeryCatchyBrightDecoration .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__VeryCatchyBrightDecoration .Badge--YDF-Key {
  color: #fff;
}
.Badge--YDF__VeryCatchyBrightDecoration .Badge--YDF-Value {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__CatchyBrightDecoration {
  background-color: #c50;
  border-color: #c50;
  border-style: solid;
}
.Badge--YDF__CatchyBrightDecoration .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__CatchyBrightDecoration .Badge--YDF-Key {
  color: #fff;
}
.Badge--YDF__CatchyBrightDecoration .Badge--YDF-Value {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__ModestlyCatchyBrightDecoration {
  background-color: #c90;
  border-color: #c90;
  border-style: solid;
}
.Badge--YDF__ModestlyCatchyBrightDecoration .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__ModestlyCatchyBrightDecoration .Badge--YDF-Key {
  color: #fff;
}
.Badge--YDF__ModestlyCatchyBrightDecoration .Badge--YDF-Value {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__NeutralBrightDecoration {
  background-color: #09c;
  border-color: #09c;
  border-style: solid;
}
.Badge--YDF__NeutralBrightDecoration .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__NeutralBrightDecoration .Badge--YDF-Key {
  color: #fff;
}
.Badge--YDF__NeutralBrightDecoration .Badge--YDF-Value {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__ModestlyCalmingBrightDecoration {
  background-color: #07c;
  border-color: #07c;
  border-style: solid;
}
.Badge--YDF__ModestlyCalmingBrightDecoration .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__ModestlyCalmingBrightDecoration .Badge--YDF-Key {
  color: #fff;
}
.Badge--YDF__ModestlyCalmingBrightDecoration .Badge--YDF-Value {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__CalmingBrightDecoration {
  background-color: #0c0;
  border-color: #0c0;
  border-style: solid;
}
.Badge--YDF__CalmingBrightDecoration .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__CalmingBrightDecoration .Badge--YDF-Key {
  color: #fff;
}
.Badge--YDF__CalmingBrightDecoration .Badge--YDF-Value {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__AchromaticBrightDecoration {
  background-color: #505050;
  border-color: #505050;
  border-style: solid;
}
.Badge--YDF__AchromaticBrightDecoration .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__AchromaticBrightDecoration .Badge--YDF-Key {
  color: #fff;
}
.Badge--YDF__AchromaticBrightDecoration .Badge--YDF-Value {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__VeryCatchyPastelDecoration {
  background-color: #ffe0e0;
  border-color: #c00;
  border-style: solid;
}
.Badge--YDF__VeryCatchyPastelDecoration .Badge--YDF-SVG_Icon {
  fill: #c00;
}
.Badge--YDF__VeryCatchyPastelDecoration .Badge--YDF-Key {
  color: #c00;
}
.Badge--YDF__VeryCatchyPastelDecoration .Badge--YDF-Value {
  color: #c00;
  font-weight: 700;
}
.Badge--YDF__CatchyPastelDecoration {
  background-color: #ffede0;
  border-color: #c50;
  border-style: solid;
}
.Badge--YDF__CatchyPastelDecoration .Badge--YDF-SVG_Icon {
  fill: #c50;
}
.Badge--YDF__CatchyPastelDecoration .Badge--YDF-Key {
  color: #c50;
}
.Badge--YDF__CatchyPastelDecoration .Badge--YDF-Value {
  color: #c50;
  font-weight: 700;
}
.Badge--YDF__ModestlyCatchyPastelDecoration {
  background-color: #fff7e0;
  border-color: #c90;
  border-style: solid;
}
.Badge--YDF__ModestlyCatchyPastelDecoration .Badge--YDF-SVG_Icon {
  fill: #c90;
}
.Badge--YDF__ModestlyCatchyPastelDecoration .Badge--YDF-Key {
  color: #c90;
}
.Badge--YDF__ModestlyCatchyPastelDecoration .Badge--YDF-Value {
  color: #c90;
  font-weight: 700;
}
.Badge--YDF__NeutralPastelDecoration {
  background-color: #e0f7ff;
  border-color: #09c;
  border-style: solid;
}
.Badge--YDF__NeutralPastelDecoration .Badge--YDF-SVG_Icon {
  fill: #09c;
}
.Badge--YDF__NeutralPastelDecoration .Badge--YDF-Key {
  color: #09c;
}
.Badge--YDF__NeutralPastelDecoration .Badge--YDF-Value {
  color: #09c;
  font-weight: 700;
}
.Badge--YDF__ModestlyCalmingPastelDecoration {
  background-color: #e0f2ff;
  border-color: #07c;
  border-style: solid;
}
.Badge--YDF__ModestlyCalmingPastelDecoration .Badge--YDF-SVG_Icon {
  fill: #07c;
}
.Badge--YDF__ModestlyCalmingPastelDecoration .Badge--YDF-Key {
  color: #07c;
}
.Badge--YDF__ModestlyCalmingPastelDecoration .Badge--YDF-Value {
  color: #07c;
  font-weight: 700;
}
.Badge--YDF__CalmingPastelDecoration {
  background-color: #e0ffe0;
  border-color: #0c0;
  border-style: solid;
}
.Badge--YDF__CalmingPastelDecoration .Badge--YDF-SVG_Icon {
  fill: #0c0;
}
.Badge--YDF__CalmingPastelDecoration .Badge--YDF-Key {
  color: #0c0;
}
.Badge--YDF__CalmingPastelDecoration .Badge--YDF-Value {
  color: #0c0;
  font-weight: 700;
}
.Badge--YDF__AchromaticPastelDecoration {
  background-color: #f0f0f0;
  border-color: #505050;
  border-style: solid;
}
.Badge--YDF__AchromaticPastelDecoration .Badge--YDF-SVG_Icon {
  fill: #505050;
}
.Badge--YDF__AchromaticPastelDecoration .Badge--YDF-Key {
  color: #505050;
}
.Badge--YDF__AchromaticPastelDecoration .Badge--YDF-Value {
  color: #505050;
  font-weight: 700;
}
.BadgeDemo-BadgesTwoColumnsTable {
  align-items: center;
  -moz-column-gap: 12px;
       column-gap: 12px;
  display: grid;
  grid-template-columns: auto minmax(0, 1fr);
  row-gap: 6px;
}
.BadgeDemo-BadgesTwoColumnsTable dt {
  color: #606060;
  font-weight: 700;
}
.BadgeDemo-BadgesFlow {
  display: flex;
  flex-wrap: wrap;
  gap: 6px 6px;
}
.Heading2+.BadgeDemo-BadgesFlow {
  margin-top: 8px;
}
.BadgeDemo-BadgesFlow+.Heading2 {
  margin-top: 16px;
}
.Heading3+.BadgeDemo-BadgesFlow {
  margin-top: 8px;
}
.BadgeDemo-BadgesFlow+.Heading3 {
  margin-top: 16px;
}
.BadgeDemo-BadgesFlow+.BadgeDemo-BadgesFlow {
  margin-top: 8px;
}
.BadgeDemo-BadgesFlow__LimitedChildrenMaximalWidth>* {
  max-width: 200px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
