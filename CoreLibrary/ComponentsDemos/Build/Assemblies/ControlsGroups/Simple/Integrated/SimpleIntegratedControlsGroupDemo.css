/*
 * @yamato-daiwa/frontend v1.0
 * (c) 2021 Sole proprietorship "Yamato Daiwa" Takeshi Tokugawa
 * Released under the MIT License.
 */
a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video {
  border: 0;
  font-size: 100%;
  margin: 0;
  padding: 0;
  vertical-align: baseline;
}
article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section {
  display: block;
}
h1,h2,h3,h4,h5,h6 {
  font-weight: 400;
}
body {
  line-height: 1;
}
ol,ul {
  list-style: none;
}
a {
  color: #000;
  outline: none;
  text-decoration: none;
}
blockquote,q {
  quotes: none;
}
blockquote:after,blockquote:before,q:after,q:before {
  content: "";
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
th {
  font-weight: 400;
}
button:focus,input:focus,select:focus,textarea:focus {
  outline: none;
}
input {
  box-shadow: none;
}
hr {
  border-width: 0;
  margin: 0;
}
* {
  box-sizing: border-box;
}
body,html {
  height: 100%;
}
html {
  font-family: system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,Liberation Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;
  font-size: 14px;
  line-height: 1;
}
sub {
  vertical-align: sub;
}
sub,sup {
  font-size: 10px;
  margin-left: 1px;
}
sup {
  vertical-align: super;
}
.Button--YDF {
  background: none;
  border: none;
  border-radius: 0;
  cursor: pointer;
  font-family: inherit;
  font-size: inherit;
  line-height: 1;
  padding: 0;
  text-decoration: none;
}
.Button--YDF:disabled {
  cursor: not-allowed;
}
a.Button--YDF,button.Button--YDF {
  align-items: center;
  display: inline-flex;
  justify-content: center;
}
a.Button--YDF {
  text-align: center;
}
input.Button--YDF {
  white-space: break-spaces;
  word-break: break-all;
}
a.Button--YDF__DisabledState {
  pointer-events: none;
}
.Button--YDF-Label {
  word-break: break-all;
}
.Button--YDF-SVG_Icon {
  flex-shrink: 0;
}
.Badge--YDF__LoadingPlaceholder {
  display: inline-block;
}
.Button--YDF__RegularGeometry {
  border-radius: 3px;
  border-width: 1px;
  min-width: 6rem;
}
a.Button--YDF__RegularGeometry .Button--YDF-Label,button.Button--YDF__RegularGeometry .Button--YDF-Label {
  font-size: 1rem;
  line-height: 1.1rem;
  margin-bottom: .4rem;
  margin-top: .4rem;
}
a.Button--YDF__RegularGeometry .Button--YDF-Label:first-child,button.Button--YDF__RegularGeometry .Button--YDF-Label:first-child {
  margin-left: 1rem;
}
a.Button--YDF__RegularGeometry .Button--YDF-Label:last-child,button.Button--YDF__RegularGeometry .Button--YDF-Label:last-child {
  margin-right: 1rem;
}
input.Button--YDF__RegularGeometry {
  font-size: 1rem;
  line-height: 1.1rem;
  padding: .4rem 1rem;
}
.Button--YDF__RegularGeometry .Button--YDF-SVG_Icon {
  height: 1rem;
  margin-bottom: .45rem;
  margin-top: .45rem;
}
.Button--YDF__RegularGeometry .Button--YDF-SVG_Icon:first-child {
  margin-left: .75rem;
}
.Button--YDF__RegularGeometry .Button--YDF-SVG_Icon:last-child {
  margin-right: .75rem;
}
.Button--YDF__RegularGeometry .Button--YDF-Label+.Button--YDF-SVG_Icon {
  margin-left: .5rem;
}
.Button--YDF__RegularGeometry .Button--YDF-SVG_Icon+.Button--YDF-Label {
  margin-left: .4rem;
}
.Button--YDF__RegularGeometry .Button--YDF-SVG_Icon.Button--YDF-SVG_Icon__Menu__ThreeDots__Horizontal {
  width: 1rem;
}
.Button--YDF__SmallGeometry {
  border-radius: 3px;
  border-width: 1px;
  min-width: 4rem;
}
a.Button--YDF__SmallGeometry .Button--YDF-Label,button.Button--YDF__SmallGeometry .Button--YDF-Label {
  font-size: .9rem;
  line-height: 1rem;
  margin-bottom: .3rem;
  margin-top: .2rem;
}
a.Button--YDF__SmallGeometry .Button--YDF-Label:first-child,button.Button--YDF__SmallGeometry .Button--YDF-Label:first-child {
  margin-left: .6rem;
}
a.Button--YDF__SmallGeometry .Button--YDF-Label:last-child,button.Button--YDF__SmallGeometry .Button--YDF-Label:last-child {
  margin-right: .6rem;
}
input.Button--YDF__SmallGeometry {
  font-size: .9rem;
  line-height: 1rem;
  padding: .2rem .6rem .3rem;
}
.Button--YDF__SmallGeometry .Button--YDF-SVG_Icon {
  height: .8rem;
  margin-bottom: .25rem;
  margin-top: .25rem;
}
.Button--YDF__SmallGeometry .Button--YDF-SVG_Icon:first-child {
  margin-left: .75rem;
}
.Button--YDF__SmallGeometry .Button--YDF-SVG_Icon:last-child {
  margin-right: .75rem;
}
.Button--YDF__SmallGeometry .Button--YDF-Label+.Button--YDF-SVG_Icon {
  margin-left: .5rem;
}
.Button--YDF__SmallGeometry .Button--YDF-SVG_Icon+.Button--YDF-Label {
  margin-left: .4rem;
}
.Button--YDF__SmallGeometry .Button--YDF-SVG_Icon.Button--YDF-SVG_Icon__Menu__ThreeDots__Horizontal {
  width: 1rem;
}
a.Button--YDF__LinkLikeGeometry .Button--YDF-Label,button.Button--YDF__LinkLikeGeometry .Button--YDF-Label {
  font-size: 1rem;
  line-height: 1.1rem;
  margin-bottom: -.05rem;
  margin-top: -.05rem;
}
input.Button--YDF__LinkLikeGeometry {
  font-size: 1rem;
  line-height: 1.1rem;
  padding-bottom: -.05rem;
  padding-top: -.05rem;
}
.Button--YDF__LinkLikeGeometry .Button--YDF-SVG_Icon {
  height: 1rem;
  margin-bottom: .25rem;
  margin-top: .25rem;
}
.Button--YDF__LinkLikeGeometry .Button--YDF-Label+.Button--YDF-SVG_Icon {
  margin-left: .5rem;
}
.Button--YDF__LinkLikeGeometry .Button--YDF-SVG_Icon+.Button--YDF-Label {
  margin-left: .4rem;
}
.Button--YDF__LinkLikeGeometry .Button--YDF-SVG_Icon.Button-SVG_Icon__Menu__ThreeDots__Horizontal {
  width: 1rem;
}
.Button--YDF__RegularDecoration {
  background-color: #f6f6f6;
  border-color: #c5c5c5;
  border-style: solid;
  color: #454545;
}
.Button--YDF__RegularDecoration .Button--YDF-SVG_Icon {
  fill: #454545;
}
.Button--YDF__RegularDecoration:hover {
  background-color: #ededed;
  border-color: #ccc;
  color: #2b2b2b;
}
.Button--YDF__RegularDecoration:focus {
  box-shadow: 0 0 3px 1px #007fff;
}
.Button--YDF__RegularDecoration:active {
  background-color: #007fff;
  border-color: #003eff;
  color: #fff;
}
a.Button--YDF__RegularDecoration.Button--YDF__DisabledState,button.Button--YDF__RegularDecoration:disabled,input.Button--YDF__RegularDecoration:disabled {
  background-color: #f5f5f5;
  border-color: #dcdcdc;
  color: #b0b0b0;
}
.Button--YDF__AccentedDecoration {
  background-color: #007fff;
  border-color: #003eff;
  border-style: solid;
  color: #fff;
}
.Button--YDF__AccentedDecoration .Button--YDF-SVG_Icon {
  fill: #fff;
}
.Button--YDF__AccentedDecoration:hover {
  background-color: #ededed;
  border-color: #ccc;
  color: #2b2b2b;
}
.Button--YDF__AccentedDecoration:focus {
  box-shadow: 0 0 3px 1px #007fff;
}
.Button--YDF__AccentedDecoration:active {
  background-color: #f6f6f6;
  border-color: #c5c5c5;
  color: #454545;
}
a.Button--YDF__AccentedDecoration.Button--YDF__DisabledState,button.Button--YDF__AccentedDecoration:disabled,input.Button--YDF__AccentedDecoration:disabled {
  background-color: #f5f5f5;
  border-color: #dcdcdc;
  color: #b0b0b0;
}
.Button--YDF__LinkLikeDecoration {
  color: #003eff;
  text-decoration-color: #003eff;
  text-decoration-style: solid;
  text-decoration-thickness: 1px;
}
.Button--YDF__LinkLikeDecoration .Button--YDF-SVG_Icon {
  fill: #003eff;
}
.Button--YDF__LinkLikeDecoration:hover {
  text-decoration-color: rgba(0,62,255,.75);
  text-decoration-style: solid;
  text-decoration-thickness: 1px;
}
.Button--YDF__LinkLikeDecoration:focus {
  box-shadow: 0 0 3px 1px #007fff;
}
.Button--YDF__LinkLikeDecoration:active {
  color: rgba(0,62,255,.75);
  text-decoration-color: rgba(0,62,255,.75);
  text-decoration-style: solid;
  text-decoration-thickness: 1px;
}
a.Button--YDF__LinkLikeDecoration.Button--YDF__DisabledState,button.Button--YDF__LinkLikeDecoration:disabled,input.Button--YDF__LinkLikeDecoration:disabled {
  background-color: #f5f5f5;
  border-color: #dcdcdc;
  color: #b0b0b0;
}
.CompoundControlShell--YDF-Header {
  align-items: center;
  display: flex;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Label {
  font-size: 1rem;
  line-height: 1.1rem;
  word-break: break-all;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Label:before {
  content: "";
  display: block;
  margin-top: -.05rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Label:after {
  content: "";
  display: block;
  margin-bottom: -.05rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Guidance {
  font-size: .9rem;
  line-height: 1.1rem;
  word-break: break-all;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Guidance:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Guidance:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Header+.CompoundControlShell--YDF-Guidance {
  margin-top: .2rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Guidance+.CompoundControlShell--YDF-MainSlotCustomizableWrapper,.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-Header+.CompoundControlShell--YDF-MainSlotCustomizableWrapper {
  margin-top: .3rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-ValidationErrorsMessagesList {
  margin-top: .4rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-ValidationErrorMessage {
  font-size: 1rem;
  line-height: 1.1rem;
  word-break: break-all;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-ValidationErrorMessage:before {
  content: "";
  display: block;
  margin-top: -.05rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-ValidationErrorMessage:after {
  content: "";
  display: block;
  margin-bottom: -.05rem;
}
.CompoundControlShell--YDF__RegularGeometry .CompoundControlShell--YDF-ValidationErrorMessage+.CompoundControlShell--YDF-ValidationErrorMessage {
  margin-top: .2rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Label {
  font-size: .9rem;
  line-height: 1rem;
  word-break: break-all;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Label:before {
  content: "";
  display: block;
  margin-top: -.05rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Label:after {
  content: "";
  display: block;
  margin-bottom: -.05rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Guidance {
  font-size: .8rem;
  line-height: 1rem;
  word-break: break-all;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Guidance:before {
  content: "";
  display: block;
  margin-top: -.1rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Guidance:after {
  content: "";
  display: block;
  margin-bottom: -.1rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Header+.CompoundControlShell--YDF-Guidance,.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Header+.CompoundControlShell--YDF-MainSlotCustomizableWrapper {
  margin-top: .2rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-Guidance+.CompoundControlShell--YDF-MainSlotCustomizableWrapper {
  margin-top: .3rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-ValidationErrorsMessagesList {
  margin-top: .4rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-ValidationErrorMessage {
  font-size: .9rem;
  line-height: 1rem;
  word-break: break-all;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-ValidationErrorMessage:before {
  content: "";
  display: block;
  margin-top: -.05rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-ValidationErrorMessage:after {
  content: "";
  display: block;
  margin-bottom: -.05rem;
}
.CompoundControlShell--YDF__SmallGeometry .CompoundControlShell--YDF-ValidationErrorMessage+.CompoundControlShell--YDF-ValidationErrorMessage {
  margin-top: .2rem;
}
.CompoundControlShell--YDF-Label {
  font-weight: 700;
}
.CompoundControlShell--YDF-Guidance {
  color: #787878;
}
.CompoundControlShell--YDF-ValidationErrorMessage {
  color: #c00;
  font-weight: 700;
}
.TextBox--YDF-InputOrTextAreaElement {
  border: none;
  font-family: inherit;
  font-size: inherit;
  padding: 0;
  width: 100%;
}
input.TextBox--YDF-InputOrTextAreaElement {
  line-height: 1;
}
.TextBox--YDF {
  min-width: 120px;
}
.TextBox--YDF-InputOrTextAreaElement {
  border-radius: 3px;
  border-width: 1px;
  padding: calc(.45rem - 1px) .5rem .45rem;
}
.TextBox--YDF input.TextBox--YDF-InputOrTextAreaElement {
  font-family: inherit;
  font-size: 1rem;
  line-height: 1;
}
textarea.TextBox--YDF-InputOrTextAreaElement {
  font-size: 1rem;
  line-height: 1.1rem;
  word-break: break-all;
}
textarea.TextBox--YDF-InputOrTextAreaElement:before {
  content: "";
  display: block;
  margin-top: -.05rem;
}
textarea.TextBox--YDF-InputOrTextAreaElement:after {
  content: "";
  display: block;
  margin-bottom: -.05rem;
}
.TextBox--YDF-InputOrTextAreaElement {
  border-color: #c5c5c5;
  border-style: solid;
  color: #454545;
}
.TextBox--YDF.TextBox--YDF__InvalidInputState .TextBox--YDF-InputOrTextAreaElement {
  background: #fddfdf;
  border-color: #f1a899;
}
.SimpleIntegratedControlsGroupDemo {
  align-items: center;
  background: #f8f8f8;
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: center;
  padding: 24px 36px;
}
.SimpleIntegratedControlsGroupDemo-Form {
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 0 4px 2px rgba(0,0,0,.25);
  max-width: 480px;
  min-width: 320px;
  overflow-y: auto;
  padding: 12px 14px;
  position: relative /* Required for JavaScript */;
  width: 100%;
}
.SimpleIntegratedControlsGroupDemo-Heading {
  color: #989898;
  font-size: 24px;
  line-height: 1.2;
}
.SimpleIntegratedControlsGroupDemo-Heading:before {
  content: "";
  display: block;
  margin-top: -2.4px;
}
.SimpleIntegratedControlsGroupDemo-Heading:after {
  content: "";
  display: block;
  margin-bottom: -2.4px;
}
.SimpleIntegratedControlsGroupDemo-Heading+.SimpleIntegratedControlsGroupDemo-TextBox,.SimpleIntegratedControlsGroupDemo-TextBox+.SimpleIntegratedControlsGroupDemo-TextBox {
  margin-top: 12px;
}
.SimpleIntegratedControlsGroupDemo-ErrorMessage {
  color: #e74c3c;
  font-size: 14px;
  font-weight: 700;
  line-height: 1.2;
  margin-top: 16px;
  text-align: right;
}
.SimpleIntegratedControlsGroupDemo-ErrorMessage:before {
  content: "";
  display: block;
  margin-top: -1.4px;
}
.SimpleIntegratedControlsGroupDemo-ErrorMessage:after {
  content: "";
  display: block;
  margin-bottom: -1.4px;
}
.SimpleIntegratedControlsGroupDemo-SubmittingButton {
  left: 100%;
  position: relative;
  transform: translateX(-100%);
}
.SimpleIntegratedControlsGroupDemo-TextBox+.SimpleIntegratedControlsGroupDemo-SubmittingButton {
  margin-top: 12px;
}
.SimpleIntegratedControlsGroupDemo-ErrorMessage+.SimpleIntegratedControlsGroupDemo-SubmittingButton {
  margin-top: 6px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
