log(values...)

  for value in values

    if isObject(value)

      p(formatObject(value))

    else

      p(value)


buildBEM_Class(parametersObject, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: parametersObject,
    propertiesSpecification: {
      block: {
        type: DataTypes.string,
        required: true
      },
      element: {
        type: DataTypes.string,
        required: false
      },
      modifier: {
        type: DataTypes.string,
        required: false
      },
      elementSeparator: {
        type: DataTypes.string,
        defaultValue: BEM_ELEMENT_SEPARATOR
      },
      modifierSeparator: {
        type: DataTypes.string,
        defaultValue: BEM_MODIFIER_SEPARATOR
      }
    },
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "buildBEM_Class"
  })


  outputBEM_Class = parametersObject.block


  if isNotNull(parametersObject.element)

    outputBEM_Class = outputBEM_Class + parametersObject.elementSeparator + parametersObject.element


  if isNotNull(parametersObject.modifier)

    outputBEM_Class = outputBEM_Class + parametersObject.modifierSeparator + parametersObject.modifier


  return outputBEM_Class


substituteWhenNull(targetValue, defaultValue)

  return isNull(targetValue) || typeof(targetValue) == "ident" ? defaultValue : targetValue
