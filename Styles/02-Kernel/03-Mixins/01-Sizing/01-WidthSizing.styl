WidthSizing = {
  singleObjectTypeParameterPropertiesValidation: {
    fixedWidth: {
      type: DataTypes.unit,
      incompatibleWith: "minimalWidth" "maximalWidth"
    },
    minimalWidth: {
      type: DataTypes.unit
    },
    maximalWidth: {
      type: DataTypes.unit
    },
    takeMaximumSpaceAsPossible: {
      type: DataTypes.boolean
    },

    truncateOnOverflow: {
      type: DataTypes.boolean
    },
    displayEllipsisOnOverflow: {
      type: DataTypes.boolean
    },

    leftOrRightEqualBordersWidths: {
      type: DataTypes.unit,
      incompatibleWith: "leftBorderWidth" "rightBorderWidth"
    },
    leftBorderWidth: {
      type: DataTypes.unit
    },
    rightBorderWidth: {
      type: DataTypes.unit
    },
    explicitBorderNoneDeclarationRequired: {
      type: DataTypes.boolean
    },

    leftOrRightEqualPaddings: {
      type: DataTypes.unit,
      incompatibleWith: "leftPadding" "rightPadding"
    },
    leftPadding: {
      type: DataTypes.unit
    },
    rightPadding: {
      type: DataTypes.unit
    },
    explicitPaddingZeroDeclarationRequired: {
      type: DataTypes.boolean
    }
  }
}


widthSizing(specification, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: specification,
    propertiesSpecification: WidthSizing.singleObjectTypeParameterPropertiesValidation,
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "widthSizing"
  })

  fixedWidth = specification.fixedWidth
  minimalWidth = specification.minimalWidth
  maximalWidth = specification.maximalWidth
  takeMaximumSpaceAsPossible = specification.takeMaximumSpaceAsPossible

  truncateOnOverflow = specification.truncateOnOverflow
  displayEllipsisOnOverflow = specification.displayEllipsisOnOverflow

  leftOrRightEqualBordersWidths = specification.leftOrRightEqualBordersWidths
  leftBorderWidth = specification.leftBorderWidth
  rightBorderWidth = specification.rightBorderWidth
  explicitBorderNoneDeclarationRequired = specification.explicitBorderNoneDeclarationRequired

  leftOrRightEqualPaddings = specification.leftOrRightEqualPaddings
  leftPadding = specification.leftPadding
  rightPadding = specification.rightPadding
  explicitPaddingZeroDeclarationRequired = specification.explicitPaddingZeroDeclarationRequired


  applyIfNotNull({
    width: fixedWidth,
    min-width: minimalWidth,
    max-width: maximalWidth
  })

  if isTrue(takeMaximumSpaceAsPossible)

    width 100%


  // --- Borders -------------------------------------------------------------------------------------------------------
  if isNull(leftOrRightEqualBordersWidths) && isNull(leftBorderWidth) &&\
      isNull(rightBorderWidth) && isTrue(explicitBorderNoneDeclarationRequired)

    border-left none
    border-right none

  else if isNotNull(leftOrRightEqualBordersWidths)

    border-left-width leftOrRightEqualBordersWidths
    border-right-width leftOrRightEqualBordersWidths

  else

    if isNotNull(leftBorderWidth)

      border-left-width leftBorderWidth

    else if isTrue(explicitBorderNoneDeclarationRequired)

      border-left none


    if isNotNull(rightBorderWidth)

      border-right-width rightBorderWidth

    else if isTrue(explicitBorderNoneDeclarationRequired)

      border-right none


  // --- Paddings ------------------------------------------------------------------------------------------------------
  if isNull(leftOrRightEqualPaddings) && isNull(leftPadding) &&\
      isNull(rightPadding) && isTrue(explicitPaddingZeroDeclarationRequired)

    padding-left 0
    padding-right 0

  else if isNotNull(leftOrRightEqualPaddings)

    padding-left leftOrRightEqualPaddings
    padding-right leftOrRightEqualPaddings

  else

    if isNotNull(leftPadding)

      padding-left leftPadding

    else if isTrue(explicitPaddingZeroDeclarationRequired)

      padding-left 0


    if isNotNull(rightPadding)

      padding-right rightPadding

    else if isTrue(explicitPaddingZeroDeclarationRequired)

      padding-right 0


  if truncateOnOverflow

    SingleLineElementOverflowTolerance({ displayEllipsis: displayEllipsisOnOverflow })


specifyWidthSizing(specification, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: specification,
    propertiesSpecification: WidthSizing.singleObjectTypeParameterPropertiesValidation,
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "specifyWidthSizing"
  })

  return {

    fixedWidth: specification.fixedWidth,
    minimalWidth: specification.minimalWidth,
    maximalWidth: specification.maximalWidth,
    takeMaximumSpaceAsPossible: specification.takeMaximumSpaceAsPossible,

    truncateOnOverflow: specification.truncateOnOverflow,
    displayEllipsisOnOverflow: specification.displayEllipsisOnOverflow,

    leftOrRightEqualBordersWidths: specification.leftOrRightEqualBordersWidths,
    leftBorderWidth: specification.leftBorderWidth,
    rightBorderWidth: specification.rightBorderWidth,
    explicitBorderNoneDeclarationRequired: specification.omitBorderNoneValue,

    leftOrRightEqualPaddings: specification.leftOrRightEqualPaddings,
    leftPadding: specification.leftPadding,
    rightPadding: specification.rightPadding,
    explicitPaddingZeroDeclarationRequired: specification.omitPaddingZeroDeclaration
  }


fillViewportWidthIgnoringParentPaddings()

  width 100vw
  margin-left calc(-0.5*(100vw - 100%))


TableCellWidthSizing(specification, restParameters__MUST_NOT_BE...)

  validateSingleParametersObject({
    targetObject: specification,
    propertiesSpecification: {

      fixedTotalWidth: {
        type: DataTypes.unit,
        incompatibleWith: "totalMinimalWidth" "totalMaximalWidth" "fixedContentWidth"
      },
      totalMinimalWidth: { type: DataTypes.unit },
      totalMaximalWidth: { type: DataTypes.unit },

      fixedContentWidth: {
        type: DataTypes.unit,
        incompatibleWith: "contentMinimalWidth" "contentMaximalWidth"
      },
      contentMinimalWidth: { type: DataTypes.unit },
      contentMaximalWidth: { type: DataTypes.unit },

      leftOrRightEqualBordersWidths: {
        type: DataTypes.unit,
        incompatibleWith: "leftBorderWidth" "rightBorderWidth"
      },
      leftBorderWidth: { type: DataTypes.unit },
      rightBorderWidth: { type: DataTypes.unit },

      leftOrRightEqualPaddings: {
        type: DataTypes.unit,
        incompatibleWith: "leftPadding" "rightPadding"
      },
      leftPadding: { type: DataTypes.unit },
      rightPadding: { type: DataTypes.unit },

      truncateOnOverflow: {
        type: DataTypes.boolean
      },
      displayEllipsisOnOverflow: {
        type: DataTypes.boolean
      }
    },
    restParameters: restParameters__MUST_NOT_BE,
    mixinOrFunctionName: "TableCellWidthSizing"
  })


  fixedTotalWidth = specification.fixedTotalWidth
  totalMinimalWidth = specification.totalMinimalWidth
  totalMaximalWidth = specification.totalMaximalWidth

  fixedContentWidth = specification.fixedContentWidth
  contentMinimalWidth = specification.contentMinimalWidth
  contentMaximalWidth = specification.contentMaximalWidth

  leftBorderWidth = substituteWhenNull(specification.leftBorderWidth, specification.leftOrRightEqualBordersWidths)
  rightBorderWidth = substituteWhenNull(specification.rightBorderWidth, specification.leftOrRightEqualBordersWidths)

  leftPadding = substituteWhenNull(specification.leftPadding, specification.leftOrRightEqualPaddings)
  rightPadding = substituteWhenNull(specification.rightPadding, specification.leftOrRightEqualPaddings)

  truncateOnOverflow = specification.truncateOnOverflow
  displayEllipsisOnOverflow = specification.displayEllipsisOnOverflow


  if isNotNull(fixedTotalWidth)

    width fixedTotalWidth

  else if isNotNull(fixedContentWidth)

    width: buildCalcExpression(
      "${fixedContentWidth} + ${leftBorderWidth} + ${rightBorderWidth} + ${leftPadding} + ${rightPadding}",
      {
        fixedContentWidth: fixedContentWidth,
        leftBorderWidth: leftBorderWidth,
        rightBorderWidth: rightBorderWidth,
        leftPadding: leftPadding,
        rightPadding: rightPadding
      }
    )


  if isNotNull(totalMinimalWidth)

    min-width totalMinimalWidth

  else if isNotNull(contentMinimalWidth)

    min-width: buildCalcExpression(
      "${contentMinimalWidth} + ${leftBorderWidth} + ${rightBorderWidth} + ${leftPadding} + ${rightPadding}",
      {
        contentMinimalWidth: contentMinimalWidth,
        leftBorderWidth: leftBorderWidth,
        rightBorderWidth: rightBorderWidth,
        leftPadding: leftPadding,
        rightPadding: rightPadding
      }
    )


  if isNotNull(totalMaximalWidth)

    max-width totalMaximalWidth

  else if isNotNull(contentMaximalWidth)

    max-width: buildCalcExpression(
      "${contentMaximalWidth} + ${leftBorderWidth} + ${rightBorderWidth} + ${leftPadding} + ${rightPadding}",
      {
        contentMaximalWidth: contentMaximalWidth,
        leftBorderWidth: leftBorderWidth,
        rightBorderWidth: rightBorderWidth,
        leftPadding: leftPadding,
        rightPadding: rightPadding
      }
    )


  applyIfNotNull({
    border-left-width: leftBorderWidth,
    border-right-width: rightBorderWidth,
    padding-left: leftPadding,
    padding-right: rightPadding
  })


  if truncateOnOverflow

    SingleLineElementOverflowTolerance({ displayEllipsis: displayEllipsisOnOverflow })
