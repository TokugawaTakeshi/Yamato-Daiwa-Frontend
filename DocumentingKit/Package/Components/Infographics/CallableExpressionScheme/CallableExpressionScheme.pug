mixin CallableExpressionScheme(properties)

  -
    const {
      technicalName,
      localizedDescriptiveHeading,
      parametersSpecification = [],
      returnedValue
    } = properties


  .CallableExpressionScheme&attributes(attributes)

    .CallableExpressionScheme-TechnicalNameRow= `${technicalName}(`
    .CallableExpressionScheme-LocalizedDescriptiveHeading= localizedDescriptiveHeading

    .CallableExpressionScheme-GridFlow

      each argumentSpecification, index in parametersSpecification

        - argumentSpecification.number = index + 1

        +ArgumentAbstract(argumentSpecification)

    .CallableExpressionScheme-ClosingBracketRow
      .CallableExpressionScheme-ClosingBracket ):
      .CallableExpressionScheme-ReturnValue
        if returnedValue
          | #{returnedValue}
        else
          | void

    if block
      .CallableExpressionScheme-UsedTypesGridFlow
        block


mixin ArgumentAbstract(argumentSpecification)

  .FunctionParameterAbstract

    .FunctionParameterAbstract-HeaderRow

      .FunctionParameterAbstract-Title= `Parameter No. ${argumentSpecification.number}`

      if argumentSpecification.required === true
        span.FunctionParameterAbstract-RequirementBadge.FunctionParameterAbstract-RequirementBadge__Required 必須
        //-
          +ParameterOrPropertyRequirementBadge({
            status: ParameterOrPropertyRequirementBadge.RequirementStatuses.required
          }).FunctionParameterAbstract-RequirementBadge
      else if argumentSpecification.required === false
        //-
          +ParameterOrPropertyRequirementBadge({
            status: ParameterOrPropertyRequirementBadge.RequirementStatuses.optional
          }).FunctionParameterAbstract-RequirementBadge
      else if typeof argumentSpecification.defaultValue !== "undefined"
        //-
          +ParameterOrPropertyRequirementBadge({
            status: ParameterOrPropertyRequirementBadge.RequirementStatuses.optional
          }).FunctionParameterAbstract-RequirementBadge

    .FunctionParameterAbstract-HeaderCell 一般技術名
    .FunctionParameterAbstract-GenericTechnicalName= argumentSpecification.genericTechnicalName

    .FunctionParameterAbstract-HeaderCell 型
      .FunctionParameterAbstract-Type

        if Array.isArray(argumentSpecification.type)
          .FunctionParameterAbstract-Type-OneOfComposition
            each alternative in argumentSpecification.type
              .FunctionParameterAbstract-Type-OneOfComposition-Alternative= alternative

        else
          | #{argumentSpecification.type}

      //-



        .FunctionParameterAbstract-HeaderCell 日本語名
        .FunctionParameterAbstract-LocalizedName= argumentSpecification.localizedName
